C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DWSCREEN
OBJECT MODULE PLACED IN .\list\dwscreen.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE dwscreen.c LARGE OMF2 BROWSE DEBUG PRINT(.\list\dwscreen.lst) TABS(2) OBJEC
                    -T(.\list\dwscreen.obj)

line level    source

   1          #include "dwscreen.h"
   2          #include "process.h"
   3          #include "task.h"
   4          #include "alert.h"
   5          #include "typealias.h"
   6          #include "e2prom.h"
   7          #include <stdio.h>
   8          #include <string.h>
   9          
  10          workflow_t xdata dw_flow_read;
  11          u32 password = 0x00000000;
  12          u32 password_admin_input = 0x00000000;
  13          u32 password_guest_input = 0x00000000;
  14          u8 page = 0xFF;
  15          
  16          u8 last_dw_read;
  17          
  18          
  19          // // 报警记录时间表
  20          // u8 time_record[5][6] = {
  21          //  {0, 0, 0, 0, 0, 0},
  22          //  {0, 0, 0, 0, 0, 0},
  23          //  {0, 0, 0, 0, 0, 0},
  24          //  {0, 0, 0, 0, 0, 0},
  25          //  {0, 0, 0, 0, 0, 0}
  26          // };
  27          
  28          
  29          
  30          #define RESP_BUF_SIZE 128
  31          static char xdata cached_response[RESP_BUF_SIZE];
  32          char xdata *dw_cached_response = cached_response;
  33          
  34          u8 counter_for_feed_lack = 0;
  35          
  36          
  37          u8 time_fan_delay_stop = 10;
  38          u8 time_fan_delay_full = 20;
  39          u8 time_feed_suction = 20;
  40          u8 time_feed_discharge = 6;
  41          u8 time_feed_intercept = 0;
  42          u8 time_spray_wash = 5;
  43          u8 time_spray_wash_between = 35;
  44          u8 counter_for_spray_wash = 1;
  45          u8 time_feed_lack = 50;
  46          u8 counter_for_lack_alter = 1;
  47          u8 tem_alter = 20;
  48          u8 tem_stop = 100;
  49          u8 time_feed_stop = 2;
  50          u8 feed_lack_signal = 1;
  51          
  52          
  53          u8 time_fan_delay_stop_set = 10;
  54          u8 time_fan_delay_full_set = 20;
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 2   

  55          u8 time_feed_suction_set = 20;
  56          u8 time_feed_discharge_set = 6;
  57          u8 time_feed_intercept_set = 0;
  58          u8 time_spray_wash_set = 5;
  59          u8 time_spray_wash_between_set = 35;
  60          u8 counter_for_spray_wash_set = 1;
  61          u8 time_feed_lack_set = 50;
  62          u8 counter_for_lack_alter_set = 1;
  63          u8 tem_alter_set = 20;
  64          u8 tem_stop_set = 100;
  65          u8 time_feed_stop_set = 2;
  66          u8 feed_lack_signal_set = 1;
  67          
  68          void send_dat_to_screen(u16 addr, u8 dat)
  69          {
  70   1        TX_write2buff(COM[COM2_ID], 0x5A);
  71   1        TX_write2buff(COM[COM2_ID], 0xA5);
  72   1        TX_write2buff(COM[COM2_ID], 0x05);
  73   1        TX_write2buff(COM[COM2_ID], 0x82);
  74   1        TX_write2buff(COM[COM2_ID], addr >> 8);
  75   1        TX_write2buff(COM[COM2_ID], (u8)addr);
  76   1        TX_write2buff(COM[COM2_ID], 0x00);
  77   1        TX_write2buff(COM[COM2_ID], dat);
  78   1      }
  79          
  80          void send_two_value_to_screen(u16 addr, u8 value_1, u8 value_2)
  81          {
  82   1        TX_write2buff(COM[COM2_ID], 0x5A);
  83   1        TX_write2buff(COM[COM2_ID], 0xA5);
  84   1        TX_write2buff(COM[COM2_ID], 0x07);
  85   1        TX_write2buff(COM[COM2_ID], 0x82);
  86   1        TX_write2buff(COM[COM2_ID], addr >> 8);
  87   1        TX_write2buff(COM[COM2_ID], (u8)addr);
  88   1        TX_write2buff(COM[COM2_ID], 0x00);
  89   1        TX_write2buff(COM[COM2_ID], value_1);
  90   1        TX_write2buff(COM[COM2_ID], 0x00);
  91   1        TX_write2buff(COM[COM2_ID], value_2);
  92   1      }
  93          
  94          void send_counter_for_feed_lack_to_dwscreen(u8 dat)
  95          {
  96   1        send_dat_to_screen(ADDR_COUNT_FOR_FEED_LACK, dat);
  97   1      }
  98          
  99          void syc_signal_start_fan(u8 dat) 
 100          {
 101   1        send_dat_to_screen(ADDR_START, dat);
 102   1      }
 103          
 104          void syc_signal_beep()
 105          {
 106   1        send_dat_to_screen(ADDR_BEEP_CONTROL, 0);
 107   1      }
 108          
 109          void clean_feed_lack_record()
 110          {
 111   1        TX_write2buff(COM[COM2_ID], 0x5A);
 112   1        TX_write2buff(COM[COM2_ID], 0xA5);
 113   1        TX_write2buff(COM[COM2_ID], 0x0F);
 114   1        TX_write2buff(COM[COM2_ID], 0x82);
 115   1        TX_write2buff(COM[COM2_ID], 0x00);
 116   1        TX_write2buff(COM[COM2_ID], 0x86);
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 3   

 117   1        TX_write2buff(COM[COM2_ID], 0x00);
 118   1        TX_write2buff(COM[COM2_ID], 0x00);
 119   1        TX_write2buff(COM[COM2_ID], 0x00);
 120   1        TX_write2buff(COM[COM2_ID], 0x00);
 121   1        TX_write2buff(COM[COM2_ID], 0x00);
 122   1        TX_write2buff(COM[COM2_ID], 0x00);
 123   1        TX_write2buff(COM[COM2_ID], 0x00);
 124   1        TX_write2buff(COM[COM2_ID], 0x00);
 125   1        TX_write2buff(COM[COM2_ID], 0x00);
 126   1        TX_write2buff(COM[COM2_ID], 0x00);
 127   1        TX_write2buff(COM[COM2_ID], 0x00);
 128   1        TX_write2buff(COM[COM2_ID], 0x00);
 129   1      }
 130          
 131          
 132          void display_all_para(u16 addr)
 133          {
 134   1        TX_write2buff(COM[COM2_ID], 0x5A);
 135   1        TX_write2buff(COM[COM2_ID], 0xA5);
 136   1        TX_write2buff(COM[COM2_ID], 0x1F);
 137   1        TX_write2buff(COM[COM2_ID], 0x82);
 138   1        TX_write2buff(COM[COM2_ID], addr >> 8);
 139   1        TX_write2buff(COM[COM2_ID], addr);
 140   1        TX_write2buff(COM[COM2_ID], 0x00);
 141   1        TX_write2buff(COM[COM2_ID], time_spray_wash);
 142   1        TX_write2buff(COM[COM2_ID], 0x00);
 143   1        TX_write2buff(COM[COM2_ID], time_spray_wash_between);
 144   1        TX_write2buff(COM[COM2_ID], 0x00);
 145   1        TX_write2buff(COM[COM2_ID], counter_for_spray_wash);
 146   1        TX_write2buff(COM[COM2_ID], 0x00);
 147   1        TX_write2buff(COM[COM2_ID], time_feed_suction);
 148   1        TX_write2buff(COM[COM2_ID], 0x00);
 149   1        TX_write2buff(COM[COM2_ID], time_feed_intercept);
 150   1        TX_write2buff(COM[COM2_ID], 0x00);
 151   1        TX_write2buff(COM[COM2_ID], time_feed_discharge);
 152   1        TX_write2buff(COM[COM2_ID], 0x00);
 153   1        TX_write2buff(COM[COM2_ID], time_feed_lack);
 154   1        TX_write2buff(COM[COM2_ID], 0x00);
 155   1        TX_write2buff(COM[COM2_ID], counter_for_lack_alter);
 156   1        TX_write2buff(COM[COM2_ID], 0x00);
 157   1        TX_write2buff(COM[COM2_ID], time_fan_delay_stop);
 158   1        TX_write2buff(COM[COM2_ID], 0x00);
 159   1        TX_write2buff(COM[COM2_ID], time_fan_delay_full);
 160   1        TX_write2buff(COM[COM2_ID], 0x00);
 161   1        TX_write2buff(COM[COM2_ID], tem_alter);
 162   1        TX_write2buff(COM[COM2_ID], 0x00);
 163   1        TX_write2buff(COM[COM2_ID], tem_stop);
 164   1        TX_write2buff(COM[COM2_ID], 0x00);
 165   1        TX_write2buff(COM[COM2_ID], time_feed_stop);
 166   1        TX_write2buff(COM[COM2_ID], 0x00);
 167   1        TX_write2buff(COM[COM2_ID], feed_lack_signal);
 168   1      }
 169          
 170          void updata_data_from_dwscreen()
 171          {
 172   1        time_fan_delay_stop_set = time_fan_delay_stop;
 173   1        time_fan_delay_full_set = time_fan_delay_full;
 174   1        time_feed_suction_set = time_feed_suction;
 175   1        time_feed_discharge_set = time_feed_discharge;
 176   1        if(time_feed_suction > time_feed_intercept)
 177   1          time_feed_intercept_set = time_feed_suction - time_feed_intercept;
 178   1        else 
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 4   

 179   1          time_feed_intercept_set = 0;
 180   1        time_spray_wash_set = time_spray_wash;
 181   1        time_spray_wash_between_set = time_spray_wash_between;
 182   1        counter_for_spray_wash_set = counter_for_spray_wash;
 183   1        time_feed_lack_set = time_feed_lack;
 184   1        counter_for_lack_alter_set = counter_for_lack_alter;
 185   1        time_feed_stop_set = time_feed_stop;
 186   1        feed_lack_signal_set = feed_lack_signal;
 187   1        if(!feed_lack_signal)
 188   1              clean_feed_lack_counter();
 189   1      }
 190          
 191          
 192          
 193          bool update_data_should = NO;
 194          void dw_data_reading(u8 *response) {
 195   1          time_spray_wash = response[8];
 196   1          time_spray_wash_between = response[10];
 197   1          counter_for_spray_wash = response[12];
 198   1          time_feed_suction = response[14];
 199   1          time_feed_intercept = response[16];
 200   1            time_feed_discharge = response[18];
 201   1            time_feed_lack = response[20];
 202   1          counter_for_lack_alter = response[22];
 203   1            time_fan_delay_stop = response[24];
 204   1          time_fan_delay_full = response[26];
 205   1          tem_alter = response[28];
 206   1          tem_stop = response[30];
 207   1          time_feed_stop = response[32];
 208   1          feed_lack_signal = response[34];
 209   1          // 实时更新
 210   1          tem_alter_set = tem_alter;
 211   1          tem_stop_set = tem_stop;
 212   1      
 213   1          update_data_should = true;
 214   1      }
 215          
 216          
 217          static bool dw_wf_callback(u8 *response, int len) {
 218   1      //  dw_data_reading(response, len);
 219   1        finish_workflow_before_next_flow(DW_READ_WORKFLOW_ID);
 220   1        return true;
 221   1      }
*** WARNING C280 IN LINE 217 OF dwscreen.c: 'response': unreferenced local variable
*** WARNING C280 IN LINE 217 OF dwscreen.c: 'len': unreferenced local variable
 222          
 223          static void dw_wf_start() {
 224   1        dw_flow_read.processing = DW_TIMEOUT;
 225   1        dw_flow_read.task_id = 0;
 226   1        continue_workflow_at_next_round(DW_READ_WORKFLOW_ID);
 227   1      }
 228          
 229          static void dw_wf_clean() {
 230   1        last_dw_read = DW_READ_NONE;
 231   1      }
 232          
 233          static void dw_wf_go(u8 task_id) {
 234   1          finish_workflow_before_next_flow(DW_READ_WORKFLOW_ID);
 235   1      }
*** WARNING C280 IN LINE 233 OF dwscreen.c: 'task_id': unreferenced local variable
 236          
 237          
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 5   

 238          int dw_cache_response(char xdata *r) {
 239   1        u8 len = COM2.RX_Cnt;
 240   1        memset(cached_response, 0, RESP_BUF_SIZE);
 241   1        if (len > RESP_BUF_SIZE) return 0;
 242   1        // copy r -> cached_response until [find "\0" or finish r]
 243   1        // CRASH if: sizeof(r) > sizeof(cached_response)
 244   1        memcpy(cached_response, r, sizeof(char) * len);
 245   1        return len;
 246   1      }
 247          
 248          
 249          void clean_feed_lack_counter()
 250          {
 251   1        counter_for_feed_lack = 0;
 252   1        send_counter_for_feed_lack_to_dwscreen(counter_for_feed_lack);
 253   1        alert_for_system &= ~ALTER_LACK_FEED;
 254   1        clean_feed_lack_record();
 255   1      }
 256          
 257          
 258          void dw_dispatch_response(u8 xdata *r, int len) {
 259   1      
 260   1        if(r[3] == 0x83)
 261   1        {
 262   2          switch(r[5])
 263   2          {
 264   3            case COMMAND_CANCLE_AND_BACK:
 265   3              count_down_cancel(&system_back_home);
 266   3              page_init = 0;
 267   3              // page_back_home();
 268   3              break;
 269   3            case COMMAND_PW_ADM_ACK:
 270   3              page_password_admin_input_handle();
 271   3              reload_system_back_home();
 272   3              page_init = 1;
 273   3              break;
 274   3            case COMMAND_PW_SET_ACK:
 275   3              page_password_setting_handle();
 276   3              reload_system_back_home();
 277   3              page_init = 1;
 278   3              break;
 279   3            case COMMAND_PW_RESET:
 280   3              password_to_init();
 281   3              break;
 282   3            case COMMAND_PW_MD_ACK:
 283   3              modify_password();
 284   3              reload_system_back_home();
 285   3              page_init = 1;
 286   3              break;
 287   3            case COMMAND_PA_RESET:
 288   3              setting_to_init();
 289   3              break;   
 290   3            case COMMAND_PA_MD_ACK:
 291   3              update_setting();
 292   3              break;     
 293   3            case COMMAND_BEEP_CONTROL:
 294   3            // 解除当次报警  
 295   3              if(r[8])
 296   3                INT_PROC |= ALTER_BEEP_CLOSE_DUTY;
 297   3            // 重新开始报警
 298   3              else
 299   3              {
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 6   

 300   4                // 料满不需要报警
 301   4                if(alert_for_system & 0x1E)
 302   4                  INT_PROC |= ALTER_BEEP_DUTY;
 303   4              }
 304   3              page_init = 0;
 305   3              break;   
 306   3            case COMMAND_START:
 307   3              start_fan_signal = r[8];
 308   3              system_start_or_not();
 309   3              page_init = 0;
 310   3              break;
 311   3            case COMMAND_HELP:
 312   3              reload_system_back_home();
 313   3              page_init = 1;
 314   3              break;
 315   3            case COMMAND_INQUIRY:
 316   3              // page_to_param_inqury();
 317   3              reload_system_back_home();
 318   3              page_init = 1;
 319   3              break; 
 320   3            case COMMAND_NEXT_PAGE:
 321   3              reload_system_back_home();
 322   3              page_init = 1;
 323   3              break; 
 324   3            case COMMAND_LAST_PAGE:
 325   3              reload_system_back_home();
 326   3              page_init = 1;
 327   3              break;
 328   3            case COMMAND_PASSWORD_MANAGEMENT:
 329   3              page_password_admin_handle();
 330   3              reload_system_back_home();
 331   3              page_init = 1;
 332   3              break;
 333   3            case COMMAND_LOGIN_ON:
 334   3              login_on_setting_handle();
 335   3              reload_system_back_home();
 336   3              page_init = 1;
 337   3              break;
 338   3            case COMMAND_LOGIN_OUT:
 339   3              login_off_current_user();
 340   3              page_init = 0;
 341   3              break;
 342   3            case ADDR_PW_INPUT:
 343   3              password = r[7] << 24 | r[8] << 16 | r[9] << 8 | r[10];
 344   3              page_init = 1;
 345   3              break;
 346   3            case ADDR_PW_ADMIN_INPUT:
 347   3              password_admin_input = r[7] << 24 | r[8] << 16 | r[9] << 8 | r[10];
 348   3              password_guest_input = r[11] << 24 | r[12] << 16 | r[13] << 8 | r[14];
 349   3              page_init = 1;
 350   3              break;
 351   3            case COMMAND_TEST_SPRAY_WASH:
 352   3              test_spray_wash_process(r[8]);
 353   3              reload_system_back_home();
 354   3              page_init = 1;
 355   3              break;
 356   3            case COMMAND_TEST_SUCTION:
 357   3              test_suction_process(r[8]);
 358   3              reload_system_back_home();
 359   3              page_init = 1;
 360   3              break;
 361   3            case COMMAND_TEST_INTERCEPT:
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 7   

 362   3              test_intercept_process(r[8]);
 363   3              reload_system_back_home();
 364   3              page_init = 1;
 365   3              break;
 366   3            case COMMAND_TEST_BEEP:
 367   3              test_beep_process(r[8]);
 368   3              reload_system_back_home();
 369   3              page_init = 1;
 370   3              break;
 371   3            case COMMAND_TEST_FAN:
 372   3              test_fan_process(r[8]);
 373   3              reload_system_back_home();
 374   3              page_init = 1;
 375   3              break;
 376   3            case COMMAND_TEST_REST:
 377   3              test_rest_process();
 378   3              reload_system_back_home();
 379   3              page_init = 1;
 380   3              break;
 381   3            case  COMMAND_TEST_BY_HAND:
 382   3              // page_to_test_hand();
 383   3              reload_system_back_home();
 384   3              page_init = 1;
 385   3              break;
 386   3            case  COMMAND_RECORD_INQURY:
 387   3              // page_to_record_inqury();
 388   3              reload_system_back_home();
 389   3              page_init = 1;
 390   3              break;
 391   3            case INDEX_FOR_ADMIN_SET:
 392   3              dw_data_reading(r);
 393   3              // 机器没有运行直接更新
 394   3              if(!start_fan_signal)
 395   3                updata_data_from_dwscreen();
 396   3              page_init = 1;
 397   3              break;
 398   3            case COMMAND_TEST_CANCLE:
 399   3              test_rest_process();
 400   3              page_init = 0;
 401   3              break;
 402   3            case COMMAND_REST_STATUS:
 403   3            // clean feed_lack history
 404   3              counter_for_feed_lack = 0;
 405   3              send_counter_for_feed_lack_to_dwscreen(counter_for_feed_lack);
 406   3              alert_for_system &= ~ALTER_LACK_FEED;
 407   3              clean_feed_lack_record();
 408   3              break;
 409   3            case COMMAND_CANCLE_PW_INPUT:
 410   3              password_input_cancle();
 411   3              break;
 412   3            case COMMAND_CANCLE_PW_MD:
 413   3              password_modify_cancle();
 414   3              break;
 415   3            case COMMAND_CANCLE_PA_INPUT:
 416   3              param_set_cancle();
 417   3              break;
 418   3            case COMMAND_TIME_SET:
 419   3              reload_system_back_home();
 420   3              page_init = 1;
 421   3              break;
 422   3            case COMMAND_FEED_LACK_CONTROL:
 423   3              // feed_lack_signal = r[8];
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 8   

 424   3              // store_all_para();
 425   3              // update_data_should = true;
 426   3              break;
 427   3            default:
 428   3              break;
 429   3          }             
 430   2        }
 431   1        else if(r[3] == 0x81)
 432   1        {
 433   2          switch(r[4])
 434   2          {
 435   3            case REGISTER_TIME:
 436   3            {
 437   4              u8 i, record_code, mask = 0x01;
 438   4              record_code = record;
 439   4              for(i = 0; i < 5; i++)
 440   4              {
 441   5                if(record_code & mask)
 442   5                {
 443   6                  // 报警记录发送
 444   6                  TX_write2buff(COM[COM2_ID], 0x5A);
 445   6                  TX_write2buff(COM[COM2_ID], 0xA5);
 446   6                  TX_write2buff(COM[COM2_ID], 0x09);
 447   6                  TX_write2buff(COM[COM2_ID], 0x82);
 448   6                  TX_write2buff(COM[COM2_ID], 0x00);
 449   6                  TX_write2buff(COM[COM2_ID], 0x80 + i * 6);
 450   6                  TX_write2buff(COM[COM2_ID], r[6]);
 451   6                  TX_write2buff(COM[COM2_ID], r[7]);
 452   6                  TX_write2buff(COM[COM2_ID], r[8]);
 453   6                  TX_write2buff(COM[COM2_ID], r[10]);
 454   6                  TX_write2buff(COM[COM2_ID], r[11]);
 455   6                  TX_write2buff(COM[COM2_ID], r[12]);
 456   6                }
 457   5                mask <<= 1;
 458   5              }
 459   4              break;
 460   4            }
 461   3            case REGISTER_PAGE:
 462   3              page = r[7]; 
 463   3              page_init = 1;
 464   3              break;
 465   3            default:
 466   3              break;
 467   3          }
 468   2        }
 469   1      }
*** WARNING C280 IN LINE 258 OF dwscreen.c: 'len': unreferenced local variable
 470          
 471          void Delay5ms()   //@24.000MHz
 472          {
 473   1        unsigned char i, j;
 474   1      
 475   1        i = 117;
 476   1        j = 184;
 477   1        do
 478   1        {
 479   2          while (--j);
 480   2        } while (--i);
 481   1      }
 482          
 483          
 484          void dw_screen_init()
C51 COMPILER V9.52.0.0   DWSCREEN                                                          07/02/2016 11:26:44 PAGE 9   

 485          {
 486   1        display_all_para(INDEX_FOR_INQUIRY);
 487   1        Delay5ms();
 488   1        display_all_para(INDEX_FOR_ADMIN_SET);
 489   1      }
 490          
 491          
 492          void dw_init() {
 493   1        dw_flow_read.uart_id = DW_UART_ID;
 494   1        dw_flow_read.workflow_id = DW_READ_WORKFLOW_ID;
 495   1        dw_flow_read.task_id = TASK_ID_NONE;
 496   1        dw_flow_read.processing = 0;
 497   1        dw_flow_read.callback = dw_wf_callback;
 498   1        dw_flow_read.start = dw_wf_start;
 499   1        dw_flow_read.go = dw_wf_go;
 500   1        dw_flow_read.clean = dw_wf_clean;
 501   1        dw_flow_read.timeout = NULL;
 502   1        last_dw_read = DW_READ_NONE;
 503   1        workflow_registration[DW_READ_WORKFLOW_ID] = &dw_flow_read;
 504   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2754    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    192      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
