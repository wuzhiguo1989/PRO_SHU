C51 COMPILER V9.52.0.0   E2PROM                                                            07/02/2016 11:26:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE E2PROM
OBJECT MODULE PLACED IN .\list\e2prom.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE e2prom.c LARGE OMF2 BROWSE DEBUG PRINT(.\list\e2prom.lst) TABS(2) OBJECT(.\
                    -list\e2prom.obj)

line level    source

   1          #include "e2prom.h"
   2          #include "intrins.h"
   3          #include "dwscreen.h"
   4          
   5          u32 password_adminstrator = 0;
   6          u32 password_guest = 0;
   7          static void DisableEEPROM(void)
   8          {
   9   1          IAP_CONTR = 0;          //禁止ISP/IAP操作
  10   1          IAP_CMD   = 0;          //去除ISP/IAP命令
  11   1          IAP_TRIG  = 0;          //防止ISP/IAP命令误触发
  12   1          IAP_ADDRH = 0xff;       //清0地址高字节
  13   1          IAP_ADDRL = 0xff;       //清0地址低字节，指向非EEPROM区，防止误操作
  14   1      }
  15          static u8 EEPROM_read(u16 EE_address)
  16          {
  17   1          u8 dat;
  18   1          IAP_CONTR = ENABLE_IAP;
  19   1          IAP_CMD = CMD_READ;
  20   1          IAP_ADDRL = EE_address;
  21   1          IAP_ADDRH = EE_address >> 8;
  22   1          IAP_TRIG = 0x5a;
  23   1          IAP_TRIG = 0xa5;
  24   1          _nop_();
  25   1          dat = IAP_DATA;
  26   1          DisableEEPROM();
  27   1          return dat;
  28   1      }
  29          
  30          static void EEPROM_SectorErase(u16 EE_address)
  31          {
  32   1          IAP_CONTR = ENABLE_IAP;  //设置等待时间，允许ISP/IAP操作，送一次就够
  33   1          IAP_CMD = CMD_ERASE;     //送字节写命令，命令不需改变时，不需重新送命令
  34   1          IAP_ADDRL = EE_address;
  35   1          IAP_ADDRH = EE_address >> 8;
  36   1          IAP_TRIG = 0x5a;
  37   1          IAP_TRIG = 0xa5;
  38   1          _nop_();
  39   1          DisableEEPROM();
  40   1      }
  41          
  42          static void EEPROM_write(u16 EE_address,u8 dat)
  43          {
  44   1      
  45   1          IAP_CONTR = ENABLE_IAP;  //设置等待时间，允许ISP/IAP操作，送一次就够
  46   1          IAP_CMD = CMD_PROGRAM;   //送字节写命令，命令不需改变时，不需重新送命令
  47   1          IAP_ADDRL = EE_address;
  48   1          IAP_ADDRH = EE_address >> 8;
  49   1        IAP_DATA = dat;
  50   1          IAP_TRIG = 0x5a;
  51   1          IAP_TRIG = 0xa5;
  52   1          _nop_();
  53   1          DisableEEPROM();
  54   1      }
C51 COMPILER V9.52.0.0   E2PROM                                                            07/02/2016 11:26:44 PAGE 2   

  55          
  56          void password_init()
  57          {
  58   1          // 检查密码是否被修改过  
  59   1          if(EEPROM_read(ADDRESS_FOR_PASSWORD_MODIFY_FLAG) == 0xFF)
  60   1          {
  61   2          // 从INIT中取
  62   2               password_adminstrator =  EEPROM_read(ADDRESS_FOR_PASSWORD_ADMIN_INIT) << 24 | EEPROM_read(ADDRESS
             -_FOR_PASSWORD_ADMIN_INIT + 1) << 16 | EEPROM_read(ADDRESS_FOR_PASSWORD_ADMIN_INIT + 2) << 8 | EEPROM_read(ADDRESS_FOR_PA
             -SSWORD_ADMIN_INIT + 3);
  63   2               password_guest = EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_INIT) << 24 | EEPROM_read(ADDRESS_FOR_PAS
             -SWORD_GUEST_INIT + 1) << 16 | EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_INIT + 2) << 8 | EEPROM_read(ADDRESS_FOR_PASSWORD_G
             -UEST_INIT + 3);
  64   2          }
  65   1          else
  66   1          {
  67   2          // 从SET中取
  68   2               password_adminstrator =  EEPROM_read(ADDRESS_FOR_PASSWORD_ADMIN_SET) << 24 | EEPROM_read(ADDRESS_
             -FOR_PASSWORD_ADMIN_SET + 1) << 16 | EEPROM_read(ADDRESS_FOR_PASSWORD_ADMIN_SET + 2) << 8 | EEPROM_read(ADDRESS_FOR_PASSW
             -ORD_ADMIN_SET + 3);
  69   2               password_guest = EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_SET) << 24 | EEPROM_read(ADDRESS_FOR_PASS
             -WORD_GUEST_SET + 1) << 16 | EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_SET + 2) << 8 | EEPROM_read(ADDRESS_FOR_PASSWORD_GUES
             -T_SET + 3);
  70   2          }
  71   1      }
  72          
  73          void store_all_password()
  74          {
  75   1          EEPROM_SectorErase(ADDRESS_FOR_PASSWORD_MODIFY_FLAG);
  76   1          EEPROM_write(ADDRESS_FOR_PASSWORD_MODIFY_FLAG, 1);
  77   1          EEPROM_write(ADDRESS_FOR_PASSWORD_ADMIN_SET, password_adminstrator >> 24);
  78   1          EEPROM_write(ADDRESS_FOR_PASSWORD_ADMIN_SET + 1, password_adminstrator >> 16);
  79   1          EEPROM_write(ADDRESS_FOR_PASSWORD_ADMIN_SET + 2, password_adminstrator >> 8);
  80   1          EEPROM_write(ADDRESS_FOR_PASSWORD_ADMIN_SET + 3, password_adminstrator);
  81   1          EEPROM_write(ADDRESS_FOR_PASSWORD_GUEST_SET, password_guest >> 24);
  82   1          EEPROM_write(ADDRESS_FOR_PASSWORD_GUEST_SET + 1, password_guest >> 16);
  83   1          EEPROM_write(ADDRESS_FOR_PASSWORD_GUEST_SET + 2, password_guest >> 8);
  84   1          EEPROM_write(ADDRESS_FOR_PASSWORD_GUEST_SET + 3, password_guest);
  85   1      }
  86          
  87          void reset_all_password()
  88          {
  89   1          EEPROM_SectorErase(ADDRESS_FOR_PASSWORD_MODIFY_FLAG);
  90   1          password_adminstrator =  EEPROM_read(ADDRESS_FOR_PASSWORD_ADMIN_INIT) << 24 | EEPROM_read(ADDRESS_FOR_
             -PASSWORD_ADMIN_INIT + 1) << 16 | EEPROM_read(ADDRESS_FOR_PASSWORD_ADMIN_INIT + 2) << 8 | EEPROM_read(ADDRESS_FOR_PASSWOR
             -D_ADMIN_INIT + 3);
  91   1          password_guest = EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_INIT) << 24 | EEPROM_read(ADDRESS_FOR_PASSWORD
             -_GUEST_INIT + 1) << 16 | EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_INIT + 2) << 8 | EEPROM_read(ADDRESS_FOR_PASSWORD_GUEST_
             -INIT + 3);
  92   1      }
  93          
  94          void param_init()
  95          {
  96   1          // 检查密码是否被修改过  
  97   1          if(EEPROM_read(ADDRESS_FOR_PARAM_MODIFY_FLAG) == 0xFF)
  98   1          {
  99   2          // 从INIT中取
 100   2              time_fan_delay_stop =  EEPROM_read(ADDRESS_FOR_PARAM_INIT);
 101   2              time_fan_delay_full = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 1);
 102   2              time_feed_suction = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 2);
 103   2              time_feed_discharge = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 3);
 104   2              time_feed_intercept = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 4);
C51 COMPILER V9.52.0.0   E2PROM                                                            07/02/2016 11:26:44 PAGE 3   

 105   2              time_spray_wash = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 5);
 106   2              time_spray_wash_between = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 6);
 107   2              counter_for_spray_wash = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 7); 
 108   2              time_feed_lack = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 8);
 109   2              counter_for_lack_alter = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 9);
 110   2              tem_alter = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 10);
 111   2              tem_stop = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 11);
 112   2              time_feed_stop = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 12);
 113   2              feed_lack_signal = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 13);
 114   2              updata_data_from_dwscreen();
 115   2          }
 116   1          else
 117   1          {
 118   2          // 从SET中取
 119   2              time_fan_delay_stop =  EEPROM_read(ADDRESS_FOR_PARAM_SET + 1);
 120   2              time_fan_delay_full = EEPROM_read(ADDRESS_FOR_PARAM_SET + 2);
 121   2              time_feed_suction = EEPROM_read(ADDRESS_FOR_PARAM_SET + 3);
 122   2              time_feed_discharge = EEPROM_read(ADDRESS_FOR_PARAM_SET + 4);
 123   2              time_feed_intercept = EEPROM_read(ADDRESS_FOR_PARAM_SET + 5);
 124   2              time_spray_wash = EEPROM_read(ADDRESS_FOR_PARAM_SET + 6);
 125   2              time_spray_wash_between = EEPROM_read(ADDRESS_FOR_PARAM_SET + 7);
 126   2              counter_for_spray_wash = EEPROM_read(ADDRESS_FOR_PARAM_SET + 8); 
 127   2              time_feed_lack = EEPROM_read(ADDRESS_FOR_PARAM_SET + 9);
 128   2              counter_for_lack_alter = EEPROM_read(ADDRESS_FOR_PARAM_SET + 10);
 129   2              tem_alter = EEPROM_read(ADDRESS_FOR_PARAM_SET + 11);
 130   2              tem_stop = EEPROM_read(ADDRESS_FOR_PARAM_SET + 12);
 131   2              time_feed_stop = EEPROM_read(ADDRESS_FOR_PARAM_SET + 13);
 132   2              feed_lack_signal = EEPROM_read(ADDRESS_FOR_PARAM_SET + 14);
 133   2              updata_data_from_dwscreen();
 134   2          }    
 135   1      }
 136          
 137          void store_all_para()
 138          {
 139   1          EEPROM_SectorErase(ADDRESS_FOR_PARAM_MODIFY_FLAG);
 140   1          EEPROM_write(ADDRESS_FOR_PARAM_MODIFY_FLAG, 1);
 141   1          // ADDRESS_FOR_PARAM_MODIFY_FLAG == ADDRESS_FOR_PARAM_SET
 142   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 1, time_fan_delay_stop);
 143   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 2, time_fan_delay_full);
 144   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 3, time_feed_suction);
 145   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 4, time_feed_discharge);
 146   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 5, time_feed_intercept);
 147   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 6, time_spray_wash);
 148   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 7, time_spray_wash_between);
 149   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 8, counter_for_spray_wash);
 150   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 9, time_feed_lack);
 151   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 10, counter_for_lack_alter);
 152   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 11, tem_alter);
 153   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 12, tem_stop);
 154   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 13, time_feed_stop);
 155   1          EEPROM_write(ADDRESS_FOR_PARAM_SET + 14, feed_lack_signal);
 156   1      }
 157          
 158          void reset_all_para()
 159          {
 160   1          EEPROM_SectorErase(ADDRESS_FOR_PARAM_MODIFY_FLAG);
 161   1          time_fan_delay_stop =  EEPROM_read(ADDRESS_FOR_PARAM_INIT);
 162   1          time_fan_delay_full = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 1);
 163   1          time_feed_suction = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 2);
 164   1          time_feed_discharge = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 3);
 165   1          time_feed_intercept = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 4);
 166   1          time_spray_wash = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 5);
C51 COMPILER V9.52.0.0   E2PROM                                                            07/02/2016 11:26:44 PAGE 4   

 167   1          time_spray_wash_between = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 6);
 168   1          counter_for_spray_wash = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 7); 
 169   1          time_feed_lack = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 8);
 170   1          counter_for_lack_alter = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 9);
 171   1          tem_alter = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 10);
 172   1          tem_stop = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 11);
 173   1          time_feed_stop = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 12);
 174   1          feed_lack_signal = EEPROM_read(ADDRESS_FOR_PARAM_INIT + 13);
 175   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1231    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
