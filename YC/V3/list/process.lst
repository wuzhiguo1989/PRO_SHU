C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PROCESS
OBJECT MODULE PLACED IN .\list\process.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE process.c LARGE OMF2 BROWSE DEBUG PRINT(.\list\process.lst) TABS(2) OBJECT(
                    -.\list\process.obj)

line level    source

   1          #include "process.h"
   2          #include "uart.h"
   3          #include "dwscreen.h"
   4          #include "task.h"
   5          #include "alert.h"
   6          #include "e2prom.h"
   7          
   8          
   9          #define STATUS_IDLE       0x01
  10          #define STATUS_FAN_WORK   0x02
  11          #define STATUS_SUCTION    0x04
  12          #define STATUS_INTERCEPT  0x08
  13          #define STATUS_DISCHARGE  0x10
  14          #define STATUS_FEED_FULL  0x20
  15          #define STATUS_SPRAY_WASH 0x40
  16          
  17          u8 feed_status;
  18          id_m identified_status = identified_none;
  19          bool page_init = 1;
  20          
  21          
  22          void turn_to_page(u8 page)
  23          {
  24   1        TX_write2buff(COM[COM2_ID], 0x5A);
  25   1        TX_write2buff(COM[COM2_ID], 0xA5);
  26   1        TX_write2buff(COM[COM2_ID], 0x04);
  27   1        TX_write2buff(COM[COM2_ID], 0x80);
  28   1        TX_write2buff(COM[COM2_ID], 0x03);
  29   1        TX_write2buff(COM[COM2_ID], 0x00);
  30   1        TX_write2buff(COM[COM2_ID], page);
  31   1      }
  32          
  33          
  34          
  35          void get_password_from_screen()
  36          {
  37   1        TX_write2buff(COM[COM2_ID], 0x5A);
  38   1        TX_write2buff(COM[COM2_ID], 0xA5);
  39   1        TX_write2buff(COM[COM2_ID], 0x04);
  40   1        TX_write2buff(COM[COM2_ID], 0x83);
  41   1        TX_write2buff(COM[COM2_ID], 0x00);
  42   1        TX_write2buff(COM[COM2_ID], 0x10);
  43   1        TX_write2buff(COM[COM2_ID], 0x02);
  44   1      }
  45          
  46          void reset_password_input()
  47          {
  48   1        TX_write2buff(COM[COM2_ID], 0x5A);
  49   1        TX_write2buff(COM[COM2_ID], 0xA5);
  50   1        TX_write2buff(COM[COM2_ID], 0x07);
  51   1        TX_write2buff(COM[COM2_ID], 0x82);
  52   1        TX_write2buff(COM[COM2_ID], 0x00);
  53   1        TX_write2buff(COM[COM2_ID], 0x10);
  54   1        TX_write2buff(COM[COM2_ID], 0x00);
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 2   

  55   1        TX_write2buff(COM[COM2_ID], 0x00);  
  56   1        TX_write2buff(COM[COM2_ID], 0x00);
  57   1        TX_write2buff(COM[COM2_ID], 0x00);
  58   1      }
  59          
  60          #define page_to_admin_setting_first()   turn_to_page(PAGE_ADMIN_SETTING1)
  61          #define page_to_guest_setting_first()   turn_to_page(PAGE_GUEST_SETTING1)
  62          #define page_to_login_on_identify()   turn_to_page(PAGE_PASSWORD_LOGIN)
  63          
  64          void page_password_setting_handle_callback()
  65          {
  66   1        // reset password screen
  67   1        reset_password_input();
  68   1        // pass
  69   1        if(password == password_adminstrator)
  70   1        {
  71   2          identified_status = admin;
  72   2          page_to_admin_setting_first();
  73   2          reload_system_no_identify();
  74   2        }
  75   1        else if(password == password_guest)
  76   1        {
  77   2          identified_status = guest;
  78   2          page_to_guest_setting_first();
  79   2          reload_system_no_identify();
  80   2        }
  81   1        else 
  82   1          identified_status = identified_none;
  83   1        password = 0;
  84   1      }
  85          
  86          // password setting
  87          void page_password_setting_handle()
  88          {
  89   1        start_simple_workflow(DW_UART_ID, get_password_from_screen, page_password_setting_handle_callback);
  90   1      }
  91          
  92          void login_on_setting_handle()
  93          {
  94   1        if(identified_status == admin)
  95   1        {
  96   2          page_to_admin_setting_first();
  97   2          reload_system_no_identify();
  98   2        }
  99   1        else if(identified_status == guest)
 100   1        {
 101   2          page_to_guest_setting_first();
 102   2          reload_system_no_identify();
 103   2        }
 104   1        else
 105   1          page_to_login_on_identify();
 106   1      }
 107          
 108          // setting init
 109          void setting_to_init()
 110          {
 111   1        // read from e2prom
 112   1        reset_all_para();
 113   1      
 114   1        // init
 115   1        update_data_should = true;
 116   1        //
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 3   

 117   1        display_all_para(INDEX_FOR_ADMIN_SET);
 118   1        display_all_para(INDEX_FOR_INQUIRY);
 119   1      
 120   1        page_back_home();
 121   1      }
 122          
 123          void get_param_set_from_screen()
 124          {
 125   1        TX_write2buff(COM[COM2_ID], 0x5A);
 126   1        TX_write2buff(COM[COM2_ID], 0xA5);
 127   1        TX_write2buff(COM[COM2_ID], 0x04);
 128   1        TX_write2buff(COM[COM2_ID], 0x83);
 129   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_ADMIN_SET >> 8);
 130   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_ADMIN_SET);
 131   1        TX_write2buff(COM[COM2_ID], 0x0E);
 132   1      }
 133          
 134          
 135          
 136          
 137          void update_setting_callback()
 138          {
 139   1        display_all_para(INDEX_FOR_INQUIRY);
 140   1          // store the value
 141   1          store_all_para();
 142   1        update_data_should = true;
 143   1        page_back_home();
 144   1      }
 145          
 146          void update_setting()
 147          {
 148   1        start_simple_workflow(DW_UART_ID, get_param_set_from_screen, update_setting_callback);
 149   1      }
 150          
 151          void update_feed_lack_signal()
 152          {
 153   1        update_data_should = true;
 154   1      }
 155          
 156          #define page_to_password_admin() turn_to_page(PAGE_PASSWORD_MD)
 157          #define page_to_password_admin_login_on()  turn_to_page(PAGE_PASSWORD_ADMIN)
 158          void page_password_admin_handle_callback()
 159          {
 160   1        // reset password screen
 161   1        reset_password_input();
 162   1        // pass
 163   1        if(password == password_adminstrator)
 164   1        {
 165   2          identified_status = admin;
 166   2          page_to_password_admin();
 167   2          reload_system_no_identify();
 168   2        }
 169   1        password = 0;
 170   1      }
 171          
 172          void page_password_admin_input_handle()
 173          {
 174   1        start_simple_workflow(DW_UART_ID, get_password_from_screen, page_password_admin_handle_callback);
 175   1      }
 176          
 177          // password admin
 178          void page_password_admin_handle()
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 4   

 179          {
 180   1        if(identified_status == admin)
 181   1        {
 182   2          page_to_password_admin();
 183   2          reload_system_no_identify();
 184   2        }
 185   1        else
 186   1          page_to_password_admin_login_on();
 187   1      }
 188          
 189          void reset_password_modify_input()
 190          {
 191   1        TX_write2buff(COM[COM2_ID], 0x5A);
 192   1        TX_write2buff(COM[COM2_ID], 0xA5);
 193   1        TX_write2buff(COM[COM2_ID], 0x0B);
 194   1        TX_write2buff(COM[COM2_ID], 0x82);
 195   1        TX_write2buff(COM[COM2_ID], 0x00);
 196   1        TX_write2buff(COM[COM2_ID], 0x14);
 197   1        TX_write2buff(COM[COM2_ID], 0x00);
 198   1        TX_write2buff(COM[COM2_ID], 0x00);  
 199   1        TX_write2buff(COM[COM2_ID], 0x00);
 200   1        TX_write2buff(COM[COM2_ID], 0x00);
 201   1        TX_write2buff(COM[COM2_ID], 0x00);
 202   1        TX_write2buff(COM[COM2_ID], 0x00);  
 203   1        TX_write2buff(COM[COM2_ID], 0x00);
 204   1        TX_write2buff(COM[COM2_ID], 0x00);
 205   1      }
 206          
 207          void password_to_init()
 208          {
 209   1        reset_password_modify_input();
 210   1        // read from e2prom
 211   1        reset_all_password();
 212   1        // init
 213   1        identified_status = identified_none;
 214   1        count_down_cancel(&password_no_identified);
 215   1        // page_back_home();
 216   1      }
 217          
 218          
 219          
 220          void page_password_modify_handle_callback()
 221          {
 222   1        // reset password screen
 223   1        reset_password_modify_input();
 224   1        if(!password_admin_input && password_guest_input)
 225   1        {
 226   2          password_guest = password_guest_input;
 227   2          store_all_password();
 228   2      
 229   2        } else if(password_admin_input && !password_guest_input)
 230   1        {
 231   2          password_adminstrator =  password_admin_input;
 232   2          store_all_password();
 233   2      
 234   2        } else if(password_admin_input && password_guest_input)
 235   1        {
 236   2          password_guest = password_guest_input;
 237   2          password_adminstrator =  password_admin_input;
 238   2          store_all_password();
 239   2        }
 240   1      
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 5   

 241   1        password_admin_input = 0;
 242   1        password_guest_input = 0;
 243   1        // 恢复0
 244   1        identified_status = identified_none;
 245   1        // todo 
 246   1        // cancle count down
 247   1        count_down_cancel(&password_no_identified); 
 248   1        page_back_home();
 249   1      }
 250          
 251          
 252          void get_password_modify_from_screen()
 253          {
 254   1        TX_write2buff(COM[COM2_ID], 0x5A);
 255   1        TX_write2buff(COM[COM2_ID], 0xA5);
 256   1        TX_write2buff(COM[COM2_ID], 0x04);
 257   1        TX_write2buff(COM[COM2_ID], 0x83);
 258   1        TX_write2buff(COM[COM2_ID], 0x00);
 259   1        TX_write2buff(COM[COM2_ID], 0x14);
 260   1        TX_write2buff(COM[COM2_ID], 0x04);
 261   1      }
 262          
 263          void modify_password()
 264          {
 265   1        start_simple_workflow(DW_UART_ID, get_password_modify_from_screen, page_password_modify_handle_callback);
 266   1      }
 267          
 268          
 269          void get_current_page()
 270          {
 271   1        TX_write2buff(COM[COM2_ID], 0x5A);
 272   1        TX_write2buff(COM[COM2_ID], 0xA5);
 273   1        TX_write2buff(COM[COM2_ID], 0x03);
 274   1        TX_write2buff(COM[COM2_ID], 0x81);
 275   1        TX_write2buff(COM[COM2_ID], 0x03);
 276   1        TX_write2buff(COM[COM2_ID], 0x02);
 277   1      }
 278          
 279          
 280          void no_oprate_callback()
 281          {
 282   1        // if page in setting, param value should be replaced with param used now
 283   1        // solve the problem with display
 284   1        if(page == PAGE_ADMIN_SETTING1 || page == PAGE_ADMIN_SETTING2 || page == PAGE_ADMIN_SETTING3 || page == P
             -AGE_ADMIN_SETTING4 || page == PAGE_GUEST_SETTING1 || page == PAGE_GUEST_SETTING2 || page == PAGE_TIME_SETTING)
 285   1          display_all_para(INDEX_FOR_ADMIN_SET);
 286   1        // if page in password_input
 287   1        else if(page == PAGE_PASSWORD_MD)
 288   1        {
 289   2          password_admin_input = 0;
 290   2          password_guest_input = 0;
 291   2          reset_password_modify_input();    
 292   2        }
 293   1        else if(page == PAGE_PASSWORD_LOGIN || page == PAGE_PASSWORD_ADMIN)
 294   1        {
 295   2          password = 0;
 296   2          reset_password_input();
 297   2        }
 298   1        page_back_home();
 299   1        page = 0xFF;
 300   1      }
 301          
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 6   

 302          // back every minute no operate
 303          void every_minute_no_operate_call_back()
 304          {
 305   1        // jude what page is displaying
 306   1        start_simple_workflow(DW_UART_ID, get_current_page, no_oprate_callback);
 307   1      }
 308          
 309          
 310          
 311          
 312          void login_off_current_user()
 313          {
 314   1        identified_status = identified_none;
 315   1        // cancle count down
 316   1        count_down_cancel(&password_no_identified);  
 317   1      }
 318          
 319          
 320          void every_minute_no_identify_call_back()
 321          {
 322   1        login_off_current_user();
 323   1      }
 324          
 325          
 326          
 327          
 328          // test
 329          void test_reset_para(u16 addr)
 330          {
 331   1        TX_write2buff(COM[COM2_ID], 0x5A);
 332   1        TX_write2buff(COM[COM2_ID], 0xA5);
 333   1        TX_write2buff(COM[COM2_ID], 0x05);
 334   1        TX_write2buff(COM[COM2_ID], 0x82);
 335   1        TX_write2buff(COM[COM2_ID], 0x00);
 336   1        TX_write2buff(COM[COM2_ID], (u8)addr);
 337   1        TX_write2buff(COM[COM2_ID], 0x00);
 338   1        TX_write2buff(COM[COM2_ID], 0x00);
 339   1      }
 340          
 341          
 342          
 343          void test_spray_wash_process(u8 value)
 344          {
 345   1        if(!start_fan_signal)
 346   1        {
 347   2          if(!value)
 348   2          {
 349   3            count_down_cancel(&test_spray_wash);
 350   3            spray_wash_disable();
 351   3          }
 352   2          else
 353   2          {
 354   3            spray_wash_enable();
 355   3            reload_test_spray_wash();
 356   3          }
 357   2        }
 358   1        else
 359   1          test_reset_para(ADDR_TEST_SPRAY_WASH);
 360   1      }
 361          
 362          void test_suction_process(u8 value)
 363          {
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 7   

 364   1        if(!start_fan_signal)
 365   1        {
 366   2          if(!value)
 367   2          {
 368   3            count_down_cancel(&test_suction);
 369   3            discharge_enable();
 370   3          }
 371   2          else
 372   2          {
 373   3            suction_enable();
 374   3            reload_test_suction();
 375   3          }
 376   2        }
 377   1        else
 378   1          test_reset_para(ADDR_TEST_SUCTION);
 379   1      
 380   1      }
 381          
 382          
 383          void test_intercept_process(u8 value)
 384          {
 385   1        if(!start_fan_signal)
 386   1        {
 387   2          if(!value)
 388   2          {
 389   3            count_down_cancel(&test_intercept);
 390   3            intercept_disable();
 391   3          }
 392   2          else
 393   2          {
 394   3            intercept_enable();
 395   3            reload_test_intercept();
 396   3          }
 397   2        }
 398   1        else
 399   1          test_reset_para(ADDR_TEST_INTERCEPT);
 400   1          
 401   1      }
 402          
 403          void test_beep_process(u8 value)
 404          {
 405   1        if(!start_fan_signal)
 406   1        {
 407   2            if(!value)
 408   2            {
 409   3              count_down_cancel(&test_beep);
 410   3              INT_PROC |= ALTER_BEEP_CLOSE_DUTY;
 411   3            }
 412   2            else
 413   2            {
 414   3              INT_PROC |= ALTER_BEEP_DUTY;
 415   3            reload_test_beep();
 416   3          }
 417   2        }
 418   1        else
 419   1          test_reset_para(ADDR_TEST_BEEP);
 420   1          
 421   1      }
 422          
 423          void test_fan_process(u8 value)
 424          {
 425   1        if(!start_fan_signal)
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 8   

 426   1        {
 427   2          if(!value)
 428   2            {
 429   3              count_down_cancel(&test_fan);
 430   3              fan_work_disable();
 431   3            }
 432   2            else
 433   2            {
 434   3            fan_work_enable();
 435   3            reload_test_fan();
 436   3          }
 437   2        }
 438   1        else
 439   1          test_reset_para(ADDR_TEST_FAN);
 440   1          
 441   1      }
 442          
 443          void test_reset_all_para()
 444          {
 445   1        TX_write2buff(COM[COM2_ID], 0x5A);
 446   1        TX_write2buff(COM[COM2_ID], 0xA5);
 447   1        TX_write2buff(COM[COM2_ID], 0x0F);
 448   1        TX_write2buff(COM[COM2_ID], 0x82);
 449   1        TX_write2buff(COM[COM2_ID], 0x00);
 450   1        TX_write2buff(COM[COM2_ID], 0x05);
 451   1        TX_write2buff(COM[COM2_ID], 0x00);
 452   1        TX_write2buff(COM[COM2_ID], 0x00);
 453   1        TX_write2buff(COM[COM2_ID], 0x00);
 454   1        TX_write2buff(COM[COM2_ID], 0x00);
 455   1        TX_write2buff(COM[COM2_ID], 0x00);
 456   1        TX_write2buff(COM[COM2_ID], 0x00);
 457   1        TX_write2buff(COM[COM2_ID], 0x00);
 458   1        TX_write2buff(COM[COM2_ID], 0x00);
 459   1        TX_write2buff(COM[COM2_ID], 0x00);
 460   1        TX_write2buff(COM[COM2_ID], 0x00);
 461   1        TX_write2buff(COM[COM2_ID], 0x00);
 462   1        TX_write2buff(COM[COM2_ID], 0x00);
 463   1      }
 464          
 465          void test_rest_process()
 466          {
 467   1        valve_disable();
 468   1        alert_beep_disable();
 469   1        count_down_cancel_test();
 470   1        test_reset_all_para();
 471   1      }
 472          
 473          void cartoon_display_change(u8 value)
 474          {
 475   1        TX_write2buff(COM[COM2_ID], 0x5A);
 476   1        TX_write2buff(COM[COM2_ID], 0xA5);
 477   1        TX_write2buff(COM[COM2_ID], 0x05);
 478   1        TX_write2buff(COM[COM2_ID], 0x82);
 479   1        TX_write2buff(COM[COM2_ID], 0x00);
 480   1        TX_write2buff(COM[COM2_ID], 0x30);
 481   1        TX_write2buff(COM[COM2_ID], 0x00);
 482   1        TX_write2buff(COM[COM2_ID], value);
 483   1      
 484   1      }
 485          
 486          
 487          void system_enter_idle()
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 9   

 488          {
 489   1        feed_status = idle;
 490   1        cartoon_display_change(STATUS_IDLE);
 491   1      }
 492          
 493          
 494          void system_enter_fan_work()
 495          {
 496   1        feed_status = fan_work;
 497   1        cartoon_display_change(STATUS_FAN_WORK);
 498   1      }
 499          
 500          void system_enter_sunction()
 501          {
 502   1        feed_status = suction;
 503   1        cartoon_display_change(STATUS_SUCTION);
 504   1      }
 505          
 506          void system_enter_discharge()
 507          {
 508   1        feed_status = discharge;
 509   1        cartoon_display_change(STATUS_DISCHARGE);
 510   1      }
 511          
 512          void system_enter_alter_feed_full()
 513          {
 514   1        feed_status = full;
 515   1        cartoon_display_change(STATUS_FEED_FULL);
 516   1      }
 517          
 518          void system_enter_intercept()
 519          {
 520   1        feed_status = intercept;
 521   1        cartoon_display_change(STATUS_INTERCEPT);
 522   1      }
 523          
 524          void system_enter_spray_wash()
 525          {
 526   1        cartoon_display_change(STATUS_SPRAY_WASH);
 527   1      }
 528          
 529          
 530          // go back home
 531          void page_back_home()
 532          {
 533   1        // first page
 534   1        turn_to_page(PAGE_HOME1);
 535   1        count_down_cancel(&system_back_home);
 536   1        page_init = 0;
 537   1      }
 538          
 539          void password_input_cancle()
 540          {
 541   1        count_down_cancel(&system_back_home);
 542   1        reset_password_input();
 543   1        login_off_current_user();
 544   1        page_init = 0;
 545   1      }
 546          
 547          void password_modify_cancle()
 548          {
 549   1        count_down_cancel(&system_back_home);
C51 COMPILER V9.52.0.0   PROCESS                                                           07/02/2016 11:26:44 PAGE 10  

 550   1        reset_password_modify_input();
 551   1        reload_system_no_identify();
 552   1        page_init = 0;
 553   1      }
 554          
 555          void param_set_cancle()
 556          {
 557   1        display_all_para(INDEX_FOR_ADMIN_SET);
 558   1        count_down_cancel(&system_back_home);
 559   1        reload_system_no_identify();
 560   1        page_init = 0;
 561   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2379    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
