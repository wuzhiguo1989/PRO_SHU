C51 COMPILER V9.52.0.0   MAIN                                                              11/08/2016 20:29:05 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE OMF2 BROWSE DEBUG PRINT(.\list\main.lst) TABS(2) OBJECT(.\list
                    -\main.obj)

line level    source

   1          #include "typealias.h"
   2          #include "config.h"
   3          #include "uart.h"
   4          #include "task.h"
   5          #include "dwscreen.h"
   6          #include "alert.h"
   7          #include "adc.h"
   8          #include "process.h"
   9          #include "e2prom.h"
  10          #include <stdio.h>
  11          #include <stdlib.h>
  12          #include <string.h>
  13          // #include "extension.h"
  14          
  15          void Delay1000ms()    //@24.000MHz
  16          {
  17   1        unsigned char i, j, k;
  18   1      
  19   1        _nop_();
  20   1        _nop_();
  21   1        i = 92;
  22   1        j = 50;
  23   1        k = 238;
  24   1        do
  25   1        {
  26   2          do
  27   2          {
  28   3            while (--k);
  29   3          } while (--j);
  30   2        } while (--i);
  31   1      }
  32          
  33          void main(void)
  34          {
  35   1          sigal_in_use = 0;
  36   1          init_io_alert();
  37   1          init_adc();
  38   1          valve_control_io_init();
  39   1          uart_init();
  40   1          system_tick_init();
  41   1          workflow_init();
  42   1          dw_init();
  43   1          alert_beep_disable(); 
  44   1          count_down_init_all_task();
  45   1          Extern0_Init();
  46   1          EA = 1;
  47   1          tem_around = temperature_around_cal();
  48   1          tem_fan = temperature_fan_cal();
  49   1          send_two_value_to_screen(ADDR_TEMPERATURE_AROUND, tem_around, tem_fan);
  50   1        password_init();
  51   1          param_init();
  52   1          Delay1000ms();
  53   1        dw_screen_init();
  54   1          Delay5ms();
C51 COMPILER V9.52.0.0   MAIN                                                              11/08/2016 20:29:05 PAGE 2   

  55   1          system_enter_idle();
  56   1          Delay5ms();
  57   1          Timer0_Run();
  58   1          available_system_set();
  59   1          while (1)
  60   1        {
  61   2              
  62   2              reset_watch_dog();
  63   2              if (INT_PROC & DW_DUTY) {
  64   3                  printf("DW_DUTY, PoW\r\n");
  65   3      
  66   3              //    dw_read_data_from_screen();
  67   3                  INT_PROC &= ~DW_DUTY;
  68   3                  continue;
  69   3              }
  70   2              if (INT_PROC & WF_FINISH_DUTY) {
  71   3                  printf("WF_FINISH_DUTY, PoW\r\n");
  72   3                  wf_finish_duty_task();
  73   3                  INT_PROC &= ~WF_FINISH_DUTY;
  74   3                  continue;
  75   3              }
  76   2      
  77   2              if(INT_PROC & START_DUTY)
  78   2              {
  79   3                  printf("START\r\n");
  80   3                  // 2s内检测风机是否正常工作
  81   3                  // reload_fan_start_deceted();
  82   3                  syc_signal_start_fan(1);
  83   3                  detected_feed_full_start();
  84   3                  INT_PROC &= ~START_DUTY;
  85   3                  continue;
  86   3              }
  87   2              if(INT_PROC & SYSTEM_END_DUTY)
  88   2              {
  89   3                  printf("END\r\n");
  90   3                  fan_work_disable();
  91   3                  count_down_cancle_all_task();
  92   3                  valve_disable();
  93   3                  send_counter_for_feed_lack_to_dwscreen(counter_for_feed_lack);
  94   3                  // 正常关闭
  95   3                  if(!(alert_for_system & ALTER_FULL_FEED))
  96   3                  {
  97   4                      system_enter_idle();
  98   4                      printf("idle\r\n");
  99   4                      syc_signal_start_fan(0);
 100   4                  }
 101   3                  INT_PROC &= ~SYSTEM_END_DUTY;
 102   3                  continue;
 103   3              }
 104   2              // 5ms system tick-tock
 105   2              if (INT_PROC & TICK_DUTY) {
 106   3                  count_down_all_task();
 107   3                  if (UART_RX_Block(&COM2)) 
 108   3                      call_for_duty(COM2_RX_DUTY);
 109   3                  INT_PROC &= ~TICK_DUTY;
 110   3                  continue;
 111   3              }
 112   2      
 113   2              if (INT_PROC & COM2_RX_DUTY) {
 114   3                  // int len = dw_cache_response(RX2_Buffer);
 115   3                  // printf("COM2_RX_DUTY, PoW\r\n");
 116   3                  // UART_Finish_Rx(&COM2);
C51 COMPILER V9.52.0.0   MAIN                                                              11/08/2016 20:29:05 PAGE 3   

 117   3                  // dw_dispatch_response(dw_cached_response, len);
 118   3            int len = dw_cache_response(RX2_Buffer);
 119   3                  // printf("COM2_RX_DUTY, PoW\r\n");
 120   3                  UART_Finish_Rx(&COM2);
 121   3                  dw_dispatch_response(dw_cached_response, len);
 122   3            if (simple_workflow[COM2_ID].status == processing && simple_workflow[COM2_ID].callback != NULL) 
 123   3                  {
 124   4                      simple_workflow[COM2_ID].callback();
 125   4                      simple_workflow[COM2_ID].status = wait_for_finish;
 126   4                      call_for_duty(S_WF_DUTY);
 127   4                  }
 128   3                  INT_PROC &= ~COM2_RX_DUTY;
 129   3                  continue;
 130   3              }
 131   2              if (INT_PROC & WF_FLOW_DUTY) {
 132   3                  wf_flow_duty_task();
 133   3                  INT_PROC &= ~WF_FLOW_DUTY;
 134   3                  continue;
 135   3              }
 136   2      
 137   2              if (INT_PROC & S_WF_DUTY) {
 138   3                  s_wf_duty_task();
 139   3                  INT_PROC &= ~S_WF_DUTY;
 140   3                  continue;
 141   3              }
 142   2              if (INT_PROC & SECOND_DUTY) {
 143   3                  // dw_gen_task();
 144   3                  // wf_chk_timeout_duty_task();
 145   3                  // s_wf_chk_timeout_duty_task();
 146   3                  alert_for_temperature();
 147   3                  alert_for_overload();
 148   3                  alert_beep();
 149   3                  INT_PROC &= ~SECOND_DUTY;
 150   3                  continue;
 151   3              }
 152   2              if(INT_PROC & SPRAY_WASH_DUTY){
 153   3                  start_spray_wash();
 154   3                  INT_PROC &= ~SPRAY_WASH_DUTY;
 155   3                  continue;
 156   3              }
 157   2              if(INT_PROC & FEED_SUCTION_END_DUTY)
 158   2              {
 159   3                  // 料满时间到 吸料结束
 160   3                  count_down_cancel(&feed_suction);
 161   3                  count_down_cancel(&feed_intercept);
 162   3                  feed_suction_callback();
 163   3                  INT_PROC &=  ~FEED_SUCTION_END_DUTY;
 164   3                  continue;
 165   3              }
 166   2              if(INT_PROC & ALTER_FOR_FEED_FULL_DUTY)
 167   2              {
 168   3                  counter_for_feed_lack = 0;
 169   3                  alert_for_system &= ~ALTER_LACK_FEED;
 170   3                  alert_for_system |= ALTER_FULL_FEED;
 171   3                  system_enter_alter_feed_full();
 172   3                  INT_PROC &=  ~ALTER_FOR_FEED_FULL_DUTY;
 173   3                  continue;
 174   3              }
 175   2              if(INT_PROC & ALTER_FULL_FEED_CANCLE_DUTY)
 176   2              {
 177   3                  alert_for_system &= ~ALTER_FULL_FEED;
 178   3                  syc_signal_start_fan(0);
C51 COMPILER V9.52.0.0   MAIN                                                              11/08/2016 20:29:05 PAGE 4   

 179   3                  system_enter_idle();
 180   3                  INT_PROC &= ~ALTER_FULL_FEED_CANCLE_DUTY;
 181   3                  continue;
 182   3              }
 183   2              if(INT_PROC & ALTER_BEEP_DUTY)
 184   2              {
 185   3                  alert_beep_enable();
 186   3                  syc_signal_beep();
 187   3                  INT_PROC &= ~ALTER_BEEP_DUTY;
 188   3                  continue;
 189   3              }
 190   2              if(INT_PROC & ALTER_BEEP_CLOSE_DUTY)
 191   2              {
 192   3                  alert_beep_disable();
 193   3                  INT_PROC &= ~ALTER_BEEP_CLOSE_DUTY;
 194   3                  continue;
 195   3              }
 196   2              // if(INT_PROC & ALTER_FOR_FEED_LACK_DUTY)
 197   2              // {
 198   2              //     counter_for_feed_lack ++;
 199   2              //     if(counter_for_feed_lack >= counter_for_lack_alter_set)
 200   2              //         alert_for_system |= ALTER_LACK_FEED;
 201   2              //     else
 202   2              //         alert_for_system &= ~ALTER_LACK_FEED;
 203   2              //     send_counter_for_feed_lack_to_dwscreen(counter_for_feed_lack);
 204   2              //     INT_PROC &= ~ALTER_FOR_FEED_LACK_DUTY;
 205   2              //     continue; 
 206   2              // }
 207   2        }
 208   1      }
 209          
 210          
 211          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    603    ----
   CONSTANT SIZE    =     58    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
