C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PROCESS
OBJECT MODULE PLACED IN .\list\process.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE process.c LARGE OMF2 BROWSE DEBUG PRINT(.\list\process.lst) TABS(2) OBJECT(
                    -.\list\process.obj)

line level    source

   1          #include "process.h"
   2          #include "uart.h"
   3          #include "dwscreen.h"
   4          #include "task.h"
   5          #include "alert.h"
   6          #include "e2prom.h"
   7          
   8          
   9          #define STATUS_IDLE       0x01
  10          #define STATUS_FAN_WORK   0x02
  11          #define STATUS_SUCTION    0x04
  12          #define STATUS_INTERCEPT  0x08
  13          #define STATUS_DISCHARGE  0x10
  14          #define STATUS_FEED_FULL  0x20
  15          #define STATUS_SPRAY_WASH 0x40
  16          
  17          u8 feed_status;
  18          id_m identified_status = identified_none;
  19          bool page_init = 1;
  20          
  21          
  22          void turn_to_page(u8 page)
  23          {
  24   1        TX_write2buff(COM[COM2_ID], 0x5A);
  25   1        TX_write2buff(COM[COM2_ID], 0xA5);
  26   1        TX_write2buff(COM[COM2_ID], 0x04);
  27   1        TX_write2buff(COM[COM2_ID], 0x80);
  28   1        TX_write2buff(COM[COM2_ID], 0x03);
  29   1        TX_write2buff(COM[COM2_ID], 0x00);
  30   1        TX_write2buff(COM[COM2_ID], page);
  31   1      }
  32          
  33          
  34          
  35          void get_password_from_screen()
  36          {
  37   1        TX_write2buff(COM[COM2_ID], 0x5A);
  38   1        TX_write2buff(COM[COM2_ID], 0xA5);
  39   1        TX_write2buff(COM[COM2_ID], 0x04);
  40   1        TX_write2buff(COM[COM2_ID], 0x83);
  41   1        TX_write2buff(COM[COM2_ID], 0x00);
  42   1        TX_write2buff(COM[COM2_ID], 0x10);
  43   1        TX_write2buff(COM[COM2_ID], 0x02);
  44   1      }
  45          
  46          void reset_password_input()
  47          {
  48   1        TX_write2buff(COM[COM2_ID], 0x5A);
  49   1        TX_write2buff(COM[COM2_ID], 0xA5);
  50   1        TX_write2buff(COM[COM2_ID], 0x07);
  51   1        TX_write2buff(COM[COM2_ID], 0x82);
  52   1        TX_write2buff(COM[COM2_ID], 0x00);
  53   1        TX_write2buff(COM[COM2_ID], 0x10);
  54   1        TX_write2buff(COM[COM2_ID], 0x00);
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 2   

  55   1        TX_write2buff(COM[COM2_ID], 0x00);  
  56   1        TX_write2buff(COM[COM2_ID], 0x00);
  57   1        TX_write2buff(COM[COM2_ID], 0x00);
  58   1      }
  59          
  60          #define page_to_admin_setting_first()   turn_to_page(PAGE_ADMIN_SETTING1)
  61          #define page_to_guest_setting_first()   turn_to_page(PAGE_GUEST_SETTING1)
  62          #define page_to_login_on_identify()   turn_to_page(PAGE_PASSWORD_LOGIN)
  63          
  64          void page_password_setting_handle_callback()
  65          {
  66   1        // reset password screen
  67   1        reset_password_input();
  68   1        // pass
  69   1        if(password == password_adminstrator)
  70   1        {
  71   2          identified_status = admin;
  72   2          page_to_admin_setting_first();
  73   2          reload_system_no_identify();
  74   2        }
  75   1        else if(password == password_guest)
  76   1        {
  77   2          identified_status = guest;
  78   2          page_to_guest_setting_first();
  79   2          reload_system_no_identify();
  80   2        }
  81   1        else 
  82   1          identified_status = identified_none;
  83   1        password = 0;
  84   1      }
  85          
  86          // password setting
  87          void page_password_setting_handle()
  88          {
  89   1        start_simple_workflow(DW_UART_ID, get_password_from_screen, page_password_setting_handle_callback);
  90   1      }
  91          
  92          void login_on_setting_handle()
  93          {
  94   1        if(identified_status == admin)
  95   1        {
  96   2          page_to_admin_setting_first();
  97   2          reload_system_no_identify();
  98   2        }
  99   1        else if(identified_status == guest)
 100   1        {
 101   2          page_to_guest_setting_first();
 102   2          reload_system_no_identify();
 103   2        }
 104   1        else
 105   1          page_to_login_on_identify();
 106   1      }
 107          
 108          // setting init
 109          void setting_to_init()
 110          {
 111   1        // read from e2prom
 112   1        reset_all_para();
 113   1      
 114   1        // init
 115   1        update_data_should = true;
 116   1        //
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 3   

 117   1        display_all_para(INDEX_FOR_ADMIN_SET);
 118   1        display_all_para(INDEX_FOR_INQUIRY);
 119   1      
 120   1        page_back_home();
 121   1      }
 122          
 123          void get_param_set_from_screen()
 124          {
 125   1        TX_write2buff(COM[COM2_ID], 0x5A);
 126   1        TX_write2buff(COM[COM2_ID], 0xA5);
 127   1        TX_write2buff(COM[COM2_ID], 0x04);
 128   1        TX_write2buff(COM[COM2_ID], 0x83);
 129   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_ADMIN_SET >> 8);
 130   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_ADMIN_SET);
 131   1        TX_write2buff(COM[COM2_ID], 0x0A);
 132   1      }
 133          
 134          
 135          
 136          
 137          void update_setting_callback()
 138          {
 139   1        display_all_para(INDEX_FOR_INQUIRY);
 140   1          // store the value
 141   1          store_all_para();
 142   1        update_data_should = true;
 143   1        page_back_home();
 144   1      }
 145          
 146          void update_setting()
 147          {
 148   1        start_simple_workflow(DW_UART_ID, get_param_set_from_screen, update_setting_callback);
 149   1      }
 150          
 151          
 152          void get_deadline_set_from_screen(){
 153   1        TX_write2buff(COM[COM2_ID], 0x5A);
 154   1        TX_write2buff(COM[COM2_ID], 0xA5);
 155   1        TX_write2buff(COM[COM2_ID], 0x04);
 156   1        TX_write2buff(COM[COM2_ID], 0x83);
 157   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_DEADLINE_SET >> 8);
 158   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_DEADLINE_SET);
 159   1        TX_write2buff(COM[COM2_ID], 0x03);
 160   1      }
 161          
 162          void display_init_deadline(u8 year, u8 month, u8 day){
 163   1        TX_write2buff(COM[COM2_ID], 0x5A);
 164   1        TX_write2buff(COM[COM2_ID], 0xA5);
 165   1        TX_write2buff(COM[COM2_ID], 0x09);
 166   1        TX_write2buff(COM[COM2_ID], 0x82);
 167   1        TX_write2buff(COM[COM2_ID], INDEX_FOR_DEADLINE_SET >> 8);
 168   1        TX_write2buff(COM[COM2_ID], (u8)INDEX_FOR_DEADLINE_SET);
 169   1        TX_write2buff(COM[COM2_ID], 0x00);
 170   1        TX_write2buff(COM[COM2_ID], year);
 171   1        TX_write2buff(COM[COM2_ID], 0x00);
 172   1        TX_write2buff(COM[COM2_ID], month);
 173   1        TX_write2buff(COM[COM2_ID], 0x00);
 174   1        TX_write2buff(COM[COM2_ID], day);
 175   1      }
 176          
 177          void update_avaiable_deadline(){
 178   1          get_deadline_set_from_screen();
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 4   

 179   1      }
 180          
 181          void update_feed_lack_signal()
 182          {
 183   1        update_data_should = true;
 184   1      }
 185          
 186          #define page_to_password_admin() turn_to_page(PAGE_PASSWORD_MD)
 187          #define page_to_password_admin_login_on()  turn_to_page(PAGE_PASSWORD_ADMIN)
 188          #define page_to_available_admin() turn_to_page(PAGE_AVAILABLE_ADMIN)
 189          
 190          void page_password_admin_handle_callback()
 191          {
 192   1        // reset password screen
 193   1        reset_password_input();
 194   1        // pass
 195   1        if(password == password_adminstrator)
 196   1        {
 197   2          identified_status = admin;
 198   2          page_to_password_admin();
 199   2          reload_system_no_identify();
 200   2        } else if(password == password_super){
 201   2            identified_status = super;
 202   2          page_to_available_admin();
 203   2          reload_system_no_identify();
 204   2        }
 205   1        password = 0;
 206   1      }
 207          
 208          void page_password_admin_input_handle()
 209          {
 210   1        start_simple_workflow(DW_UART_ID, get_password_from_screen, page_password_admin_handle_callback);
 211   1      }
 212          
 213          // password admin
 214          void page_password_admin_handle()
 215          {
 216   1        if(identified_status == admin)
 217   1        {
 218   2          page_to_password_admin();
 219   2          reload_system_no_identify();
 220   2        }
 221   1        else
 222   1          page_to_password_admin_login_on();
 223   1      }
 224          
 225          void reset_password_modify_input()
 226          {
 227   1        TX_write2buff(COM[COM2_ID], 0x5A);
 228   1        TX_write2buff(COM[COM2_ID], 0xA5);
 229   1        TX_write2buff(COM[COM2_ID], 0x0B);
 230   1        TX_write2buff(COM[COM2_ID], 0x82);
 231   1        TX_write2buff(COM[COM2_ID], 0x00);
 232   1        TX_write2buff(COM[COM2_ID], 0x14);
 233   1        TX_write2buff(COM[COM2_ID], 0x00);
 234   1        TX_write2buff(COM[COM2_ID], 0x00);  
 235   1        TX_write2buff(COM[COM2_ID], 0x00);
 236   1        TX_write2buff(COM[COM2_ID], 0x00);
 237   1        TX_write2buff(COM[COM2_ID], 0x00);
 238   1        TX_write2buff(COM[COM2_ID], 0x00);  
 239   1        TX_write2buff(COM[COM2_ID], 0x00);
 240   1        TX_write2buff(COM[COM2_ID], 0x00);
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 5   

 241   1      }
 242          
 243          void password_to_init()
 244          {
 245   1        reset_password_modify_input();
 246   1        // read from e2prom
 247   1        reset_all_password();
 248   1        // init
 249   1        identified_status = identified_none;
 250   1        count_down_cancel(&password_no_identified);
 251   1        // page_back_home();
 252   1      }
 253          
 254          
 255          
 256          void page_password_modify_handle_callback()
 257          {
 258   1        // reset password screen
 259   1        reset_password_modify_input();
 260   1        if(!password_admin_input && password_guest_input)
 261   1        {
 262   2          password_guest = password_guest_input;
 263   2          store_all_password();
 264   2      
 265   2        } else if(password_admin_input && !password_guest_input)
 266   1        {
 267   2          password_adminstrator =  password_admin_input;
 268   2          store_all_password();
 269   2      
 270   2        } else if(password_admin_input && password_guest_input)
 271   1        {
 272   2          password_guest = password_guest_input;
 273   2          password_adminstrator =  password_admin_input;
 274   2          store_all_password();
 275   2        }
 276   1      
 277   1        password_admin_input = 0;
 278   1        password_guest_input = 0;
 279   1        // 恢复0
 280   1        identified_status = identified_none;
 281   1        // todo 
 282   1        // cancle count down
 283   1        count_down_cancel(&password_no_identified); 
 284   1        page_back_home();
 285   1      }
 286          
 287          
 288          void get_password_modify_from_screen()
 289          {
 290   1        TX_write2buff(COM[COM2_ID], 0x5A);
 291   1        TX_write2buff(COM[COM2_ID], 0xA5);
 292   1        TX_write2buff(COM[COM2_ID], 0x04);
 293   1        TX_write2buff(COM[COM2_ID], 0x83);
 294   1        TX_write2buff(COM[COM2_ID], 0x00);
 295   1        TX_write2buff(COM[COM2_ID], 0x14);
 296   1        TX_write2buff(COM[COM2_ID], 0x04);
 297   1      }
 298          
 299          void modify_password()
 300          {
 301   1        start_simple_workflow(DW_UART_ID, get_password_modify_from_screen, page_password_modify_handle_callback);
 302   1      }
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 6   

 303          
 304          
 305          void get_current_page()
 306          {
 307   1        TX_write2buff(COM[COM2_ID], 0x5A);
 308   1        TX_write2buff(COM[COM2_ID], 0xA5);
 309   1        TX_write2buff(COM[COM2_ID], 0x03);
 310   1        TX_write2buff(COM[COM2_ID], 0x81);
 311   1        TX_write2buff(COM[COM2_ID], 0x03);
 312   1        TX_write2buff(COM[COM2_ID], 0x02);
 313   1      }
 314          
 315          
 316          void no_oprate_callback()
 317          {
 318   1        // if page in setting, param value should be replaced with param used now
 319   1        // solve the problem with display
 320   1        if(page == PAGE_ADMIN_SETTING1 || page == PAGE_ADMIN_SETTING2 || page == PAGE_ADMIN_SETTING3 || page == P
             -AGE_ADMIN_SETTING4 || page == PAGE_GUEST_SETTING1 || page == PAGE_GUEST_SETTING2)
 321   1          display_all_para(INDEX_FOR_ADMIN_SET);
 322   1        // if page in password_input
 323   1        else if(page == PAGE_PASSWORD_MD)
 324   1        {
 325   2          password_admin_input = 0;
 326   2          password_guest_input = 0;
 327   2          reset_password_modify_input();    
 328   2        }
 329   1        else if(page == PAGE_PASSWORD_LOGIN || page == PAGE_PASSWORD_ADMIN)
 330   1        {
 331   2          password = 0;
 332   2          reset_password_input();
 333   2        }
 334   1        page_back_home();
 335   1        page = 0xFF;
 336   1      }
 337          
 338          // back every minute no operate
 339          void every_minute_no_operate_call_back()
 340          {
 341   1        // jude what page is displaying
 342   1        start_simple_workflow(DW_UART_ID, get_current_page, no_oprate_callback);
 343   1      }
 344          
 345          
 346          
 347          
 348          void login_off_current_user()
 349          {
 350   1        identified_status = identified_none;
 351   1        // cancle count down
 352   1        count_down_cancel(&password_no_identified);  
 353   1      }
 354          
 355          
 356          void every_minute_no_identify_call_back()
 357          {
 358   1        login_off_current_user();
 359   1      }
 360          
 361          
 362          
 363          
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 7   

 364          // test
 365          void test_reset_para(u16 addr)
 366          {
 367   1        TX_write2buff(COM[COM2_ID], 0x5A);
 368   1        TX_write2buff(COM[COM2_ID], 0xA5);
 369   1        TX_write2buff(COM[COM2_ID], 0x05);
 370   1        TX_write2buff(COM[COM2_ID], 0x82);
 371   1        TX_write2buff(COM[COM2_ID], 0x00);
 372   1        TX_write2buff(COM[COM2_ID], (u8)addr);
 373   1        TX_write2buff(COM[COM2_ID], 0x00);
 374   1        TX_write2buff(COM[COM2_ID], 0x00);
 375   1      }
 376          
 377          
 378          
 379          void test_spray_wash_process(u8 value)
 380          {
 381   1        if(!start_fan_signal)
 382   1        {
 383   2          if(!value)
 384   2          {
 385   3            count_down_cancel(&test_spray_wash);
 386   3            spray_wash_disable();
 387   3          }
 388   2          else
 389   2          {
 390   3            spray_wash_enable();
 391   3            reload_test_spray_wash();
 392   3          }
 393   2        }
 394   1        else
 395   1          test_reset_para(ADDR_TEST_SPRAY_WASH);
 396   1      }
 397          
 398          void test_suction_process(u8 value)
 399          {
 400   1        if(!start_fan_signal)
 401   1        {
 402   2          if(!value)
 403   2          {
 404   3            count_down_cancel(&test_suction);
 405   3            discharge_enable();
 406   3          }
 407   2          else
 408   2          {
 409   3            suction_enable();
 410   3            reload_test_suction();
 411   3          }
 412   2        }
 413   1        else
 414   1          test_reset_para(ADDR_TEST_SUCTION);
 415   1      
 416   1      }
 417          
 418          
 419          void test_intercept_process(u8 value)
 420          {
 421   1        if(!start_fan_signal)
 422   1        {
 423   2          if(!value)
 424   2          {
 425   3            count_down_cancel(&test_intercept);
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 8   

 426   3            intercept_disable();
 427   3          }
 428   2          else
 429   2          {
 430   3            intercept_enable();
 431   3            reload_test_intercept();
 432   3          }
 433   2        }
 434   1        else
 435   1          test_reset_para(ADDR_TEST_INTERCEPT);
 436   1          
 437   1      }
 438          
 439          void test_beep_process(u8 value)
 440          {
 441   1        if(!start_fan_signal)
 442   1        {
 443   2            if(!value)
 444   2            {
 445   3              count_down_cancel(&test_beep);
 446   3              INT_PROC |= ALTER_BEEP_CLOSE_DUTY;
 447   3            }
 448   2            else
 449   2            {
 450   3              INT_PROC |= ALTER_BEEP_DUTY;
 451   3            reload_test_beep();
 452   3          }
 453   2        }
 454   1        else
 455   1          test_reset_para(ADDR_TEST_BEEP);
 456   1          
 457   1      }
 458          
 459          void test_fan_process(u8 value)
 460          {
 461   1        if(!start_fan_signal)
 462   1        {
 463   2          if(!value)
 464   2            {
 465   3              count_down_cancel(&test_fan);
 466   3              fan_work_disable();
 467   3            }
 468   2            else
 469   2            {
 470   3            fan_work_enable();
 471   3            reload_test_fan();
 472   3          }
 473   2        }
 474   1        else
 475   1          test_reset_para(ADDR_TEST_FAN);
 476   1          
 477   1      }
 478          
 479          void test_reset_all_para()
 480          {
 481   1        TX_write2buff(COM[COM2_ID], 0x5A);
 482   1        TX_write2buff(COM[COM2_ID], 0xA5);
 483   1        TX_write2buff(COM[COM2_ID], 0x0F);
 484   1        TX_write2buff(COM[COM2_ID], 0x82);
 485   1        TX_write2buff(COM[COM2_ID], 0x00);
 486   1        TX_write2buff(COM[COM2_ID], 0x05);
 487   1        TX_write2buff(COM[COM2_ID], 0x00);
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 9   

 488   1        TX_write2buff(COM[COM2_ID], 0x00);
 489   1        TX_write2buff(COM[COM2_ID], 0x00);
 490   1        TX_write2buff(COM[COM2_ID], 0x00);
 491   1        TX_write2buff(COM[COM2_ID], 0x00);
 492   1        TX_write2buff(COM[COM2_ID], 0x00);
 493   1        TX_write2buff(COM[COM2_ID], 0x00);
 494   1        TX_write2buff(COM[COM2_ID], 0x00);
 495   1        TX_write2buff(COM[COM2_ID], 0x00);
 496   1        TX_write2buff(COM[COM2_ID], 0x00);
 497   1        TX_write2buff(COM[COM2_ID], 0x00);
 498   1        TX_write2buff(COM[COM2_ID], 0x00);
 499   1      }
 500          
 501          void test_rest_process()
 502          {
 503   1        valve_disable();
 504   1        alert_beep_disable();
 505   1        count_down_cancel_test();
 506   1        test_reset_all_para();
 507   1      }
 508          
 509          void cartoon_display_change(u8 value)
 510          {
 511   1        TX_write2buff(COM[COM2_ID], 0x5A);
 512   1        TX_write2buff(COM[COM2_ID], 0xA5);
 513   1        TX_write2buff(COM[COM2_ID], 0x05);
 514   1        TX_write2buff(COM[COM2_ID], 0x82);
 515   1        TX_write2buff(COM[COM2_ID], 0x00);
 516   1        TX_write2buff(COM[COM2_ID], 0x30);
 517   1        TX_write2buff(COM[COM2_ID], 0x00);
 518   1        TX_write2buff(COM[COM2_ID], value);
 519   1      
 520   1      }
 521          
 522          
 523          void system_enter_idle()
 524          {
 525   1        feed_status = idle;
 526   1        cartoon_display_change(STATUS_IDLE);
 527   1      }
 528          
 529          
 530          void system_enter_fan_work()
 531          {
 532   1        feed_status = fan_work;
 533   1        cartoon_display_change(STATUS_FAN_WORK);
 534   1      }
 535          
 536          void system_enter_sunction()
 537          {
 538   1        feed_status = suction;
 539   1        cartoon_display_change(STATUS_SUCTION);
 540   1      }
 541          
 542          void system_enter_discharge()
 543          {
 544   1        feed_status = discharge;
 545   1        cartoon_display_change(STATUS_DISCHARGE);
 546   1      }
 547          
 548          void system_enter_alter_feed_full()
 549          {
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 10  

 550   1        feed_status = full;
 551   1        cartoon_display_change(STATUS_FEED_FULL);
 552   1      }
 553          
 554          void system_enter_intercept()
 555          {
 556   1        feed_status = intercept;
 557   1        cartoon_display_change(STATUS_INTERCEPT);
 558   1      }
 559          
 560          void system_enter_spray_wash()
 561          {
 562   1        cartoon_display_change(STATUS_SPRAY_WASH);
 563   1      }
 564          
 565          
 566          // go back home
 567          void page_back_home()
 568          {
 569   1        // first page
 570   1        turn_to_page(PAGE_HOME1);
 571   1        count_down_cancel(&system_back_home);
 572   1        page_init = 0;
 573   1      }
 574          
 575          void password_input_cancle()
 576          {
 577   1        count_down_cancel(&system_back_home);
 578   1        reset_password_input();
 579   1        login_off_current_user();
 580   1        page_init = 0;
 581   1      }
 582          
 583          void password_modify_cancle()
 584          {
 585   1        count_down_cancel(&system_back_home);
 586   1        reset_password_modify_input();
 587   1        reload_system_no_identify();
 588   1        page_init = 0;
 589   1      }
 590          
 591          void param_set_cancle()
 592          {
 593   1        display_all_para(INDEX_FOR_ADMIN_SET);
 594   1        count_down_cancel(&system_back_home);
 595   1        reload_system_no_identify();
 596   1        page_init = 0;
 597   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2688    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.52.0.0   PROCESS                                                           11/08/2016 20:38:40 PAGE 11  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
