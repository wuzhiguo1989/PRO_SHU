C51 COMPILER V9.52.0.0   ADC                                                               12/27/2016 13:09:28 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN adc.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE adc.c DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "adc.h"
   2          #include "intrins.h"
   3          #include "share.h"
   4          #include "jl17467pqw.h"
   5          
   6          #define wait_adc_finish() while (!(ADC_CONTR & ADC_FLAG))   //等待ADC转换完成
   7          #define adc_vbg_channel 9
   8          #define adc_tem_channel 2
   9          #define adc_bat_channel 3
  10          
  11          xdata u16 temperature_value[16] = {0};
  12          xdata u16 battery_value[16] = {0};
  13          xdata u8 adc_interval = 0;
  14          void init_adc()
  15          {
  16   1        P1ASF |= 0x0C;
  17   1        ADC_RES = 0;
  18   1        ADC_RESL = 0;
  19   1        ADC_CONTR = ADC_POWER | ADC_SPEED;
  20   1      }
  21          
  22          
  23          static u16 GetADCResult(u8 channel)
  24          {
  25   1        P1ASF &= ~0xFF;
  26   1        if(channel == 9)
  27   1          P1ASF |= 0;
  28   1        else 
  29   1          P1ASF |= 0x0C;
  30   1        ADC_RES = 0;
  31   1        ADC_RESL = 0;
  32   1        // 选通道需要清除之前的通道
  33   1        ADC_CONTR &= 0xF8;
  34   1        if(channel == 9)
  35   1          ADC_CONTR |= 0;
  36   1        else 
  37   1          ADC_CONTR |= channel;
  38   1        
  39   1        ADC_CONTR |= ADC_START;
  40   1        _nop_();                        
  41   1        _nop_();
  42   1        _nop_();
  43   1        _nop_();
  44   1        wait_adc_finish();              
  45   1        ADC_CONTR &= ~ADC_FLAG;         
  46   1        return ((ADC_RES << 2) | ADC_RESL);
  47   1      }
  48          
  49          static u16 code temperature_table[91] =
  50          {
  51            17180, 16140, 15180, 14280, 13440, 12670, 11940, 11270, 10630, 10040, 9488,
  52            8963, 8471, 8010, 7578, 7172, 6790, 6432, 6096, 5779, 5481, 5197,
  53            4928, 4675, 4435, 4209, 3995, 3793, 3602, 3422, 3251, 3094, 2945, 
  54            2804, 2670, 2543, 2422, 2370, 2199, 2095, 1997, 1904, 1816, 1732,  
  55            1652, 1577, 1505, 1437, 1372, 1310, 1252, 1196, 1143, 1093, 1045,
C51 COMPILER V9.52.0.0   ADC                                                               12/27/2016 13:09:28 PAGE 2   

  56            1000, 957, 916, 877, 839, 804, 770, 738, 707, 678, 650,
  57            624, 598, 574, 551, 529, 508, 488, 469, 451, 433, 417,
  58            401, 386, 371, 357, 344, 331, 319, 307, 296, 285, 275,
  59            265, 255, 246
  60          };
  61          
  62          void temperature_detected()
  63          {
  64   1          u8 i;
  65   1        // , a, b, mid;
  66   1        u16 temperature, adc_value = 0;
  67   1        // a = 0;
  68   1        // b = 90;
  69   1        for(i = 0; i < 16; i++)
  70   1          adc_value += temperature_value[i];
  71   1        adc_value = adc_value >> 4;
  72   1        // 计算temperature
  73   1        temperature = 20000000 / (10240000 / adc_value - 10000);
  74   1        // 查找
  75   1        for(i = 0; i < 91; i++)
  76   1        {
  77   2          if(temperature > temperature_table[0])
  78   2          {
  79   3            temperature = 0;
  80   3            break;
  81   3          }
  82   2          else if(temperature < temperature_table[90])
  83   2          {
  84   3            temperature = 90;
  85   3            break;
  86   3          }
  87   2          else if(temperature <= temperature_table[i] && temperature > temperature_table[i+1])
  88   2          {
  89   3            temperature = i;
  90   3            break;
  91   3          }
  92   2      
  93   2        }
  94   1        jt17467pqw_set_temperature(temperature);
  95   1      }
  96          
  97          
  98          
  99          void battery_detected()
 100          {
 101   1        u8 i;
 102   1        u32 battery = 0; 
 103   1        u16 adc_value_1 = 0;
 104   1        u16 adc_value_2 = 0;
 105   1        //读出基准电压
 106   1        for(i = 0; i < 16; i++)
 107   1          adc_value_1 += GetADCResult(adc_vbg_channel);
 108   1        adc_value_1 = adc_value_1 >> 4;
 109   1      
 110   1      
 111   1        for(i = 0; i < 16; i++)
 112   1          adc_value_2 += battery_value[i];
 113   1        battery = adc_value_2 >> 4;
 114   1        // battery = 105 * adc_value / 1024;
 115   1        battery = 265 * battery; 
 116   1        battery = battery / adc_value_1;
 117   1      
C51 COMPILER V9.52.0.0   ADC                                                               12/27/2016 13:09:28 PAGE 3   

 118   1        // battery = 265 * adc_value_2 / adc_value_1;
 119   1        // 计算
 120   1        jt17467pqw_set_battery(battery / 10);
 121   1        //jt17467pqw_set_speed(battery);
 122   1      }
 123          
 124          void temperature_sample()
 125          {
 126   1        temperature_value[adc_interval] = GetADCResult(adc_tem_channel);
 127   1        adc_interval ++;
 128   1        if(adc_interval == 16)
 129   1          adc_interval = 0;
 130   1      }
 131          
 132          
 133          void battery_sample()
 134          {
 135   1        battery_value[adc_interval] = GetADCResult(adc_bat_channel);
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    480    ----
   CONSTANT SIZE    =    182    ----
   XDATA SIZE       =     65    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
