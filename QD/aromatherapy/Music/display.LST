C51 COMPILER V9.52.0.0   DISPLAY                                                           03/03/2016 15:49:52 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DISPLAY
OBJECT MODULE PLACED IN display.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE display.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "display.h"
   2          #include "sync.h"
   3          #include "utils.h"
   4          #include "string.h"
   5          
   6          volatile disp_t led_mode_set = led_display_off;
   7          led_t xdata led_config_logic;
   8          volatile toggle_t led_toggle_status = ON;
   9          
  10          // ------------------------- display config declaring -------------------------
  11          
  12          // Cycle are calculated based on 5ms timer
  13          #define not_cycle_effective NULL
  14          static code u16 const cycle_for_colorful[1] = {4};
  15          u8 counter_for_color = 0;
  16          u8 color_mark = 0;
  17          
  18          // ------------------------- marco functions -------------------------
  19          
  20          
  21          
  22          // #define sync_up_toggle_stat()  toggle_stat_last_for_sensor_prevent_inst_blink = toggle_status
  23          
  24          // #define LED_MODE_LOGIC_CHG 0
  25          // #define LED_MODE_SET_CHG 1
  26          
  27          // ------------------------- private declaring -------------------------
  28          static void reload_pwm_config_if_should();
  29          static void load_pwm_off_config();
  30          static void prepare_next_time_led_config();
  31          static void led_cycle_based_adjust();
  32          static void half_cycle_reached();
  33          
  34          
  35          // ------------------------- display_mode_init declaring -------------------------
  36          static void led_display_off_driver_init();
  37          static void steady_driver_init();
  38          static void colorful_driver_init();
  39          static void steady_from_app_driver_init();
  40          // ------------------------- display_mode_driver declaring -------------------------
  41          static void led_display_off_driver();
  42          static void steady_driver();
  43          static void colorful_driver();
  44          static void steady_from_app_driver();
  45          // ------------------------- half_cycle_reached declaring -------------------------
  46          
  47          static void steady_half_cycle_reached();
  48          static void colorful_half_cycle_reached();
  49          
  50          static code const u16 *cycle_params[4] =
  51          {
  52            not_cycle_effective,            // led_display_off
  53            cycle_for_colorful,             // colorful
  54            not_cycle_effective,                // steady
  55            not_cycle_effective
C51 COMPILER V9.52.0.0   DISPLAY                                                           03/03/2016 15:49:52 PAGE 2   

  56          
  57          };
  58          
  59          // idata *display_driver -> detailed display_driver
  60          static code driver_init_pt const driver_init[4] =
  61          {
  62            led_display_off_driver_init,    // led_display_off
  63            colorful_driver_init,         // colorful
  64            steady_driver_init,         // steady
  65            steady_from_app_driver_init
  66          };
  67          
  68          static code half_cycle_reached_pt const half_cycle_callback[4] = 
  69          {
  70            NULL,                     // led_display_off
  71            colorful_half_cycle_reached,        // colorful 
  72            NULL,                   // steady
  73            NULL
  74          };
  75          
  76          static code display_driver_pt const display_driver[4] = 
  77          {
  78            led_display_off_driver,       // led_display_off
  79            colorful_driver,          // colorful_driver
  80            steady_driver,            // steady
  81            steady_from_app_driver
  82          };
  83          
  84          static void ctrl_color_changed(const u8 red, const u8 green, const u8 blue) {
  85   1        led_config_set.red = red;
  86   1        led_config_set.green = green;
  87   1        led_config_set.blue = blue;
  88   1      }
  89          
  90          // ------------------------- public -------------------------
  91          // ONLY CALL BY main_isr
  92          // CAUTIONS!  DON't CALL THIS
  93          void display_startup_init() {
  94   1        led_config_init(&led_config_set);
  95   1        led_config_init(&led_config_logic);
  96   1        led_display_off_driver_init();
  97   1      }
  98          
  99          void led_display_task() {
 100   1        led_cycle_based_adjust();
 101   1        prepare_next_time_led_config();
 102   1      }
 103          
 104          
 105          // spi-> ctrl_mode_changed. Callback() & internal change
 106          static void led_mode_changed()  {
 107   1        driver_init_pt led_mode_driver_init = driver_init[led_mode_set];
 108   1        if (led_mode_driver_init)
 109   1          led_mode_driver_init();
 110   1        led_flicker.counter_for_cycle = 0;
 111   1      }
 112          
 113          void ctrl_mode_changed(const u8 mode_code) {
 114   1        led_mode_set = (disp_t)mode_code;
 115   1        led_mode_changed();
 116   1      } 
 117          
C51 COMPILER V9.52.0.0   DISPLAY                                                           03/03/2016 15:49:52 PAGE 3   

 118          
 119          // ------------------------- private -------------------------
 120          static void prepare_next_time_led_config() {
 121   1        led_color_8bit(&led_config_logic);
 122   1      }
 123          
 124          static void led_cycle_based_adjust() {
 125   1        if (led_flicker.cycle_enable) {
 126   2          if (led_flicker.counter_for_cycle >= (cycle_params[led_mode_set][0] >> 1))
 127   2            half_cycle_reached();
 128   2        } else {
 129   2          led_flicker.counter_for_cycle = 0;
 130   2        }
 131   1      }
 132          
 133          
 134          static void half_cycle_reached() {
 135   1        if (half_cycle_callback[led_mode_set])
 136   1          half_cycle_callback[led_mode_set]();
 137   1        led_flicker.counter_for_cycle = 0;
 138   1      }
 139          
 140          // ------------------------- Display Mode Code 0--------------------------
 141          static void led_display_off_driver(void) {
 142   1        led_config_logic.red = 0;
 143   1        led_config_logic.green = 0;
 144   1        led_config_logic.blue = 0;
 145   1      }
 146          
 147          static void led_display_off_driver_init() {
 148   1        led_flicker.cycle_output = OFF;
 149   1        led_flicker.cycle_enable = DISABLE;
 150   1        led_config_logic.red = 0;
 151   1        led_config_logic.green = 0;
 152   1        led_config_logic.blue = 0;
 153   1      }
 154          
 155          // ------------------------- Display Mode Code 1 --------------------------
 156          
 157          static void steady_driver(void) {
 158   1      
 159   1      }
 160          
 161          static void steady_driver_init() {
 162   1        led_flicker.cycle_output = ON;
 163   1        led_flicker.cycle_enable = DISABLE;
 164   1      }
 165          
 166          
 167          
 168          // ------------------------- Display Mode Code 1 --------------------------
 169          
 170          static void steady_from_app_driver(void) {
 171   1      
 172   1      }
 173          
 174          static void steady_from_app_driver_init() {
 175   1        led_flicker.cycle_output = ON;
 176   1        led_flicker.cycle_enable = DISABLE;
 177   1        led_config_cpy(&led_config_logic, &led_config_set);
 178   1      }
 179          
C51 COMPILER V9.52.0.0   DISPLAY                                                           03/03/2016 15:49:52 PAGE 4   

 180          // ------------------------- Display Mode Code 8 --------------------------
 181          static void colorful_driver(void) {
 182   1      
 183   1      
 184   1      }
 185          
 186          static void colorful_driver_init() {
 187   1        led_flicker.cycle_output = ON;
 188   1        led_flicker.cycle_enable = ENABLE;
 189   1        led_config_logic.red = 251;
 190   1        led_config_logic.green = 1;
 191   1        led_config_logic.blue = 1;
 192   1        counter_for_color = 0;
 193   1        color_mark = 0;
 194   1      }
 195          
 196          static void colorful_half_cycle_reached() {
 197   1        // start with ON
 198   1        counter_for_color ++;
 199   1        if(counter_for_color >= 250)
 200   1        {
 201   2          counter_for_color = 0;
 202   2          color_mark ++;
 203   2          if(color_mark >= 6)
 204   2            color_mark = 0;
 205   2        } 
 206   1        if(!color_mark)
 207   1        {
 208   2          led_config_logic.green ++;
 209   2        } else if(color_mark == 1){
 210   2          led_config_logic.red --;
 211   2        } else if(color_mark == 2){
 212   2          led_config_logic.blue ++;
 213   2        } else if(color_mark == 3){
 214   2          led_config_logic.green --;
 215   2        } else if(color_mark == 4){
 216   2          led_config_logic.red ++;
 217   2        } else if(color_mark == 5){
 218   2          led_config_logic.blue --;
 219   2        } 
 220   1      }
 221          
 222          
 223          void led_switch_on_off(u8 led_on)
 224          {
 225   1        if(led_on)
 226   1        {
 227   2          led_mode_set = colorful;
 228   2          ctrl_mode_changed(led_mode_set);
 229   2      
 230   2        }
 231   1        else
 232   1        {
 233   2          led_mode_set = led_display_off;
 234   2          ctrl_mode_changed(led_mode_set);
 235   2        }
 236   1      }
 237          
 238          void led_syc_color(u8 *param)
 239          {
 240   1        u8 i = 0;
 241   1        u8 param_init[6];
C51 COMPILER V9.52.0.0   DISPLAY                                                           03/03/2016 15:49:52 PAGE 5   

 242   1        led_mode_set = steady_from_app;
 243   1        for(i = 4; i < 10; i++)
 244   1        {
 245   2          if (param[i]>='0' && param[i]>='0') 
 246   2            param_init[i-4] = param[i] - '0';
 247   2          else if(param[i]>='a' && param[i]<='f') 
 248   2            param_init[i-4] = param[i] - 'a' + 10;
 249   2        }
 250   1        led_config_set.red = param_init[0] << 8 |  param_init[1];
 251   1        led_config_set.green = param_init[2] << 8 |  param_init[3];
 252   1        led_config_set.blue = param_init[4] << 8 |  param_init[5];;
 253   1        ctrl_mode_changed(led_mode_set);
 254   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    558    ----
   CONSTANT SIZE    =     38    ----
   XDATA SIZE       =      6       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
