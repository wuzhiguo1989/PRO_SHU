C51 COMPILER V9.52.0.0   KEY                                                               03/03/2016 15:49:52 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE key.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "key.h"
   2          #include "led.h"
   3          #include "power.h"
   4          #include "utils.h"
   5          #include "ble.h"
   6          #include "string.h"
   7          #include "display.h"
   8          
   9          
  10          #define LOW     0
  11          #define HIGH    1
  12          
  13          static volatile u8 g_PreKey = 0;   //前次按键值 
  14          static volatile u8 g_NowKey = 0;   //当前按键值 
  15          static volatile u8 g_ShortKeyCode = 0;    //短按键,单次触发 
  16          static volatile u8 g_LongKeyCode = 0;     //长按键,持续触发 
  17          
  18          
  19          void key_io_init()
  20          {
  21   1          // P02~P03
  22   1          quasi_bidirectional(0, 0x04);
  23   1        quasi_bidirectional(0, 0x08);
  24   1      }
  25          
  26          
  27          // 行列扫描的缺陷：当有多个键同时按下时，可能无法检测具体位置
  28          // 不使用行列扫描，单独置行， 求列， 能否求出每个按键的位置？
  29          u8 IO_KeyScan_G() {
  30   1          u8 key = 0;
  31   1          key = key << 1 | K2;
  32   1          key = key << 1 | K1;
  33   1          return key;
  34   1      }
  35          
  36          
  37          
  38          
  39          
  40          //g_NowKey ^ g_PreKey   :边缘触发 
  41          //g_NowKey & (g_NowKey ^ g_PreKey):上升沿触发 
  42          //g_PreKey & (g_NowKey ^ g_PreKey):下降沿触发 
  43          //g_NowKey ^ (g_NowKey ^ g_PreKey):高电平触发(带消抖) 
  44          //触发方式 ^ g_KeyCode :仅更新变化部分按键值 
  45          
  46          //1.支持长短按键同时并行触发
  47          //2.将短按键触发判据改为下降沿触发(短按键释放)
  48          
  49          
  50          
  51          void key_scan_task() {
  52   1          u8 key = ~IO_KeyScan_G();
  53   1          static u16 CntPlus = 0;
  54   1          g_PreKey = g_NowKey; 
  55   1          g_NowKey = key;
C51 COMPILER V9.52.0.0   KEY                                                               03/03/2016 15:49:52 PAGE 2   

  56   1          g_ShortKeyCode = (g_PreKey & (g_NowKey ^ g_PreKey)) ^ g_ShortKeyCode;  // 下降沿触发
  57   1      
  58   1      
  59   1          if (g_NowKey ^ g_PreKey ^ g_NowKey ^ g_LongKeyCode)         // 高电平触发(带消抖) 
  60   1          { 
  61   2              if(CntPlus++ > LONG_KEY_TIME)
  62   2              {                           
  63   3                  g_LongKeyCode |= g_NowKey;                          //添加长按键值
  64   3              }    
  65   2              // if(CntPlus > SHORT_KEY_TIME) 
  66   2              //     g_ShortKeyCode &= g_NowKey;
  67   2      
  68   2          } 
  69   1          else 
  70   1          {       
  71   2              CntPlus = 0;                                        //无新增按键出现,计数归零 
  72   2              g_LongKeyCode &= g_NowKey;                          //剔除已释放的按键
  73   2              g_ShortKeyCode &= g_NowKey;
  74   2          }
  75   1      
  76   1      }
  77          
  78          //判断按键位置
  79          //0x01 LIGHT 按下
  80          //0x02 POWER 按下
  81          void check_key_location() { 
  82   1          if(g_ShortKeyCode == LIGHT_ID)
  83   1          {
  84   2              led_mode_set ++;
  85   2              if(led_mode_set == 3 || led_mode_set == 4)
  86   2                  led_mode_set = 0;
  87   2              ctrl_mode_changed(led_mode_set);
  88   2          }
  89   1          else if(g_ShortKeyCode == POWER_ID)
  90   1          {
  91   2              power_status = ~power_status;
  92   2              if(!power_status)
  93   2                  POWER_IN = 0;
  94   2              else
  95   2                  POWER_IN = 1;
  96   2          }
  97   1      
  98   1      }
  99          
 100          
 101          void key_duty_task() {
 102   1          key_scan_task();
 103   1          check_key_location();
 104   1      }
 105          
 106          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    220    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   KEY                                                               03/03/2016 15:49:52 PAGE 3   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
