C51 COMPILER V9.52.0.0   KEY                                                               10/08/2016 19:44:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE key.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "key.h"
   2          #include "led.h"
   3          #include "power.h"
   4          #include "utils.h"
   5          #include "string.h"
   6          #include "display.h"
   7          #include "lm567.h"
   8          
   9          
  10          #define LOW     0
  11          #define HIGH    1
  12          
  13          #define COUNTER_PER_SECOND 50
  14          
  15          static volatile u16 g_PreKey = 0;   //前次按键值 
  16          static volatile u16 g_NowKey = 0;   //当前按键值 
  17          static volatile u16 g_ShortKeyCode = 0;    //短按键,单次触发 
  18          static volatile u16 g_LongKeyCode = 0;     //长按键,持续触发
  19          static volatile u16 g_LongKeyCodePre = 0; 
  20          
  21          
  22          void Delay1000ms()      //@24.000MHz
  23          {
  24   1          unsigned char i, j, k;
  25   1      
  26   1          _nop_();
  27   1          _nop_();
  28   1          i = 1;
  29   1          j = 2;
  30   1          k = 238;
  31   1          do
  32   1          {
  33   2              do
  34   2              {
  35   3                  while (--k);
  36   3              } while (--j);
  37   2          } while (--i);
  38   1      }
  39          
  40          
  41          void key_io_init()
  42          {
  43   1          // P11~P12
  44   1          pure_input(1, 0x02);
  45   1          pure_input(1, 0x04);
  46   1          // P00
  47   1          pure_input(0, 0x01);
  48   1          // P25~27
  49   1          pure_input(2, 0xC0);
  50   1          // P33
  51   1          pure_input(3, 0x08);
  52   1          pure_input(3, 0x10);
  53   1          pure_input(3, 0x20);
  54   1          // P01~P03
  55   1          push_pull(0,0x0E);
C51 COMPILER V9.52.0.0   KEY                                                               10/08/2016 19:44:14 PAGE 2   

  56   1          // P10
  57   1          pure_input(1, 0x01);
  58   1          // pure_input(0,0x02);
  59   1      
  60   1          // 默认蓝牙关闭
  61   1          // 置低
  62   1          P01 = 0;
  63   1          P02 = 0;
  64   1          P03 = 0;
  65   1      
  66   1      }
  67          
  68          
  69          // 行列扫描的缺陷：当有多个键同时按下时，可能无法检测具体位置
  70          // 不使用行列扫描，单独置行， 求列， 能否求出每个按键的位置？
  71          u16 IO_KeyScan_G() {
  72   1          u16 key = 0;
  73   1          key = key << 1 | K9;
  74   1          key = key << 1 | K8;
  75   1          key = key << 1 | K7;
  76   1          key = key << 1 | K6;
  77   1          key = key << 1 | K5;
  78   1          key = key << 1 | K4;
  79   1          key = key << 1 | K3;
  80   1          key = key << 1 | K2;
  81   1          key = key << 1 | K1;
  82   1          return key;
  83   1      }
  84          
  85          
  86          
  87          
  88          
  89          //g_NowKey ^ g_PreKey   :边缘触发 
  90          //g_NowKey & (g_NowKey ^ g_PreKey):上升沿触发 
  91          //g_PreKey & (g_NowKey ^ g_PreKey):下降沿触发 
  92          //g_NowKey ^ (g_NowKey ^ g_PreKey):高电平触发(带消抖) 
  93          //触发方式 ^ g_KeyCode :仅更新变化部分按键值 
  94          
  95          //1.支持长短按键同时并行触发
  96          //2.将短按键触发判据改为下降沿触发(短按键释放)
  97          
  98          
  99          
 100          void key_scan_task() {
 101   1          u16 key = ~IO_KeyScan_G() & 0x01FF;
 102   1          static u16 CntPlus = 0;
 103   1          g_PreKey = g_NowKey; 
 104   1          g_NowKey = key;
 105   1          g_ShortKeyCode = (g_PreKey & (g_NowKey ^ g_PreKey)) ^ g_ShortKeyCode;  // 下降沿触发
 106   1      
 107   1      
 108   1          if (g_NowKey ^ g_PreKey ^ g_NowKey ^ g_LongKeyCode)         // 高电平触发(带消抖) 
 109   1          { 
 110   2              if(CntPlus++ > LONG_KEY_TIME)
 111   2              {                           
 112   3                  g_LongKeyCode |= g_NowKey;                          //添加长按键值
 113   3              }    
 114   2              if(CntPlus > SHORT_KEY_TIME) 
 115   2                  g_ShortKeyCode &= g_NowKey;
 116   2          } 
 117   1          else 
C51 COMPILER V9.52.0.0   KEY                                                               10/08/2016 19:44:14 PAGE 3   

 118   1          {       
 119   2              CntPlus = 0;                                        //无新增按键出现,计数归零 
 120   2              g_LongKeyCode &= g_NowKey;                          //剔除已释放的按键
 121   2              g_ShortKeyCode &= g_NowKey;
 122   2          }
 123   1      }
 124          
 125          
 126          
 127          
 128          
 129          count_down_t xdata volume_increase;
 130          count_down_t xdata volume_decrease;
 131          count_down_t xdata bluetooth_on_off;
 132          count_down_t xdata bluetooth_pair;
 133          //count_down_t xdata volume_increase_quick;
 134          //count_down_t xdata volume_decrease_quick;
 135          
 136          void volume_increase_callback()
 137          {
 138   1          P03 = 0;
 139   1      }
 140          void volume_decrease_callback()
 141          {
 142   1          P02 = 0;
 143   1      }
 144          void bluetooth_on_off_callback()
 145          {
 146   1          P01 = 0;
 147   1      }
 148          void bluetooth_pair_callback()   
 149          {
 150   1          P01 = 0;
 151   1      }
 152          
 153          
 154          
 155          void count_down_init(count_down_t xdata *cnt, event_cb func) {
 156   1          cnt -> second = 0;
 157   1          cnt -> millisecond = 0;
 158   1          cnt -> p_callback = func;
 159   1      }
 160          
 161          void count_down_reload(count_down_t xdata *cnt, const u8 second, const u8 millisecond) {
 162   1          if(!millisecond) {
 163   2              cnt -> second = second - 1;
 164   2              cnt -> millisecond = COUNTER_PER_SECOND;
 165   2          } else {
 166   2              cnt -> second = second;
 167   2              cnt -> millisecond = millisecond;
 168   2          }
 169   1      }
 170          
 171          
 172          bool count_down_at(count_down_t xdata *cnt) {
 173   1      if (!cnt -> second && !cnt -> millisecond)
 174   1              return FALSE;
 175   1          
 176   1          if (!--cnt -> millisecond)      // --ms == 0
 177   1          {
 178   2              if (!cnt -> second) {
 179   3                  if (cnt -> p_callback)
C51 COMPILER V9.52.0.0   KEY                                                               10/08/2016 19:44:14 PAGE 4   

 180   3                      cnt -> p_callback();
 181   3                  return TRUE;
 182   3              } else {
 183   3                  --cnt -> second;
 184   3                  cnt -> millisecond = COUNTER_PER_SECOND;
 185   3              }
 186   2          }
 187   1      
 188   1          return FALSE;
 189   1      }
 190          
 191          void count_down_cancel(count_down_t xdata *cnt) {
 192   1          cnt -> second = 0;
 193   1          cnt -> millisecond = 0;
 194   1          // cnt -> p_callback = NULL;
 195   1      }
 196          
 197          
 198          void count_down_at_all_task()
 199          {
 200   1          count_down_at(&volume_increase);
 201   1          count_down_at(&volume_decrease);
 202   1          count_down_at(&bluetooth_on_off);
 203   1          count_down_at(&bluetooth_pair);
 204   1          // count_down_at(&volume_increase_quick);
 205   1          // count_down_at(&volume_decrease_quick);
 206   1      }
 207          
 208          void count_down_init_all_task()
 209          {
 210   1          count_down_init(&volume_increase, volume_increase_callback);
 211   1          count_down_init(&volume_decrease, volume_decrease_callback);
 212   1          count_down_init(&bluetooth_on_off, bluetooth_on_off_callback);
 213   1          count_down_init(&bluetooth_pair, bluetooth_pair_callback);
 214   1          // count_down_init(&volume_increase_quick, volume_increase_quick_callback);
 215   1          // count_down_init(&volume_decrease_quick, volume_decrease_quick_callback);
 216   1      }
 217          
 218          
 219          
 220          #define reload_volume_increase() count_down_reload(&volume_increase, 0, 6); P03 = 1
 221          #define reload_volume_decrease() count_down_reload(&volume_decrease, 0, 6); P02 = 1
 222          #define reload_bluetooth_on_off() count_down_reload(&bluetooth_on_off, 0, 10); P01 = 0
 223          #define reload_bluetooth_pair() count_down_reload(&bluetooth_pair, 0, 6); P01 = 1
 224          
 225          
 226          void short_key_func_dispatcher() { 
 227   1          if(g_ShortKeyCode == KEY_BT_ID){
 228   2              // 蓝牙打开、关闭交替
 229   2              // reload_bluetooth_on_off();
 230   2              if(sys_status == ON){
 231   3                 P01 = ~P01; 
 232   3              }
 233   2          }else if(g_ShortKeyCode == KEY_POWER_ID){
 234   2              //
 235   2              sys_status = ~sys_status;
 236   2              if(sys_status == ON)
 237   2              {
 238   3                  led_mode_set = 1;
 239   3                  ctrl_mode_changed(led_mode_set);
 240   3                  power_status = ON;
 241   3                  power_level_set = 1;
C51 COMPILER V9.52.0.0   KEY                                                               10/08/2016 19:44:14 PAGE 5   

 242   3              } else {
 243   3                  P01 = 0;
 244   3                  power_status = OFF;
 245   3                  power_select_level();
 246   3                  led_mode_set = 0;
 247   3                  ctrl_mode_changed(led_mode_set);
 248   3              }
 249   2          }else if(g_ShortKeyCode == KEY_LAMP_ID){
 250   2              // 红色、绿色、蓝色、混色、七彩、关闭
 251   2              if(sys_status == ON)
 252   2              {
 253   3                  led_mode_set ++;
 254   3                  if(led_mode_set == 11)
 255   3                      led_mode_set = 0;
 256   3                  ctrl_mode_changed(led_mode_set);
 257   3              }
 258   2      
 259   2          }else if(g_ShortKeyCode == KEY_FOG_ID){
 260   2              // 1、2、3、4、关闭切换
 261   2              if(power_status == ON)
 262   2              {
 263   3                  if(power_level_set == 0)
 264   3                     power_level_set = 5;
 265   3                  power_level_set --;
 266   3                  power_select_level();
 267   3              }
 268   2          }else if(g_ShortKeyCode == KEY_VA_ID){
 269   2              // 音量+1
 270   2              reload_volume_increase();
 271   2          }else if(g_ShortKeyCode == KEY_VM_ID){
 272   2              // 音量-1
 273   2              reload_volume_decrease();
 274   2          }else if(g_ShortKeyCode == KEY_LIGHT_ID){
 275   2              led_mode_set ++;
 276   2              if(led_mode_set == 11)
 277   2                  led_mode_set = 0;
 278   2              ctrl_mode_changed(led_mode_set);
 279   2          }else if(g_ShortKeyCode == KEY_BLUETOOTH_ID){
 280   2              P01 = ~P01;
 281   2          }else if(g_ShortKeyCode == KEY_MIST_ID){
 282   2              power_status = ~power_status;
 283   2              power_select_level();
 284   2          }
 285   1      
 286   1      }
 287          
 288          
 289          #define INTERVAL_BLUTOOTH_PAIR_HOLD   20
 290          #define INTERVAL_VOLUME_INCREASE_HOLD 10
 291          #define INTERVAL_VOLUME_DECREASE_HOLD 10
 292          volatile u8 interval_bluetooth_pair_hold = INTERVAL_BLUTOOTH_PAIR_HOLD;
 293          volatile u8 interval_volume_increase_hold = INTERVAL_VOLUME_INCREASE_HOLD;
 294          volatile u8 interval_volume_decrease_hold = INTERVAL_VOLUME_DECREASE_HOLD;
 295          
 296          void decrease_key_hold_interval()
 297          {
 298   1          if(interval_volume_increase_hold)
 299   1              -- interval_volume_increase_hold;
 300   1          if(interval_volume_decrease_hold)
 301   1              -- interval_volume_decrease_hold;
 302   1      }
 303          
C51 COMPILER V9.52.0.0   KEY                                                               10/08/2016 19:44:14 PAGE 6   

 304          void long_key_func_dispatcher() { 
 305   1          if(g_LongKeyCode == KEY_BLUETOOTH_ID && g_LongKeyCodePre == 0){
 306   2          //配对
 307   2              reload_bluetooth_pair();
 308   2          }else if(g_LongKeyCode == KEY_VA_ID){
 309   2              // 快速+
 310   2              if(!interval_volume_increase_hold)
 311   2              {
 312   3                  interval_volume_increase_hold = INTERVAL_VOLUME_INCREASE_HOLD;
 313   3                  reload_volume_increase();
 314   3              }
 315   2          }else if(g_LongKeyCode == KEY_VM_ID){
 316   2              // 快速-
 317   2              if(!interval_volume_decrease_hold)
 318   2              {
 319   3                  interval_volume_decrease_hold = INTERVAL_VOLUME_DECREASE_HOLD;
 320   3                  reload_volume_decrease();
 321   3              }
 322   2          }
 323   1      }
 324          
 325          
 326          void key_duty_task() {
 327   1          key_scan_task();
 328   1          if(g_ShortKeyCode)
 329   1          {
 330   2              // TX1_write2buff(g_ShortKeyCode);
 331   2              short_key_func_dispatcher();
 332   2          }
 333   1          if(g_LongKeyCode)
 334   1          {
 335   2              // TX1_write2buff(g_LongKeyCode);
 336   2              long_key_func_dispatcher();
 337   2          }
 338   1          g_LongKeyCodePre = g_LongKeyCode;
 339   1      }
 340          
 341          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1123    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     31       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
