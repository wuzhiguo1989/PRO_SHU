C51 COMPILER V9.52.0.0   SYNC                                                              10/08/2016 19:44:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SYNC
OBJECT MODULE PLACED IN sync.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE sync.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "sync.h"
   2          #include "task.h"
   3          #include "config.h"
   4          #include "utils.h"
   5          #include "power.h"
   6          #include "lm567.h"
   7          
   8          #define T200Hz  (MAIN_Fosc / 12 / 200)
   9          #define Timer0_Reload   (65536UL - T200Hz)
  10          
  11          
  12          typedef struct time_entity
  13          {
  14              u8 minute;      /* minutes, range 0 to 59           */
  15              u8 second;      /* seconds, range 0 to 59           */
  16          } time_t;
  17          
  18          time_t local_time;
  19          
  20          volatile bit countdown_signal_start = NO;
  21          volatile cycle_control_t xdata led_flicker;  
  22          static u8 key_task_interval = KEY_SCAN_TASK_INTERVAL;
  23          #define SECOND_SCAN_TASK_INTERVAL 200
  24          static u8 second_task_interval = SECOND_SCAN_TASK_INTERVAL;
  25          
  26          
  27          void init_sync_object() {
  28   1          led_flicker.cycle_enable = ON;
  29   1          led_flicker.counter_for_cycle = 0;
  30   1      }
  31          
  32          
  33          void init_system_tick() {
  34   1          Timer0_12T();
  35   1          Timer0_AsTimer();
  36   1          Timer0_16bitAutoReload();
  37   1          T0_Load(0xD8F0);
  38   1          Timer0_InterruptEnable();
  39   1          Timer0_Run();
  40   1      }
  41          
  42          
  43          
  44          void sync_with_alert() // 2ms @24.000MHz
  45          {
  46   1          unsigned char i, j;
  47   1          i = 47;
  48   1          j = 174;
  49   1          do
  50   1          {
  51   2              while (--j);
  52   2          } while (--i);
  53   1      }
  54          
  55          void cycle_based_control() {
C51 COMPILER V9.52.0.0   SYNC                                                              10/08/2016 19:44:14 PAGE 2   

  56   1          // cycle_control_t
  57   1          if (led_flicker.cycle_enable) {
  58   2              ++led_flicker.counter_for_cycle;
  59   2          }
  60   1      
  61   1      }
  62          
  63          u8 minute_count_down[5] = {0, 15, 30, 60, 90};
  64          
  65          void countdown_off(u8 time_index)
  66          {
  67   1          u8 minute = minute_count_down[time_index];
  68   1          if(!minute)
  69   1              countdown_signal_start = NO;
  70   1          else
  71   1          {
  72   2              countdown_signal_start = YES;
  73   2              second_task_interval = SECOND_SCAN_TASK_INTERVAL;
  74   2              local_time.minute = minute;
  75   2              local_time.second = 0;
  76   2          }
  77   1      }
  78          
  79          // 
  80          void tm0_isr() interrupt TIMER0_VECTOR  using 1
  81          {    
  82   1          INT_PROC |= TICK_DUTY;
  83   1          if (!--key_task_interval) {
  84   2              INT_PROC |= KEY_DUTY;
  85   2              key_task_interval = KEY_SCAN_TASK_INTERVAL;
  86   2          }
  87   1          // 1000ms 刷新一次时间
  88   1          if(countdown_signal_start)
  89   1          {
  90   2              if(!--second_task_interval)
  91   2              {
  92   3                  if(--local_time.second == 255)
  93   3                  {
  94   4                      local_time.second = 59;
  95   4                      if(!local_time.minute --)
  96   4                      {
  97   5                          countdown_signal_start = NO;
  98   5                          INT_PROC |= SLEEP_DUTY;
  99   5                      }
 100   4                      
 101   4                  }
 102   3                  second_task_interval = SECOND_SCAN_TASK_INTERVAL;
 103   3              }
 104   2          }
 105   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    195    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   SYNC                                                              10/08/2016 19:44:14 PAGE 3   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
