C51 COMPILER V9.52.0.0   BK8000L                                                           09/04/2016 12:56:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BK8000L
OBJECT MODULE PLACED IN bk8000l.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE bk8000l.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "bk8000l.h"
   2          #include "string.h"
   3          #include "usart.h"
   4          #include "stdio.h"
   5          
   6          #define bluetooth_send_command(x)   PrintString1(x)
   7          #define bluetooth_recieve_data(x)   GetString1(x)
   8          
   9          static volatile u8 idata TX1_Buffer[COM_TX1_Lenth];    //发送缓冲
  10          
  11          void Delay100ms()   //@24.000MHz
  12          {
  13   1        unsigned char i, j, k;
  14   1      
  15   1        _nop_();
  16   1        _nop_();
  17   1        i = 10;
  18   1        j = 31;
  19   1        k = 147;
  20   1        do
  21   1        {
  22   2          do
  23   2          {
  24   3            while (--k);
  25   3          } while (--j);
  26   2        } while (--i);
  27   1      }
  28          
  29          void TX1_write2buff(const u8 dat) 
  30          {
  31   1          TX1_Buffer[COM1.TX_write] = dat;        // 装发送缓冲
  32   1          if(++COM1.TX_write >= COM_TX1_Lenth)    
  33   1              COM1.TX_write = 0;
  34   1      
  35   1          if(COM1.B_TX_busy == 0)                 // 空闲
  36   1          {  
  37   2              COM1.B_TX_busy = 1;                 // 标志忙
  38   2              TI = 1;                             // 触发发送中断
  39   2          }
  40   1      }
  41          
  42          
  43          static void PrintString1(u8 *puts)
  44          {
  45   1          for (; *puts != 0;  puts++)  
  46   1              TX1_write2buff(*puts);     //遇到停止符0结束
  47   1      
  48   1      }
  49          
  50          void Bk8000l_Init() {
  51   1      
  52   1          memset(TX1_Buffer, 0, COM_TX1_Lenth);
  53   1          USART_Init(&COM1);
  54   1      
  55   1          S1_8bit();
C51 COMPILER V9.52.0.0   BK8000L                                                           09/04/2016 12:56:14 PAGE 2   

  56   1          S1_BRT_UseTimer2();     // S1 BRT Use Timer2;
  57   1      
  58   1          S1_Int_Enable();        // 允许中断
  59   1          S1_RX_Enable();         // Rx 接收允许
  60   1          S1_USE_P30P31();
  61   1          S1_TXD_RXD_OPEN();
  62   1      
  63   1          USART_Share_Timer2();
  64   1      }
  65          
  66          void Bk8000l_Change_DisplayMode(u8 param)
  67          {
  68   1          char cmd[10] = "A";
  69   1          u8 n = 1;
  70   1          if(param > 10)
  71   1              return ;
  72   1          else{
  73   2              cmd[n++] = '0' + param/10;
  74   2              cmd[n++] = '0' + param%10;
  75   2              bluetooth_send_command(cmd);
  76   2          } 
  77   1      }
  78          
  79          void Bk8000l_Change_Power(u8 param)
  80          {
  81   1          char cmd[10] = "B";
  82   1          u8 n = 1;
  83   1          if(param > 4)
  84   1              return ;
  85   1          else{
  86   2              cmd[n++] = '0' + param%10;
  87   2              bluetooth_send_command(cmd);
  88   2          } 
  89   1      }
  90          
  91          void Bk8000l_Change_DisplayLimus(u8 param)
  92          {
  93   1          char cmd[4] = "E";
  94   1          u8 n = 1;
  95   1          if(param > 15)
  96   1              return ;
  97   1          else{
  98   2              cmd[n++] = '0' + param/10;
  99   2              cmd[n++] = '0' + param%10;
 100   2              bluetooth_send_command(cmd);
 101   2          } 
 102   1      }
 103          
 104          void Bk8000l_Change_DisplaySpeed(u8 param)
 105          {
 106   1          char cmd[4] = "F";
 107   1          u8 n = 1;
 108   1          if(param > 15)
 109   1              return ;
 110   1          else{
 111   2              cmd[n++] = '0' + param/10;
 112   2              cmd[n++] = '0' + param%10;
 113   2              bluetooth_send_command(cmd);
 114   2          } 
 115   1      
 116   1      }
 117          
C51 COMPILER V9.52.0.0   BK8000L                                                           09/04/2016 12:56:14 PAGE 3   

 118          
 119          void Bk8000l_Sync_Color(u8 red_param, u8 green_param, u8 blue_param)
 120          {
 121   1          char cmd[11] = "C";
 122   1          u8 n = 1;
 123   1      
 124   1          
 125   1          if(red_param > 255 || green_param > 255 || red_param > 255)
 126   1              return ;
 127   1          else
 128   1          {
 129   2              cmd[n++] = '0' + red_param/100;
 130   2              cmd[n++] = '0' + red_param/10 - red_param/100*10;
 131   2              cmd[n++] = '0' + red_param%10;
 132   2              cmd[n++] = '0' + green_param/100;
 133   2              cmd[n++] = '0' + green_param/10 - green_param/100*10;
 134   2              cmd[n++] = '0' + green_param%10;
 135   2              cmd[n++] = '0' + blue_param/100;
 136   2              cmd[n++] = '0' + blue_param/10 - blue_param/100*10;
 137   2              cmd[n++] = '0' + blue_param%10;
 138   2              bluetooth_send_command(cmd);
 139   2          }
 140   1      }
 141          
 142          
 143          void Bk8000l_Control_ALARM(u8 param)
 144          {
 145   1          char cmd[3] = "D";
 146   1          u8 n = 1;
 147   1          cmd[n++] = '0' + param;
 148   1          if(param > 4)
 149   1              return ;
 150   1          else
 151   1              bluetooth_send_command(cmd);
 152   1      }
 153          
 154          
 155          void UART1_int (void) interrupt UART1_VECTOR
 156          {
 157   1          if(RI)
 158   1          {
 159   2              RI = 0;
 160   2          }
 161   1      
 162   1          if(TI)
 163   1          {
 164   2              TI = 0;
 165   2              if(COM1.TX_read != COM1.TX_write)
 166   2              {
 167   3                  SBUF = TX1_Buffer[COM1.TX_read];
 168   3                  if(++COM1.TX_read >= COM_TX1_Lenth)     
 169   3                      COM1.TX_read = 0;
 170   3              }
 171   2              else    
 172   2                  COM1.B_TX_busy = 0;
 173   2          }
 174   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    763    ----
   CONSTANT SIZE    =     42    ----
C51 COMPILER V9.52.0.0   BK8000L                                                           09/04/2016 12:56:14 PAGE 4   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      50
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
