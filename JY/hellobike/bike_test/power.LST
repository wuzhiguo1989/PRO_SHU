C51 COMPILER V9.52.0.0   POWER                                                             01/06/2017 11:17:04 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN power.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE power.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "power.h"
   2          #include "utils.h"
   3          #include "task.h"
   4          #include "beep.h"
   5          #include "key.h"
   6          #include "lm567.h"
   7          #include "key.h"
   8          #include <stdio.h>
   9          #include <string.h>
  10          #include <stdlib.h>
  11           
  12          
  13          void power_io_init() {
  14   1          // ia
  15   1          push_pull(1, 0x04);
  16   1          push_pull(1, 0x08);
  17   1          // ib
  18   1          push_pull(1, 0x01);
  19   1          push_pull(1, 0x02);
  20   1      
  21   1          power_work_disable();
  22   1      
  23   1      }
  24          
  25          #define wait_adc_finish() while (!(ADC_CONTR & ADC_FLAG))   //等待ADC转换完成
  26          #define adc_key_channel  5
  27          // 2V
  28          // #define ADC_VALUE_ON 0x026C 
  29          // 1V
  30          #define ADC_VALUE_ON 0x0136
  31          void init_adc()
  32          {
  33   1          P1ASF |= 0x20;                      // P1(ch) -> P1 ^ 5
  34   1          ADC_RES = 0;                        // high 8 bit       
  35   1          ADC_RESL = 0;                       // low 2 bit
  36   1          ADC_CONTR = ADC_POWER | ADC_SPEED | adc_key_channel;
  37   1      }
  38          
  39          static u16 GetADCResult()
  40          {
  41   1        ADC_CONTR |= ADC_START;
  42   1        _nop_();                        
  43   1        _nop_();
  44   1        _nop_();
  45   1        _nop_();
  46   1        wait_adc_finish();              
  47   1        ADC_CONTR &= ~ADC_FLAG;
  48   1      
  49   1        return ((ADC_RES << 2) | ADC_RESL);
  50   1      }
  51          
  52          
  53          
  54          // alter
  55          void alter_beep_protect()
C51 COMPILER V9.52.0.0   POWER                                                             01/06/2017 11:17:04 PAGE 2   

  56          {
  57   1          // K2|P15
  58   1          pure_input(1, 0x40);
  59   1      
  60   1          // K_POWER|P37
  61   1          push_pull(3, 0x80);
  62   1      
  63   1          // K1|P33
  64   1          pure_input(3, 0x08);
  65   1      
  66   1          // P32
  67   1          push_pull(3, 0x04);
  68   1      
  69   1          k_power_disable();
  70   1       
  71   1      
  72   1          INT1 = 0;
  73   1          // 低电平报警
  74   1          IT1 = 1;   //  设置INT0的中断类型 (1:仅下降沿 0:上升沿和下降沿)
  75   1          EX1 = ENABLE; 
  76   1      }
  77          
  78          u8 status_lock_detect()
  79          {
  80   1          u16 key_adc_value = 0;
  81   1          // 检测ADC
  82   1          key_adc_value = GetADCResult();
  83   1          // 低电平是开
  84   1          // 高电平是关
  85   1          if(key_adc_value > ADC_VALUE_ON){
  86   2              return 0;
  87   2          } else {
  88   2              return 1;
  89   2          }
  90   1      }
  91          
  92          
  93          
  94          
  95          u8 key_status_on = 0;
  96          u8 key_status_on_pre = 0;
  97          volatile u8 cnt_on_time_plus = 0;
  98          u8 status_lock_on_detect()
  99          {
 100   1          u16 key_adc_value = GetADCResult();
 101   1          // TX1_write2buff(key_adc_value >> 8);
 102   1          // TX1_write2buff(key_adc_value);
 103   1          // 低电平是开
 104   1          // 高电平是关
 105   1          if(key_adc_value > ADC_VALUE_ON)
 106   1              key_status_on = 1;
 107   1          else
 108   1              key_status_on = 0;
 109   1          if(!key_status_on && !key_status_on_pre){
 110   2              cnt_on_time_plus ++;
 111   2          } else {
 112   2              cnt_on_time_plus = 0;
 113   2          }
 114   1          key_status_on_pre = key_status_on;
 115   1          return cnt_on_time_plus;
 116   1      }
 117          
C51 COMPILER V9.52.0.0   POWER                                                             01/06/2017 11:17:04 PAGE 3   

 118          u8 key_status_off = 0;
 119          u8 key_status_off_pre = 0;
 120          volatile u8 cnt_off_time_plus = 0;
 121          u8 status_lock_off_detect()
 122          {
 123   1          u16 key_adc_value = GetADCResult();
 124   1          // TX1_write2buff(key_adc_value >> 8);
 125   1          // TX1_write2buff(key_adc_value);
 126   1          // 低电平是开
 127   1          // 高电平是关
 128   1          if(key_adc_value > ADC_VALUE_ON)
 129   1              key_status_off = 1;
 130   1          else
 131   1              key_status_off = 0;
 132   1      
 133   1          if(key_status_off && key_status_off_pre){
 134   2              cnt_off_time_plus ++;
 135   2          } else {
 136   2              cnt_off_time_plus = 0;
 137   2          }
 138   1          key_status_off_pre = key_status_off;
 139   1          return cnt_off_time_plus;
 140   1      }
 141          
 142          
 143          void exint1() interrupt INT1_VECTOR  using 0
 144          {
 145   1          EX1 = DISABLE;
 146   1          INT_PROC |= LOCK_DETECT_DUTY; 
 147   1      }
 148          
 149          void send_adc()
 150          {
 151   1          u16 key_adc_value = 0;
 152   1          // 检测ADC
 153   1          key_adc_value = GetADCResult();
 154   1          if(!INT1)
 155   1              printf("%d,1,\r\n",key_adc_value);
 156   1          else 
 157   1              printf("%d,0,\r\n",key_adc_value);
 158   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    322    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =      6       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
