C51 COMPILER V9.52.0.0   LM567                                                             01/06/2017 11:17:03 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LM567
OBJECT MODULE PLACED IN lm567.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE lm567.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1           #include "lm567.h" 
   2           #include "string.h" 
   3           #include "usart.h" 
   4           #include "task.h" 
   5           #include "stdio.h" 
   6           #include "sync.h" 
   7           #include "utils.h" 
   8           #include "key.h" 
   9           #include "power.h" 
  10           #include "beep.h" 
  11           
  12          
  13          #define SLIP_START 0x7E
  14          #define SLIP_END   0x7F
  15          #define SLIP_REPL  0x7D
  16          #define SLIP_ESC   0x20
  17          #define CMD_CNT    6
  18          
  19          static volatile u8 xdata TX1_Buffer[COM_TX1_Lenth];    //发送缓冲
  20          static volatile u8 xdata RX1_Buffer[COM_RX1_Lenth];    //接收缓冲
  21          
  22          static code u8 open_callback_success[] = {0x7E, 0x81, 0x00, 0x00, 0x81, 0x7F};
  23          static code u8 open_callback_fail[] = {0x7E, 0x81, 0x00, 0x01, 0x82, 0x7F};
  24          static code u8 lock_callback_by_hand_success[] = {0x7E, 0x84, 0x00, 0x00, 0x84, 0x7F};
  25          static code u8 lock_callback_by_hand_fail[] = {0x7E, 0x84, 0x00, 0x01, 0x85, 0x7F};
  26          static code u8 beep_callback_success[] = {0x7E, 0x83, 0x00, 0x00, 0x83, 0x7F};
  27          static code u8 beep_callback_fail[] = {0x7E, 0x83, 0x00, 0x00, 0x83, 0x7F};
  28          
  29          // static code u8 lock_callback_by_hand[] = {0x7E, 0x84, 0x00, 0x00, 0x84, 0x7F};
  30          
  31          static code u8 schedule_success[] =  {0x7E, 0x86, 0x00, 0x00, 0x86, 0x7F};
  32          
  33          static code u8 trace_success[] = {0x7E, 0x87, 0x00, 0x00, 0x87, 0x7F};
  34          
  35          
  36          
  37           
  38          char TX1_write2buff(const u8 dat)  
  39           { 
  40   1           TX1_Buffer[COM1.TX_write] = dat;        // 装发送缓冲 
  41   1           if(++COM1.TX_write >= COM_TX1_Lenth)     
  42   1               COM1.TX_write = 0; 
  43   1           if(COM1.B_TX_busy == 0)                 // 空闲 
  44   1           {   
  45   2               COM1.B_TX_busy = 1;                 // 标志忙 
  46   2               TI = 1;                             // 触发发送中断 
  47   2           } 
  48   1           return dat;
  49   1      
  50   1       } 
  51           
  52          void uart_send_command(u8 *r)
  53          {
  54   1          u8 i;
  55   1          for(i = 0; i < CMD_CNT; i++)
C51 COMPILER V9.52.0.0   LM567                                                             01/06/2017 11:17:03 PAGE 2   

  56   1              TX1_write2buff(r[i]);
  57   1      }
  58          
  59            
  60           void uart_send_open_success()
  61           {
  62   1          uart_send_command(open_callback_success);
  63   1       } 
  64          
  65          
  66           void uart_send_open_fail()
  67           {
  68   1          uart_send_command(open_callback_fail);
  69   1       } 
  70          
  71          
  72            void uart_send_beep_success(u8 cmd)
  73           {
  74   1          TX1_write2buff(0x7E);
  75   1          TX1_write2buff(0x83);
  76   1          TX1_write2buff(cmd);
  77   1          TX1_write2buff(0x00);
  78   1          TX1_write2buff(0x83 + cmd);
  79   1          TX1_write2buff(0x7F);
  80   1          // uart_send_command(beep_callback_success);
  81   1       }
  82          
  83            void uart_send_lock_by_hand_success()
  84           {
  85   1          uart_send_command(lock_callback_by_hand_success);
  86   1       }
  87          
  88             void uart_send_lock_by_hand_fail()
  89           {
  90   1          uart_send_command(lock_callback_by_hand_fail);
  91   1       }
  92          
  93           void uart_send_status_now(u8 lock_status, u8 sys_status)
  94           {
  95   1          TX1_write2buff(0x7E);
  96   1          TX1_write2buff(0x85);
  97   1          TX1_write2buff(lock_status);
  98   1          TX1_write2buff(sys_status);
  99   1          TX1_write2buff(0x85 + lock_status + sys_status);
 100   1          TX1_write2buff(0x7F);
 101   1       }
 102          
 103           void uart_send_schedule_callback()
 104           {
 105   1          uart_send_command(schedule_success);
 106   1       }
 107          
 108            void uart_send_trace_callback()
 109           {
 110   1          uart_send_command(trace_success);
 111   1       }
 112           
 113           static void GetString1(u8 *received) {
 114   1          u8 len = COM1.RX_Cnt;  
 115   1          if (COM1.RX_Cnt)  
 116   1              memcpy(received, RX1_Buffer, COM1.RX_Cnt); 
 117   1           received[COM1.RX_Cnt] = '\0';
C51 COMPILER V9.52.0.0   LM567                                                             01/06/2017 11:17:03 PAGE 3   

 118   1           memset(RX1_Buffer, 0, COM_RX1_Lenth); 
 119   1           USART_Finish_Rx(&COM1); 
 120   1       } 
 121          
 122          
 123            static void uart_dispatch_cmd(const char  *r) {
 124   1              switch(r[0])
 125   1              {
 126   2                  // 开锁命令
 127   2                  case 0x01:
 128   2                      // 不响应中断（开锁结束后再去响应）
 129   2                      // EX1 = DISABLE;
 130   2                      // 接到开锁命令后三秒待机
 131   2                      cancle_lock_count_down();
 132   2                      reload_open_sleep_count_down();
 133   2                      // lock_fail_from_server = 1;
 134   2                      cnt_on_time_plus = 0;
 135   2                      k_power_enable();
 136   2                      reload_open_count_down();
 137   2                      reload_open_beep_count_down();
 138   2                      lock_on_detect_signal = 0;
 139   2                      led_mode_set = open;
 140   2                      led_mode_changed();
 141   2                      break;
 142   2                  // 报警命令
 143   2                  case 0x03:
 144   2                      if(r[1] == 0x02)
 145   2                      {
 146   3                          if(led_mode_set != schedule)
 147   3                              reload_alter_sleep_count_down();
 148   3                          speak_alter_pca_init();
 149   3                          speak_beep_enable();
 150   3                          speak_mode = alter_beep;
 151   3                          reload_alter_beep_count_down();
 152   3                      }
 153   2                      cpu_wake_up_enable();
 154   2                      uart_send_beep_success(r[1]);
 155   2                      cpu_wake_up_disable();
 156   2                      break;
 157   2      
 158   2                  // 接收到上锁命令
 159   2                  case 0x04:
 160   2                      // 无需反馈
 161   2                      resend_lock_command_signal = 0;
 162   2                      break;
 163   2      
 164   2                  // 查询状态
 165   2                  case 0x05:
 166   2                      // 都是低功耗、锁的状态
 167   2                      uart_send_status_now(status, 0x00);
 168   2                      if(led_mode_set != schedule)
 169   2                         reload_sleep_count_down();
 170   2                      break;
 171   2      
 172   2                  // 预约/取消预约
 173   2                  case 0x06:
 174   2                      // 不需要 直接反馈
 175   2                      if(r[1] == 0x01){
 176   3                          reload_schedule_sleep_count_down();
 177   3                          led_mode_set = schedule;
 178   3                          led_mode_changed();
 179   3                      } else if(r[1] == 0x00){
C51 COMPILER V9.52.0.0   LM567                                                             01/06/2017 11:17:03 PAGE 4   

 180   3                          cancle_sleep_count_down();
 181   3                          // 准备睡眠
 182   3                          led_display_stop();
 183   3                          reload_sleep_count_down();
 184   3                      }
 185   2                      uart_send_schedule_callback();
 186   2                      break;
 187   2                  // 寻车命令     
 188   2                  case 0x07:
 189   2                      reload_sleep_count_down();
 190   2                      reload_cnt_for_beep();
 191   2                      reload_trace_beep_count_down();
 192   2                      led_mode_set = trace;
 193   2                      led_mode_changed();
 194   2                      uart_send_trace_callback();
 195   2                      break; 
 196   2                  default:
 197   2                      if(led_mode_set != schedule) 
 198   2                          reload_sleep_count_down();
 199   2                      break;           
 200   2              }
 201   1       
 202   1        }
 203          
 204          
 205          void uart_cache_response(char xdata *r, char xdata *received) 
 206          {
 207   1          u8 len = COM1.RX_Cnt;
 208   1          memset(received, 0, COM_RX1_Lenth);
 209   1          memcpy(received, r, sizeof(char) * len);
 210   1          USART_Finish_Rx(&COM1);
 211   1          if(received[0] == '#'){
 212   2              cancle_lock_count_down();
 213   2              cnt_on_time_plus = 0;
 214   2              k_power_enable();
 215   2              lock_signal = 0;
 216   2              reload_open_count_down();
 217   2              reload_open_beep_count_down();
 218   2              lock_on_detect_signal = 0;
 219   2              led_mode_set = open;
 220   2              led_mode_changed();
 221   2          }
 222   1          
 223   1              
 224   1      }
 225          
 226          static void PrintString1(u8 *puts) 
 227           { 
 228   1           for (; *puts != 0;  puts++)  TX1_write2buff(*puts);     //遇到停止符0结束 
 229   1       } 
 230           
 231           
 232           void uart_Init() { 
 233   1          memset(TX1_Buffer, 0, COM_TX1_Lenth); 
 234   1          memset(RX1_Buffer, 0, COM_RX1_Lenth); 
 235   1          USART_Init(&COM1); 
 236   1       
 237   1       
 238   1          S1_8bit(); 
 239   1          S1_BRT_UseTimer2();     // S1 BRT Use Timer2; 
 240   1          S1_Int_Enable();        // 允许中断 
 241   1          S1_RX_Enable();         // Rx 接收允许 
C51 COMPILER V9.52.0.0   LM567                                                             01/06/2017 11:17:03 PAGE 5   

 242   1       
 243   1          S1_USE_P30P31(); 
 244   1          quasi_bidirectional(3, 0x01); 
 245   1          quasi_bidirectional(3, 0x02);
 246   1       
 247   1           S1_TXD_RXD_OPEN(); 
 248   1       
 249   1       
 250   1           USART_Share_Timer2(); 
 251   1       } 
 252           
 253          
 254           void uart_process_recieved() { 
 255   1           char received[COM_RX1_Lenth];
 256   1           // if(led_mode_set != schedule)
 257   1           //    cancle_sleep_count_down();
 258   1           uart_cache_response(RX1_Buffer, received);  
 259   1       } 
 260           
 261           
 262          // Handle usart trigger: receiving "\r\n" 
 263          void UART1_int (void) interrupt UART1_VECTOR 
 264           { 
 265   1          if(RI) 
 266   1           { 
 267   2               RI = 0; 
 268   2       
 269   2       
 270   2               if(COM1.B_RX_OK == 0) 
 271   2               { 
 272   3                   if (COM1.RX_Cnt >= COM_RX1_Lenth) 
 273   3                       COM1.RX_Cnt = 0; 
 274   3                   RX1_Buffer[COM1.RX_Cnt++] = SBUF; 
 275   3                   COM1.RX_TimeOut = TimeOutSet1; 
 276   3               } 
 277   2       
 278   2       
 279   2           } 
 280   1       
 281   1       
 282   1           if(TI) 
 283   1           { 
 284   2               TI = 0; 
 285   2               if(COM1.TX_read != COM1.TX_write) 
 286   2               { 
 287   3                   SBUF = TX1_Buffer[COM1.TX_read]; 
 288   3                   if(++COM1.TX_read >= COM_TX1_Lenth)      
 289   3                       COM1.TX_read = 0; 
 290   3               } 
 291   2               else     
 292   2                   COM1.B_TX_busy = 0; 
 293   2           } 
 294   1       } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    948    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =     48      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   LM567                                                             01/06/2017 11:17:03 PAGE 6   

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
