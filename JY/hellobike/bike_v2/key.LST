C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE key.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "key.h"
   2          #include "power.h"
   3          #include "utils.h"
   4          #include "string.h"
   5          #include "lm567.h"
   6          #include "stc15wxxxx.h"
   7          #include "beep.h"
   8          #include "task.h"
   9          
  10          #define COUNTER_PER_SECOND 50
  11          
  12          volatile u8 resend_lock_command_signal = 0;
  13          volatile u8 restart_read_status_signal = 0;
  14          volatile u8 lock_on_detect_signal = 1; 
  15          volatile u8 lock_off_detect_signal = 1;
  16          volatile cycle_control_t xdata led_flicker;
  17          volatile disp_t xdata led_mode_set;
  18          
  19          static u8 xdata cnt_for_beep = 0; 
  20          
  21          void led_display_disable() 
  22          {
  23   1          led_power_disable();  
  24   1      }
  25          
  26          void led_io_init()
  27          {
  28   1          // P54
  29   1          push_pull(5, 0x10);
  30   1          // P55
  31   1          push_pull(5, 0x20);
  32   1          // P14
  33   1          push_pull(1, 0x10);
  34   1      
  35   1          led_display_disable();
  36   1      }
  37          
  38          
  39          count_down_t xdata lock_count_down;
  40          count_down_t xdata open_count_down;
  41          count_down_t xdata alter_beep_count_down;
  42          count_down_t xdata trace_beep_count_down;
  43          // count_down_t xdata schedule_beep_count_down;
  44          count_down_t xdata trace_mute_count_down;
  45          // count_down_t xdata schedule_mute_count_down;
  46          count_down_t xdata sleep_count_down;
  47          count_down_t xdata open_beep_count_down;
  48          count_down_t xdata lock_beep_count_down;
  49          count_down_t xdata schedule_count_down;
  50          count_down_t xdata resend_command_count_down;
  51          count_down_t xdata resend_restart_count_down;
  52          count_down_t xdata open_delay;
  53          count_down_t xdata lock_delay;
  54          void lock_count_down_callback() 
  55          {
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 2   

  56   1          // 开：1 关：0
  57   1          EX1 = ENABLE;
  58   1          power_work_disable();
  59   1          if (!lock_off_detect_signal && !status_lock_detect()){
  60   2              status = off;
  61   2          } else {
  62   2              status = on;
  63   2          }       
  64   1          if(!lock_from_control)
  65   1          {
  66   2              uart_send_lock_by_hand_success();
  67   2              ++ cnt_lock;
  68   2              resend_lock_command_signal = 1;
  69   2              reload_resend_lock_command();
  70   2              reload_sleep_count_down();
  71   2          }
  72   1          else{
  73   2              uart_send_lock_success();
  74   2              reload_sleep_count_down();
  75   2          }
  76   1          lock_off_detect_signal = 1;
  77   1          k_power_disable();  
  78   1      }
  79          
  80          
  81          void open_count_down_callback() 
  82          { 
  83   1        power_work_disable();
  84   1          // 开：1 关：0
  85   1          if(!lock_on_detect_signal && status_lock_detect()){
  86   2              // 开锁成功上报
  87   2              uart_send_open_success();
  88   2              status = on;
  89   2          } else {
  90   2              // uart_send_open_fail();
  91   2              uart_send_open_success();
  92   2              status = off;
  93   2          } 
  94   1          lock_on_detect_signal = 1;
  95   1          k_power_disable(); 
  96   1          reload_sleep_count_down();  
  97   1      }
  98          
  99          
 100          void open_beep_count_down_callback(){
 101   1          speak_mode = mute; 
 102   1          speak_beep_disable();
 103   1      }
 104          
 105          void lock_beep_count_down_callback(){
 106   1          speak_mode = mute; 
 107   1          speak_beep_disable();
 108   1      }
 109          
 110          void alter_beep_count_down_callback()
 111          {
 112   1          speak_beep_disable();
 113   1          speak_mode = mute;
 114   1      }
 115          
 116          void trace_beep_count_down_callback()
 117          {
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 3   

 118   1          cnt_for_beep ++;
 119   1          if(cnt_for_beep >= 3){ 
 120   2             speak_beep_disable();
 121   2             speak_mode = mute;
 122   2             // reload_sleep_count_down(); 
 123   2          } else{
 124   2             reload_trace_mute_count_down(); 
 125   2          }
 126   1      }
 127          
 128          
 129          void trace_mute_count_down_callback()
 130          {
 131   1          reload_trace_beep_count_down();
 132   1      }
 133          
 134          
 135          void sleep_count_down_call_back()
 136          {
 137   1          INT_PROC |= SLEEP_DUTY;
 138   1      }
 139          
 140          void resend_lock_command_call_back()
 141          {
 142   1          if(!resend_lock_command_signal){
 143   2              // 收到、准备睡眠
 144   2              reload_sleep_count_down(); 
 145   2          } else if(resend_lock_command_signal == 1){
 146   2              // 重新发送成功
 147   2              cancle_sleep_count_down();
 148   2              uart_send_lock_by_hand_success();
 149   2              reload_resend_lock_command();
 150   2              ++  cnt_lock;
 151   2          }
 152   1      }
 153          
 154          void resend_restart_command_call_back()
 155          {
 156   1          uart_send_status_restart();
 157   1          reload_resend_restart_count_down();
 158   1          ++ cnt_restart;
 159   1      }
 160          
 161          void open_delay_callback(){
 162   1          lock_on_detect_signal = 0;
 163   1      }
 164          
 165          void lock_delay_callback(){
 166   1          lock_off_detect_signal = 0;
 167   1      }
 168          
 169          
 170          
 171          
 172          void count_down_init(count_down_t xdata *cnt, event_cb func) {
 173   1          cnt -> second = 0;
 174   1          cnt -> millisecond = 0;
 175   1          cnt -> p_callback = func;
 176   1      }
 177          
 178          void count_down_reload(count_down_t xdata *cnt, const u16 second, const u8 millisecond) {
 179   1          if(!millisecond) {
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 4   

 180   2              cnt -> second = second - 1;
 181   2              cnt -> millisecond = COUNTER_PER_SECOND;
 182   2          } else {
 183   2              cnt -> second = second;
 184   2              cnt -> millisecond = millisecond;
 185   2          }
 186   1      }
 187          
 188          
 189          bool count_down_at(count_down_t xdata *cnt) {
 190   1      if (!cnt -> second && !cnt -> millisecond)
 191   1              return FALSE;
 192   1          
 193   1          if (!--cnt -> millisecond)      // --ms == 0
 194   1          {
 195   2              if (!cnt -> second) {
 196   3                  if (cnt -> p_callback)
 197   3                      cnt -> p_callback();
 198   3                  return TRUE;
 199   3              } else {
 200   3                  --cnt -> second;
 201   3                  cnt -> millisecond = COUNTER_PER_SECOND;
 202   3              }
 203   2          }
 204   1      
 205   1          return FALSE;
 206   1      }
 207          
 208          void count_down_cancel(count_down_t xdata *cnt) {
 209   1          cnt -> second = 0;
 210   1          cnt -> millisecond = 0;
 211   1          // cnt -> p_callback = NULL;
 212   1      }
 213          
 214          
 215          void count_down_at_all_task()
 216          {
 217   1          count_down_at(&lock_count_down);
 218   1          count_down_at(&open_count_down);
 219   1          count_down_at(&alter_beep_count_down);
 220   1          count_down_at(&trace_beep_count_down);
 221   1          // count_down_at(&schedule_beep_count_down);
 222   1          count_down_at(&trace_mute_count_down);
 223   1          // count_down_at(&schedule_mute_count_down);
 224   1          count_down_at(&sleep_count_down);
 225   1          count_down_at(&open_beep_count_down);
 226   1          count_down_at(&lock_beep_count_down);
 227   1          count_down_at(&resend_command_count_down);
 228   1          count_down_at(&resend_restart_count_down);
 229   1          // count_down_at(&open_delay);
 230   1          // count_down_at(&lock_delay);
 231   1      }
 232          
 233          void count_down_init_all_task()
 234          {
 235   1          count_down_init(&lock_count_down, lock_count_down_callback);
 236   1          count_down_init(&open_count_down, open_count_down_callback);
 237   1          count_down_init(&alter_beep_count_down,alter_beep_count_down_callback);
 238   1          count_down_init(&trace_beep_count_down, trace_beep_count_down_callback);
 239   1          count_down_init(&trace_mute_count_down, trace_mute_count_down_callback);
 240   1          count_down_init(&sleep_count_down,
 241   1              sleep_count_down_call_back);
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 5   

 242   1          count_down_init(&open_beep_count_down,
 243   1              open_beep_count_down_callback);
 244   1          count_down_init(&lock_beep_count_down,
 245   1              lock_beep_count_down_callback);
 246   1          count_down_init(&resend_command_count_down,resend_lock_command_call_back);
 247   1          count_down_init(&resend_restart_count_down,resend_restart_command_call_back);
 248   1          // count_down_init(&open_delay, open_delay_callback);
 249   1          // count_down_init(&lock_delay, lock_delay_callback);
 250   1      
 251   1      }
 252          
 253          void reload_resend_restart_count_down(){
 254   1          count_down_reload(&resend_restart_count_down, 1, 0);
 255   1      }
 256          
 257          void cancel_resend_restart_count_down(){
 258   1          count_down_cancel(&resend_restart_count_down);
 259   1      }
 260          
 261          void reload_lock_count_down() 
 262          {
 263   1         count_down_reload(&lock_count_down, 3, 0); 
 264   1         power_lock_work();
 265   1      }
 266          
 267          void reload_open_count_down() 
 268          { 
 269   1         count_down_reload(&open_count_down, 2, 0);
 270   1         power_open_work();
 271   1      }
 272          
 273          void reload_open_beep_count_down()
 274          {
 275   1          speak_mode = open_beep; 
 276   1          count_down_reload(&open_beep_count_down, 0, 10); 
 277   1      }
 278          
 279          void reload_lock_beep_count_down()
 280          {
 281   1          speak_mode = lock_beep; 
 282   1          count_down_reload(&lock_beep_count_down, 0, 10); 
 283   1      } 
 284          
 285          void reload_alter_beep_count_down()
 286          {
 287   1          // 5
 288   1          count_down_reload(&alter_beep_count_down, 5, 0); 
 289   1      }
 290          
 291          void reload_sleep_count_down()
 292          {
 293   1          // 1
 294   1          count_down_reload(&sleep_count_down, 3, 0); 
 295   1      }
 296          
 297          void reload_lock_sleep_count_down()
 298          {
 299   1          // 5
 300   1          count_down_reload(&sleep_count_down, 8, 0); 
 301   1      }
 302          
 303          void reload_open_sleep_count_down()
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 6   

 304          {
 305   1          // 3
 306   1          count_down_reload(&sleep_count_down, 5, 0); 
 307   1      }
 308          
 309          void reload_alter_sleep_count_down()
 310          {
 311   1          count_down_reload(&sleep_count_down, 6, 0); 
 312   1      }
 313          
 314          void reload_schedule_sleep_count_down()
 315          {
 316   1          count_down_reload(&sleep_count_down, 900, 0);
 317   1      }
 318          
 319          
 320          void cancle_sleep_count_down()
 321          {
 322   1          count_down_cancel(&sleep_count_down);
 323   1      }
 324          
 325          void cancle_lock_count_down()
 326          {
 327   1          count_down_cancel(&lock_count_down);
 328   1      }
 329          
 330          void cancle_open_count_down()
 331          {
 332   1          count_down_cancel(&open_count_down);
 333   1      }
 334          
 335          void cancle_resend_lock_command()
 336          {
 337   1          count_down_cancel(&resend_command_count_down);   
 338   1      }
 339          
 340          void reload_open_delay(){
 341   1          // count_down_reload(&open_delay, 0, 20); 
 342   1      }
 343          
 344          void reload_lock_delay(){
 345   1          // count_down_reload(&lock_delay, 0, 20);
 346   1      }
 347          
 348          
 349          void cancel_open_delay(){
 350   1          count_down_cancel(&open_delay);
 351   1      }
 352          
 353          void cancel_lock_delay(){
 354   1          count_down_cancel(&lock_delay);
 355   1      }
 356          
 357          void reload_cnt_for_beep() 
 358          {
 359   1         cnt_for_beep = 0;
 360   1      }
 361          
 362          void reload_trace_beep_count_down() 
 363          {
 364   1        speak_mode = trace_beep;
 365   1        count_down_reload(&trace_beep_count_down, 0, 25); 
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 7   

 366   1      }
 367          
 368          void reload_trace_mute_count_down()
 369          {
 370   1         speak_beep_disable();
 371   1         speak_mode = mute;
 372   1         count_down_reload(&trace_mute_count_down, 0, 25); 
 373   1      }
 374          
 375          void reload_resend_lock_command()
 376          {
 377   1          count_down_reload(&resend_command_count_down, 1, 0);   
 378   1      }
 379          
 380          
 381          
 382          void init_sync_object() {
 383   1          led_flicker.cycle_enable = OFF;
 384   1          led_flicker.counter_for_cycle = 0;
 385   1      }
 386          
 387          
 388          static void led_display_off_driver_init();        
 389          static void schedule_driver_init();  
 390          static void trace_driver_init();         
 391          static void lock_driver_init();               
 392          static void open_driver_init(); 
 393          
 394          static void led_display_off_half_cycle_reached();  
 395          static void schedule_half_cycle_reached(); 
 396          static void trace_half_cycle_reached(); 
 397          static void lock_half_cycle_reached(); 
 398          static void open_half_cycle_reached();
 399          
 400          // idata *display_driver -> detailed display_driver
 401          static  code driver_init_pt const driver_init[5] =
 402          {
 403              led_display_off_driver_init,    
 404              schedule_driver_init,                     
 405              trace_driver_init,                  
 406              lock_driver_init,                     
 407              open_driver_init                     
 408          };
 409          
 410          
 411          
 412          static code half_cycle_reached_pt const half_cycle_callback[5] = 
 413          {
 414              NULL,     
 415              schedule_half_cycle_reached,         
 416              trace_half_cycle_reached,          
 417              lock_half_cycle_reached,
 418              open_half_cycle_reached  
 419          };
 420          
 421          static idata u8 const cycle_param[5] = {0, 200, 100, 50, 50};
 422          
 423          u8 cnt_for_cycle = 0;
 424          
 425          void cycle_based_control() {
 426   1          // cycle_control_t
 427   1          if (led_flicker.cycle_enable) {
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 8   

 428   2              ++led_flicker.counter_for_cycle;
 429   2          }
 430   1      
 431   1      }
 432          
 433          
 434          static void half_cycle_reached() {
 435   1          if (half_cycle_callback[led_mode_set])
 436   1              half_cycle_callback[led_mode_set]();
 437   1          led_flicker.counter_for_cycle = 0;
 438   1      }
 439          
 440          static void led_cycle_based_adjust() {
 441   1          if (led_flicker.cycle_enable) {
 442   2              if (led_flicker.counter_for_cycle >= cycle_param[led_mode_set])
 443   2                  half_cycle_reached();
 444   2      
 445   2          } else {
 446   2              led_flicker.counter_for_cycle = 0;
 447   2          }
 448   1      }
 449          
 450          
 451          void led_mode_changed() {
 452   1          driver_init_pt led_mode_driver_init = driver_init[led_mode_set];
 453   1          if (led_mode_driver_init)
 454   1              led_mode_driver_init();
 455   1          led_flicker.counter_for_cycle = 0;
 456   1      } 
 457          // ------------------------- public -------------------------
 458          void display_startup_init() {
 459   1          led_display_off_driver_init();
 460   1      }
 461          
 462          void led_display_task()
 463          {
 464   1          led_cycle_based_adjust();
 465   1      }
 466          
 467          
 468          static void led_display_off_driver_init(){
 469   1          led_display_disable();
 470   1      }
 471          
 472          u8 cnt_for_cycle_schedule = 0;
 473          bit flag_reverse = 0;
 474          static void schedule_driver_init() {
 475   1          led_flicker.cycle_enable = ENABLE;
 476   1          cnt_for_cycle_schedule = 0;
 477   1          led_red_power_enable();
 478   1      }
 479          
 480          static void schedule_half_cycle_reached() {
 481   1          ++ cnt_for_cycle_schedule;
 482   1          if(cnt_for_cycle_schedule == 1){
 483   2              led_power_disable();
 484   2          }else if(cnt_for_cycle_schedule == 4){
 485   2              led_red_power_enable();
 486   2              cnt_for_cycle_schedule = 0;
 487   2          }
 488   1      }
 489          
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 9   

 490          u8 cnt_for_cycle_trace = 0;
 491          static void trace_driver_init() {
 492   1          led_flicker.cycle_enable = ENABLE;
 493   1          cnt_for_cycle_trace = 0;
 494   1          led_blue_power_enable();
 495   1      }
 496          
 497          
 498          
 499          static void trace_half_cycle_reached() {
 500   1          ++ cnt_for_cycle_trace;
 501   1          if(cnt_for_cycle_trace == 1){
 502   2              led_power_disable();
 503   2          } else if(cnt_for_cycle_trace == 2){
 504   2              led_blue_power_enable();
 505   2          } else if(cnt_for_cycle_trace == 3){
 506   2              led_power_disable();
 507   2          } else if(cnt_for_cycle_trace == 4){
 508   2              led_blue_power_enable();
 509   2          } else if(cnt_for_cycle_trace == 5){
 510   2              led_flicker.cycle_enable = OFF;
 511   2              led_power_disable();
 512   2              cnt_for_cycle_trace = 0;
 513   2              led_mode_set = led_display_off;
 514   2          }
 515   1      
 516   1      }
 517          
 518          
 519          static void lock_driver_init() {
 520   1          led_flicker.cycle_enable = ENABLE;
 521   1          led_blue_power_enable();
 522   1      }
 523          
 524          static void lock_half_cycle_reached() {
 525   1          led_flicker.cycle_enable = OFF;
 526   1          led_power_disable();
 527   1          cnt_for_cycle = 0;
 528   1          led_mode_set = led_display_off;
 529   1      }
 530          
 531          
 532          static void open_driver_init() {
 533   1          led_flicker.cycle_enable = ENABLE;
 534   1          led_green_power_enable();
 535   1      }
 536          
 537          static void open_half_cycle_reached() {
 538   1              led_flicker.cycle_enable = OFF;
 539   1              led_power_disable();
 540   1              cnt_for_cycle = 0;
 541   1              led_mode_set = led_display_off;
 542   1              led_mode_changed();
 543   1      
 544   1      }
 545          
 546          
 547          void led_display_stop()
 548          {
 549   1          led_flicker.cycle_enable = OFF;
 550   1          led_power_disable();
 551   1          cnt_for_cycle = 0;
C51 COMPILER V9.52.0.0   KEY                                                               01/17/2017 11:51:45 PAGE 10  

 552   1          led_mode_set = led_display_off;
 553   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1370    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =     78       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      5    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
