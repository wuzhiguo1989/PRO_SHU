C51 COMPILER V9.52.0.0   UTILS                                                             02/26/2016 21:12:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UTILS
OBJECT MODULE PLACED IN utils.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE utils.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "utils.h"
   2          #include "e2prom.h"
   3          // 开闸门和开钥匙柜不会同时出现
   4          // 这两个采用相同的地址存储数据
   5          void Store_Counter_for_Open_key_cabinet(u32 counter)
   6          {
   7   1        u8 i;
   8   1        EEPROM_SectorErase(ADDRESS_FOR_COUNTER_OPEN_FLOOD_DOOR);
   9   1        for(i = 0; i < 4; i++)
  10   1          EEPROM_write(ADDRESS_FOR_COUNTER_OPEN_FLOOD_DOOR + i, counter >> (8 * (3 - i)));
  11   1      }
  12          
  13          void Store_Counter_for_Open_flood_door(u32 counter)
  14          {
  15   1        u8 i;
  16   1        EEPROM_SectorErase(ADDRESS_FOR_COUNTER_OPEN_FLOOD_DOOR);
  17   1        for(i = 0; i < 4; i++)
  18   1          EEPROM_write(ADDRESS_FOR_COUNTER_OPEN_FLOOD_DOOR + i, counter >> (8 * (3 - i)));
  19   1      }
  20          
  21          u32 Read_Counter_for_Open_key_cabinet()
  22          {
  23   1        u8 i;
  24   1        u32 counter = 0;
  25   1        for(i = 0; i < 4; i++)
  26   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_COUNTER_OPEN_KEY_CLIBE + i);
  27   1        return counter;
  28   1      }
  29          
  30          u32 Read_Counter_for_Open_flood_door()
  31          {
  32   1        u8 i;
  33   1        u32 counter = 0;
  34   1        for(i = 0; i < 4; i++)
  35   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_COUNTER_OPEN_FLOOD_DOOR + i);
  36   1        return counter;
  37   1      }
  38          
  39          
  40          
  41          // 以下三个操作数共用一个扇区
  42          // flag: 1-> counter_for_write_A; 
  43          //       2-> counter_for_change_blename;
  44          void Store_Counter_for_Operate_A_B_and_Blename(u32 counter, u8 flag)
  45          {
  46   1        u8 i;
  47   1        u32 counter_for_write_A, counter_for_change_blename;
  48   1        if(flag == 1){
  49   2          counter_for_write_A = counter;
  50   2          counter_for_change_blename = Read_Counter_for_change_BLEname();
  51   2        }else if(flag == 2){
  52   2          counter_for_write_A = Read_Counter_for_Write_A();
  53   2          counter_for_change_blename = counter;
  54   2        }
  55   1        EEPROM_SectorErase(ADDRESS_FOR_COUNTER_WRITE_A); 
C51 COMPILER V9.52.0.0   UTILS                                                             02/26/2016 21:12:30 PAGE 2   

  56   1        for(i = 0; i < 4; i++)
  57   1        {
  58   2          EEPROM_write(ADDRESS_FOR_COUNTER_WRITE_A + i, counter_for_write_A >> (8 * (3 - i)));
  59   2          EEPROM_write(ADDRESS_FOR_COUNTER_CHANGE_BLE_NAME + i, counter_for_change_blename >> (8 * (3 - i)));
  60   2        }
  61   1      }
  62          
  63          
  64          void Store_Counter_for_Read_A_and_B(u32 counter)
  65          {
  66   1        u8 i;
  67   1        EEPROM_SectorErase(ADDRESS_FOR_COUNTER_READ_A_AND_B);
  68   1        for(i = 0; i < 4; i++)
  69   1          EEPROM_write(ADDRESS_FOR_COUNTER_READ_A_AND_B + i, counter >> (8 * (3 - i)));
  70   1      }
  71          
  72          
  73          u32 Read_Counter_for_Read_A_and_B()
  74          {
  75   1        u8 i;
  76   1        u32 counter = 0;
  77   1        for(i = 0; i < 4; i++)
  78   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_COUNTER_READ_A_AND_B + i);
  79   1        return counter;
  80   1      }
  81          
  82          u32 Read_Counter_for_Write_A()
  83          {
  84   1        u8 i;
  85   1        u32 counter = 0;
  86   1        for(i = 0; i < 4; i++)
  87   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_COUNTER_WRITE_A + i);
  88   1        return counter;
  89   1      }
  90          
  91          u32 Read_Counter_for_change_BLEname()
  92          {
  93   1        u8 i;
  94   1        u32 counter = 0;
  95   1        for(i = 0; i < 4; i++)
  96   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_COUNTER_CHANGE_BLE_NAME + i);
  97   1        return counter;
  98   1      
  99   1      }
 100          
 101          
 102          // A、B共用一个扇区
 103          // B的值唯一
 104          void Store_A(u8 *data_A, u8 data_from, u8 data_end)
 105          {
 106   1        u8 i, data_B[4];
 107   1         for(i = 0; i < 4; i++)
 108   1          data_B[i] = EEPROM_read(ADDRESS_FOR_B + i);
 109   1        EEPROM_SectorErase(ADDRESS_FOR_A);
 110   1        for(i = data_from; i <= data_end; i++)
 111   1        {
 112   2          EEPROM_write(ADDRESS_FOR_A + (i - data_from), data_A[i]);
 113   2          EEPROM_write(ADDRESS_FOR_B + (i - data_from), data_B[i - data_from]);
 114   2        }
 115   1      }
 116          
 117          
C51 COMPILER V9.52.0.0   UTILS                                                             02/26/2016 21:12:30 PAGE 3   

 118          void Read_A(u8 *send_data, u8 data_from, u8 data_end)
 119          {
 120   1        u8 i;
 121   1        for(i = data_from; i <= data_end; i++)
 122   1          send_data[i] = EEPROM_read(ADDRESS_FOR_A + (i - data_from));
 123   1      }
 124          
 125          void Read_B(u8 *send_data, u8 data_from, u8 data_end)
 126          {
 127   1        u8 i;
 128   1        for(i = data_from; i <= data_end; i++)
 129   1          send_data[i] = EEPROM_read(ADDRESS_FOR_B + (i - data_from));
 130   1      }
 131          
 132          
 133          u8 CRC_Creat(u8 *receive, u8 start, u8 end)
 134          {
 135   1        u8 i, j, buffer, store, odd, CRC_creat = 0;
 136   1        for(i = start; i <= end; i++)
 137   1        {
 138   2          odd = 0;
 139   2          buffer = receive[i];
 140   2          for(j = 0; j < 8; j++)
 141   2          {
 142   3            store = buffer;
 143   3            buffer = buffer >> 1;
 144   3            if(store - (buffer << 1))
 145   3              odd++;
 146   3          }
 147   2          if(odd & 0x01)
 148   2          {
 149   3            CRC_creat = (CRC_creat << 1) + 0;
 150   3          }
 151   2          else
 152   2          { 
 153   3            CRC_creat = (CRC_creat << 1) + 1;
 154   3          }
 155   2        }
 156   1        return  CRC_creat;
 157   1      }
 158          
 159          bool ChecksimpleCRC(u8 *receive, u8 data_from, u8 data_end, u8 CRC_check)
 160          {
 161   1        u8 CRC_creat;
 162   1        CRC_creat = CRC_Creat(receive, data_from, data_end);
 163   1        if(CRC_check == CRC_creat)
 164   1          return 1;
 165   1        else
 166   1          return 0;
 167   1      }
 168          
 169          
 170          u16 AND_Creat(u8 *receive, u8 data_from, u8 data_end)
 171          {
 172   1        u8 i;
 173   1        u16 AND_creat = 0;
 174   1        for(i = data_from; i <= data_end; i++)
 175   1        {
 176   2          AND_creat = AND_creat + receive[i];
 177   2        }
 178   1        return AND_creat;
 179   1      }
C51 COMPILER V9.52.0.0   UTILS                                                             02/26/2016 21:12:30 PAGE 4   

 180          
 181          bool CheckAnd(u8 *receive, u8 data_from, u8 data_end, u8 and_check_1, u8 and_check_2)
 182          {
 183   1        u16 and_creat;
 184   1        and_creat = AND_Creat(receive, data_from, data_end);
 185   1        if(and_check_1 == and_creat >> 8 && and_check_2 == (u8) and_creat)
 186   1          return 1;
 187   1        else
 188   1          return 0; 
 189   1      }
 190          
 191          void Complement_Creat(u8 *receive, u8 data_from, u8 data_end, u8 *complemet_creat, u8 data_start, u8 data_
             -over)
 192          {
 193   1        u8 i;
 194   1        for(i = data_from; i <= data_end; i++)
 195   1          complemet_creat[data_start + i - data_from] = ~ receive[i];
 196   1      }
*** WARNING C280 IN LINE 191 OF utils.c: 'data_over': unreferenced local variable
 197          
 198          bool CheckComplement(u8 *receive, u8 data_from, u8 data_end, u8 *complement_check, u8 data_start, u8 data_
             -over)
 199          {
 200   1        u8 i, j = 0;
 201   1        for(i = data_from; i <= data_end; i++)
 202   1        {
 203   2          if(receive[i] == ~ complement_check[data_start + i - data_from])
 204   2            j++;
 205   2        }
 206   1        if(j == data_end - data_from + 1)
 207   1          return 1;
 208   1        else 
 209   1          return 0;
 210   1      
 211   1      }
*** WARNING C280 IN LINE 198 OF utils.c: 'data_over': unreferenced local variable
 212          
 213          void Order_Over_Creat(u8 *receive, u8 data_from, u8 data_end, u8 *order_over_creat, u8 data_start, u8 data
             -_over)
 214          {
 215   1        u8 i;
 216   1        for(i = data_from; i <= data_end; i++)
 217   1          order_over_creat[data_over - i - data_from] = receive[i];
 218   1      }
*** WARNING C280 IN LINE 213 OF utils.c: 'data_start': unreferenced local variable
 219          
 220          bool CheckOrder_Over(u8 *receive, u8 data_from, u8 data_end, u8 *order_over_check, u8 data_start, u8 data_
             -over)
 221          {
 222   1        u8 i, j = 0;
 223   1        for(i = data_from; i <= data_end; i++)
 224   1        {
 225   2          if(receive[i] == order_over_check[data_over - i - data_from])
 226   2            j++;
 227   2        }
 228   1        if(j == data_end - data_from + 1)
 229   1          return 1;
 230   1        else 
 231   1          return 0;
 232   1      } 
*** WARNING C280 IN LINE 220 OF utils.c: 'data_start': unreferenced local variable
 233          
C51 COMPILER V9.52.0.0   UTILS                                                             02/26/2016 21:12:30 PAGE 5   

 234          void Exclusive_Or_Creat(u8 *receive_1, u8 data_from, u8 data_end, u8 *receive_2, u8 data_start, u8 data_ov
             -er, u8 *exclusive_or_creat, u8 from, u8 end)
 235          {
 236   1        u8 i;
 237   1        for(i = data_from; i <= data_end; i++)
 238   1          exclusive_or_creat[from + i - data_from] = receive_1[i] ^ receive_2[data_start + i - data_from];
 239   1         
 240   1      }
*** WARNING C280 IN LINE 234 OF utils.c: 'data_over': unreferenced local variable
*** WARNING C280 IN LINE 234 OF utils.c: 'end': unreferenced local variable
 241          
 242          
 243          bool CheckExclusive_Or(u8 *receive_1, u8 data_from, u8 data_end, u8 *receive_2, u8 data_start, u8 data_ove
             -r, u8 *exclusive_or_check, u8 from, u8 end)
 244          {
 245   1        u8 i, j = 0;
 246   1        for(i = data_from; i <= data_end; i++)
 247   1        {
 248   2          if(exclusive_or_check[from + i - data_from] == receive_1[i] ^ receive_2[data_start + i - data_from])
 249   2            j++;
 250   2        }
 251   1        if(j == data_end - data_from + 1)
 252   1          return 1;
 253   1        else 
 254   1          return 0;
 255   1      } 
*** WARNING C280 IN LINE 243 OF utils.c: 'data_over': unreferenced local variable
*** WARNING C280 IN LINE 243 OF utils.c: 'end': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2525    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     182
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  8 WARNING(S),  0 ERROR(S)
