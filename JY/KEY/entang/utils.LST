C51 COMPILER V9.52.0.0   UTILS                                                             01/18/2016 20:03:24 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UTILS
OBJECT MODULE PLACED IN utils.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE utils.c LARGE OMF2 BROWSE DEBUG TABS(2)

line level    source

   1          #include "utils.h"
   2          #include "e2prom.h"
   3          
   4          
   5          void Store_Password(u8 *data_password, u8 data_from, u8 data_end)
   6          {
   7   1        u8 i;
   8   1        EEPROM_SectorErase(ADDRESS_FOR_PASSWORD);
   9   1        for(i = data_from; i <= data_end; i++)
  10   1          EEPROM_write(ADDRESS_FOR_PASSWORD + (i - data_from), data_password[i]);
  11   1      }
  12          
  13          void Read_Password(u8 *send_data, u8 data_from, u8 data_end)
  14          {
  15   1        u8 i;
  16   1        for(i = data_from; i <= data_end; i++)
  17   1          send_data[i] = EEPROM_read(ADDRESS_FOR_PASSWORD + (i - data_from));
  18   1      }
  19          
  20          void Store_Timestamp(u8 *data_timestamp, u8 data_from, u8 data_end)
  21          {
  22   1        u8 i;
  23   1        EEPROM_SectorErase(ADDRESS_FOR_TIMESTAMP);
  24   1        for(i = data_from; i <= data_end; i++)
  25   1          EEPROM_write(ADDRESS_FOR_TIMESTAMP + (i - data_from), data_timestamp[i]);
  26   1      }
  27          
  28          u32 Read_Timestamp_High()
  29          {
  30   1        u8 i;
  31   1        u32 counter = 0;
  32   1        for(i = 0; i < 4; i++)
  33   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_TIMESTAMP + i);
  34   1        return counter;
  35   1      }
  36          
  37          u32 Read_Timestamp_Low()
  38          {
  39   1        u8 i;
  40   1        u32 counter = 0;
  41   1        for(i = 4; i < 8; i++)
  42   1          counter = counter << 8 | EEPROM_read(ADDRESS_FOR_TIMESTAMP + i);
  43   1        return counter;
  44   1      }
  45          
  46          
  47          u8 CRC_Creat(u8 *receive, u8 start, u8 end)
  48          {
  49   1        u8 i, j, buffer, store, odd, CRC_creat = 0;
  50   1        for(i = start; i <= end; i++)
  51   1        {
  52   2          odd = 0;
  53   2          buffer = receive[i];
  54   2          for(j = 0; j < 8; j++)
  55   2          {
C51 COMPILER V9.52.0.0   UTILS                                                             01/18/2016 20:03:24 PAGE 2   

  56   3            store = buffer;
  57   3            buffer = buffer >> 1;
  58   3            if(store - (buffer << 1))
  59   3              odd++;
  60   3          }
  61   2          if(odd & 0x01)
  62   2          {
  63   3            CRC_creat = (CRC_creat << 1) + 0;
  64   3          }
  65   2          else
  66   2          { 
  67   3            CRC_creat = (CRC_creat << 1) + 1;
  68   3          }
  69   2        }
  70   1        return  CRC_creat;
  71   1      }
  72          
  73          bool ChecksimpleCRC(u8 *receive, u8 data_from, u8 data_end, u8 CRC_check)
  74          {
  75   1        u8 CRC_creat;
  76   1        CRC_creat = CRC_Creat(receive, data_from, data_end);
  77   1        if(CRC_check == CRC_creat)
  78   1          return 1;
  79   1        else
  80   1          return 0;
  81   1      }
  82          
  83          
  84          u16 AND_Creat(u8 *receive, u8 data_from, u8 data_end)
  85          {
  86   1        u8 i;
  87   1        u16 AND_creat = 0;
  88   1        for(i = data_from; i <= data_end; i++)
  89   1        {
  90   2          AND_creat = AND_creat + receive[i];
  91   2        }
  92   1        return AND_creat;
  93   1      }
  94          
  95          bool CheckAnd(u8 *receive, u8 data_from, u8 data_end, u8 and_check_1, u8 and_check_2)
  96          {
  97   1        u16 and_creat;
  98   1        and_creat = AND_Creat(receive, data_from, data_end);
  99   1        if(and_check_1 == and_creat >> 8 && and_check_2 == (u8) and_creat)
 100   1          return 1;
 101   1        else
 102   1          return 0; 
 103   1      }
 104          
 105          void Complement_Creat(u8 *receive, u8 data_from, u8 data_end, u8 *complemet_creat, u8 data_start, u8 data_
             -over)
 106          {
 107   1        u8 i;
 108   1        for(i = data_from; i <= data_end; i++)
 109   1          complemet_creat[data_start + i - data_from] = ~ receive[i];
 110   1      }
*** WARNING C280 IN LINE 105 OF utils.c: 'data_over': unreferenced local variable
 111          
 112          bool CheckComplement(u8 *receive, u8 data_from, u8 data_end, u8 *complement_check, u8 data_start, u8 data_
             -over)
 113          {
 114   1        u8 i, j = 0;
C51 COMPILER V9.52.0.0   UTILS                                                             01/18/2016 20:03:24 PAGE 3   

 115   1        for(i = data_from; i <= data_end; i++)
 116   1        {
 117   2          if(receive[i] == ~ complement_check[data_start + i - data_from])
 118   2            j++;
 119   2        }
 120   1        if(j == data_end - data_from + 1)
 121   1          return 1;
 122   1        else 
 123   1          return 0;
 124   1      
 125   1      }
*** WARNING C280 IN LINE 112 OF utils.c: 'data_over': unreferenced local variable
 126          
 127          void Order_Over_Creat(u8 *receive, u8 data_from, u8 data_end, u8 *order_over_creat, u8 data_start, u8 data
             -_over)
 128          {
 129   1        u8 i;
 130   1        for(i = data_from; i <= data_end; i++)
 131   1          order_over_creat[data_over - i - data_from] = receive[i];
 132   1      }
*** WARNING C280 IN LINE 127 OF utils.c: 'data_start': unreferenced local variable
 133          
 134          bool CheckOrder_Over(u8 *receive, u8 data_from, u8 data_end, u8 *order_over_check, u8 data_start, u8 data_
             -over)
 135          {
 136   1        u8 i, j = 0;
 137   1        for(i = data_from; i <= data_end; i++)
 138   1        {
 139   2          if(receive[i] == order_over_check[data_over - i - data_from])
 140   2            j++;
 141   2        }
 142   1        if(j == data_end - data_from + 1)
 143   1          return 1;
 144   1        else 
 145   1          return 0;
 146   1      } 
*** WARNING C280 IN LINE 134 OF utils.c: 'data_start': unreferenced local variable
 147          
 148          void Exclusive_Or_Creat(u8 *receive_1, u8 data_from, u8 data_end, u8 *receive_2, u8 data_start, u8 data_ov
             -er, u8 *exclusive_or_creat, u8 from, u8 end)
 149          {
 150   1        u8 i;
 151   1        for(i = data_from; i <= data_end; i++)
 152   1          exclusive_or_creat[from + i - data_from] = receive_1[i] ^ receive_2[data_start + i - data_from];
 153   1         
 154   1      }
*** WARNING C280 IN LINE 148 OF utils.c: 'data_over': unreferenced local variable
*** WARNING C280 IN LINE 148 OF utils.c: 'end': unreferenced local variable
 155          
 156          
 157          bool CheckExclusive_Or(u8 *receive_1, u8 data_from, u8 data_end, u8 *receive_2, u8 data_start, u8 data_ove
             -r, u8 *exclusive_or_check, u8 from, u8 end)
 158          {
 159   1        u8 i, j = 0;
 160   1        for(i = data_from; i <= data_end; i++)
 161   1        {
 162   2          if(exclusive_or_check[from + i - data_from] == receive_1[i] ^ receive_2[data_start + i - data_from])
 163   2            j++;
 164   2        }
 165   1        if(j == data_end - data_from + 1)
 166   1          return 1;
 167   1        else 
C51 COMPILER V9.52.0.0   UTILS                                                             01/18/2016 20:03:24 PAGE 4   

 168   1          return 0;
 169   1      } 
*** WARNING C280 IN LINE 157 OF utils.c: 'data_over': unreferenced local variable
*** WARNING C280 IN LINE 157 OF utils.c: 'end': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1624    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     134
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  8 WARNING(S),  0 ERROR(S)
