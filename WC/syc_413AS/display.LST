C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DISPLAY
OBJECT MODULE PLACED IN display.OBJ
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE display.c COMPACT OMF2 OPTIMIZE(9,SPEED) BROWSE DEBUG TABS(2)

line level    source

   1          #include "shared.h"
   2          #include "display.h"
   3          #include "sync.h"
   4          #include "def.h"
   5          #include "intrins.h"
   6          // ------------------------- display config declaring -------------------------
   7          // // 1
   8          // static code u8 const 
   9          // cycle_for_0001[11]= {100, 100, 40, 14, 14, 14, 14, 14, 14, 14, 100};
  10          // // 2
  11          // static code u8 const 
  12          // cycle_for_0010[2] = {1,4};
  13          // // 3
  14          // static code u8 const 
  15          // cycle_for_0011[14] = {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13};
  16          // // 4
  17          // static code u8 const 
  18          // cycle_for_0100[2] = {100, 100};
  19          // // 5
  20          // static code u8 const 
  21          // cycle_for_0101[12] = {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 20};
  22          // // 6
  23          // static code u8 const 
  24          // cycle_for_0110[2] = {40, 40};
  25          // // 7
  26          // static code u8 const 
  27          // cycle_for_0111[4] = {20, 20, 20, 60};
  28          // // 8
  29          // static code u8 const 
  30          // cycle_for_1000[23] = {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 52, 13, 13, 13, 13, 13, 1
             -3, 13, 40};
  31          // // 9
  32          // static code u8 const 
  33          // cycle_for_1001[25] = {100, 100, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 40, 13, 13, 13,
             - 13, 13, 13, 13, 40};
  34          // // 10
  35          // static code u8 const 
  36          // cycle_for_1010[12] = {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 104};
  37          // // 11
  38          // static code u8 const 
  39          // cycle_for_1011[2] ={64,64};
  40          // // 12
  41          // static code u8 const
  42          // cycle_for_1100[4] ={12, 12, 12, 32};
  43          
  44          // 1
  45          static code u8 const 
  46          cycle_for_0001[12]= {100, 100, 40, 14, 14, 14, 14, 14, 14, 14, 98, 2};
  47          // 2
  48          static code u8 const 
  49          cycle_for_0010[3] = {1, 2, 2};
  50          // 3
  51          static code u8 const 
  52          cycle_for_0011[15] = {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 2};
  53          // 4
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 2   

  54          static code u8 const 
  55          cycle_for_0100[3] = {100, 98, 2};
  56          // 5
  57          static code u8 const 
  58          cycle_for_0101[13] = {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 18, 2};
  59          // 6
  60          static code u8 const 
  61          cycle_for_0110[3] = {40, 38 , 2};
  62          // 7
  63          static code u8 const 
  64          cycle_for_0111[5] = {20, 20, 20, 58, 2};
  65          // 8
  66          static code u8 const 
  67          cycle_for_1000[24] = {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 52, 13, 13, 13, 13, 13, 13, 
             -13, 38, 2};
  68          // 9
  69          static code u8 const 
  70          cycle_for_1001[26] = {100, 100, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 40, 13, 13, 13, 13
             -, 13, 13, 13, 38, 2};
  71          // 10
  72          static code u8 const 
  73          cycle_for_1010[13] = {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 102, 2};
  74          // 11
  75          static code u8 const 
  76          cycle_for_1011[3] ={64, 62, 2};
  77          // 12
  78          static code u8 const
  79          cycle_for_1100[5] ={12, 12, 12, 30, 2};
  80          
  81          cycle_reached_pt cycle_reached;
  82          static const u8 code * data cycle_params;
  83          static u8 current_interval;
  84          static u8 cycle_counter_for_0010 = 4;
  85          
  86          // ------------------------- display_mode_init declaring -------------------------
  87          static void combination_driver_init();
  88          static void driver_0001_init();
  89          static void driver_0010_init();
  90          static void driver_0011_init();
  91          static void driver_0100_init();
  92          static void driver_0101_init();
  93          static void driver_0110_init();
  94          static void driver_0111_init();
  95          static void driver_1000_init();
  96          static void driver_1001_init();
  97          static void driver_1010_init();
  98          static void driver_1011_init();
  99          static void driver_1100_init();
 100          static void driver_1101_init();
 101          
 102          // ------------------------- cycle_reached declaring ---------------------------
 103          static void cycle_reached_0001(u8);
 104          static void cycle_reached_0010(u8);
 105          static void cycle_reached_0011(u8);
 106          static void cycle_reached_0100(u8);
 107          static void cycle_reached_0101(u8);
 108          static void cycle_reached_0110(u8);
 109          static void cycle_reached_0111(u8);
 110          static void cycle_reached_1000(u8);
 111          static void cycle_reached_1001(u8);
 112          static void cycle_reached_1010(u8);
 113          static void cycle_reached_1011(u8);
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 3   

 114          static void cycle_reached_1100(u8);
 115          
 116          void
 117          toggle_once() {
 118   1        // todo
 119   1        if(cycle_output[0] == ON) P36 = 1;
 120   1        else P36 = 0;
 121   1        if(cycle_output[1] == ON) P37 = 1;
 122   1        else  P37 = 0;
 123   1      }
 124          void 
 125          cycle_based_adjust(const u8 cycle) {
 126   1          cycle_reached(cycle);
 127   1      }
 128          
 129          void 
 130          display_mode_set_changed() {
 131   1        // DON't trig display_mode_logic_changed()
 132   1        // -> sync.h
 133   1      //  cycle_ctrl_disable();
 134   1        //display_mode_logic = display_mode_set;
 135   1        // 1. driver init
 136   1        // 2. display_driver -> detailed
 137   1        // 3. cycle_params -> detailed
 138   1        switch (display_mode_set) {
 139   2          case combination:
 140   2            combination_driver_init();
 141   2            // display_mode_logic will never be combination
 142   2            // don't set display driver -> combination driver
 143   2            // don't set cycle_params -> any
 144   2            break;
 145   2          case flash1_directional: 
 146   2            driver_0001_init();
 147   2            cycle_params = cycle_for_0001;
 148   2            cycle_reached = cycle_reached_0001;
 149   2            break;
 150   2          case flash2_directional: 
 151   2            driver_0010_init();
 152   2            cycle_params = cycle_for_0010;
 153   2            cycle_reached = cycle_reached_0010;
 154   2            break;
 155   2          case random_fade: 
 156   2            driver_0011_init();
 157   2            cycle_params = cycle_for_0011;
 158   2            cycle_reached = cycle_reached_0011;
 159   2            break;
 160   2          case stacking_flash: 
 161   2            driver_0100_init();
 162   2            cycle_params = cycle_for_0100;
 163   2            cycle_reached = cycle_reached_0100;
 164   2            break;
 165   2          case flash_and_chase: 
 166   2            driver_0101_init();
 167   2            cycle_params = cycle_for_0101;
 168   2            cycle_reached = cycle_reached_0101;
 169   2            break;
 170   2          case random_flashing: 
 171   2            driver_0110_init();
 172   2            cycle_params = cycle_for_0110;
 173   2            cycle_reached = cycle_reached_0110;
 174   2            break;
 175   2          case bi_directional_pulsing: 
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 4   

 176   2            driver_0111_init();
 177   2            cycle_params = cycle_for_0111;
 178   2            cycle_reached = cycle_reached_0111;
 179   2            break;
 180   2          case bi_directional_chasing: 
 181   2            driver_1000_init();
 182   2            cycle_params = cycle_for_1000;
 183   2            cycle_reached = cycle_reached_1000;
 184   2            break;
 185   2          case pulsing: 
 186   2            driver_1001_init();
 187   2            cycle_params = cycle_for_1001;
 188   2            cycle_reached = cycle_reached_1001;
 189   2            break;
 190   2          case steady_flash: 
 191   2            driver_1010_init();
 192   2            cycle_params = cycle_for_1010;
 193   2            cycle_reached = cycle_reached_1010;
 194   2            break;
 195   2          case sequential_flashing: 
 196   2            driver_1011_init();
 197   2            cycle_params = cycle_for_1011;
 198   2            cycle_reached = cycle_reached_1011;
 199   2            break;
 200   2          case progressive_strobing: 
 201   2            driver_1100_init();
 202   2            cycle_params = cycle_for_1100;
 203   2            cycle_reached = cycle_reached_1100;
 204   2            break;
 205   2          case bi_directional_storbing:
 206   2            driver_1101_init();
 207   2          default:
 208   2            break; 
 209   2        }
 210   1        reset_all_counters();
 211   1        // -> sync.h
 212   1       // cycle_ctrl_enable();
 213   1      }
 214          
 215          // called by pca_isr (combination rotation)
 216          // called by com_isr (combination init)
 217          void 
 218          display_mode_logic_changed() {
 219   1        // 1. driver init
 220   1        // 2. display_driver -> detailed
 221   1        // 3. cycle_params -> detailed
 222   1        // -> sync.h
 223   1        //cycle_ctrl_disable();
 224   1        switch (display_mode_logic) {
 225   2          case combination:
 226   2            break;
 227   2          case flash1_directional: 
 228   2            driver_0001_init();
 229   2            cycle_params = cycle_for_0001;
 230   2            cycle_reached = cycle_reached_0001;
 231   2            break;
 232   2          case flash2_directional: 
 233   2            driver_0010_init();
 234   2            cycle_params = cycle_for_0010;
 235   2            cycle_reached = cycle_reached_0010;
 236   2            break;
 237   2          case random_fade: 
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 5   

 238   2            driver_0011_init();
 239   2            cycle_params = cycle_for_0011;
 240   2            cycle_reached = cycle_reached_0011;
 241   2            break;
 242   2          case stacking_flash: 
 243   2            driver_0100_init();
 244   2            cycle_params = cycle_for_0100;
 245   2            cycle_reached = cycle_reached_0100;
 246   2            break;
 247   2          case flash_and_chase: 
 248   2            driver_0101_init();
 249   2            cycle_params = cycle_for_0101;
 250   2            cycle_reached = cycle_reached_0101;
 251   2            break;
 252   2          case random_flashing: 
 253   2            driver_0110_init();
 254   2            cycle_params = cycle_for_0110;
 255   2            cycle_reached = cycle_reached_0110;
 256   2            break;
 257   2          case bi_directional_pulsing: 
 258   2            driver_0111_init();
 259   2            cycle_params = cycle_for_0111;
 260   2            cycle_reached = cycle_reached_0111;
 261   2            break;
 262   2          case bi_directional_chasing: 
 263   2            driver_1000_init();
 264   2            cycle_params = cycle_for_1000;
 265   2            cycle_reached = cycle_reached_1000;
 266   2            break;
 267   2          case pulsing: 
 268   2            driver_1001_init();
 269   2            cycle_params = cycle_for_1001;
 270   2            cycle_reached = cycle_reached_1001;
 271   2            break;
 272   2          case steady_flash: 
 273   2            driver_1010_init();
 274   2            cycle_params = cycle_for_1010;
 275   2            cycle_reached = cycle_reached_1010;
 276   2            break;
 277   2          case sequential_flashing: 
 278   2            driver_1011_init();
 279   2            cycle_params = cycle_for_1011;
 280   2            cycle_reached = cycle_reached_1011;
 281   2            break;
 282   2          case progressive_strobing: 
 283   2            driver_1100_init();
 284   2            cycle_params = cycle_for_1100;
 285   2            cycle_reached = cycle_reached_1100;
 286   2            break;
 287   2          case bi_directional_storbing:
 288   2          //  driver_1101_init();
 289   2          default:
 290   2            break; 
 291   2        }
 292   1        reset_counter_for_cycle();
 293   1        // override flag -> YES:  (slow)fade-in-out
 294   1        // override flag -> NO:   else
 295   1      }
 296          
 297          // 0
 298          static void
 299          combination_driver_init() {
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 6   

 300   1        // cycle_output[0] = ON;
 301   1        // cycle_output[1] = ON;
 302   1        P36 = 1;
 303   1        P37 = 1;
 304   1        cycle_finished = NO;
 305   1        P33 = 0;
 306   1        current_interval = 0;
 307   1        display_mode_logic_changed();
 308   1      }
 309          // 13
 310          static void
 311          driver_1101_init()
 312          {
 313   1        // cycle_output[0] = ON;
 314   1        // cycle_output[1] = ON;
 315   1        P36 = 1;
 316   1        P37 = 1;
 317   1        cycle_finished = NO;
 318   1        P33 = 0;
 319   1        current_interval = 0;
 320   1        //display_mode_logic = 2;
 321   1        display_mode_logic_changed();
 322   1      }
 323          
 324          // 1
 325          static void
 326          driver_0001_init() {
 327   1        current_interval = 0;
 328   1        P33 = 0;
 329   1      //  cycle_output[0] = ON;
 330   1      //  cycle_output[1] = OFF;
 331   1        P36 = 1;
 332   1        P37 = 0;
 333   1      }
 334          
 335          
 336          static void 
 337          cycle_reached_0001(u8 cycle) 
 338          {
 339   1        if(cycle >= cycle_params[current_interval])
 340   1        {
 341   2          if(current_interval == 0){
 342   3            // cycle_output[0] = OFF;
 343   3            // cycle_output[1] = ON;
 344   3            P36 = 0;
 345   3            P37 = 1;
 346   3          }
 347   2          else if(current_interval == 1){
 348   3            // cycle_output[0] = OFF;
 349   3            // cycle_output[1] = OFF;
 350   3            P36 = 0;
 351   3            P37 = 0;
 352   3          }
 353   2          else if(current_interval == 2){
 354   3            // cycle_output[0] = ON;
 355   3            // cycle_output[1] = ON;
 356   3            P36 = 1;
 357   3            P37 = 1;
 358   3          }
 359   2          else if(current_interval == 3){
 360   3            // cycle_output[0] = OFF;
 361   3            // cycle_output[1] = OFF;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 7   

 362   3            P36 = 0;
 363   3            P37 = 0;
 364   3          }
 365   2          else if(current_interval == 4){
 366   3            // cycle_output[0] = ON;
 367   3            // cycle_output[1] = ON;
 368   3            P36 = 1;
 369   3            P37 = 1;
 370   3          }
 371   2          else if(current_interval == 5){
 372   3            // cycle_output[0] = OFF;
 373   3            // cycle_output[1] = OFF;
 374   3            P36 = 0;
 375   3            P37 = 0;
 376   3          }
 377   2          else if(current_interval == 6){
 378   3            // cycle_output[0] = ON;
 379   3            // cycle_output[1] = ON;
 380   3            P36 = 1;
 381   3            P37 = 1;
 382   3          }
 383   2          else if(current_interval == 7){
 384   3            // cycle_output[0] = OFF;
 385   3            // cycle_output[1] = OFF;
 386   3            P36 = 0;
 387   3            P37 = 0;
 388   3          }
 389   2          else if(current_interval == 8){
 390   3            // cycle_output[0] = ON;
 391   3            // cycle_output[1] = ON;
 392   3            P36 = 1;
 393   3            P37 = 1;
 394   3          }
 395   2          else if(current_interval == 9){
 396   3            // cycle_output[0] = OFF;
 397   3            // cycle_output[1] = OFF;
 398   3            P36 = 0;
 399   3            P37 = 0;
 400   3          }
 401   2          else if(current_interval == 10){
 402   3            // cycle_output[0] = ON;
 403   3            // cycle_output[1] = OFF;
 404   3            P33 = 1;
 405   3          }
 406   2          else if(current_interval == 11){
 407   3            // cycle_output[0] = ON;
 408   3            // cycle_output[1] = OFF;
 409   3            P36 = 1;
 410   3            P37 = 0;
 411   3            P33 = 0;
 412   3          }
 413   2          // else if(current_interval == 10){
 414   2          //  // cycle_output[0] = ON;
 415   2          //  // cycle_output[1] = OFF;
 416   2          //  P36 = 1;
 417   2          //  P37 = 0;
 418   2          // }
 419   2          reset_counter_for_cycle();
 420   2          ++ current_interval;
 421   2          // if(current_interval == 11)
 422   2          // {
 423   2          //  current_interval = 0;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 8   

 424   2          //  cycle_finished = YES;
 425   2          // }
 426   2          if(current_interval == 12)
 427   2          {
 428   3            current_interval = 0;
 429   3          }
 430   2        }
 431   1      }
 432          
 433          // 2
 434          static void
 435          driver_0010_init() {
 436   1        current_interval = 0;
 437   1        cycle_finished = NO;
 438   1        P33 = 0;
 439   1        cycle_counter_for_0010 = 4;
 440   1        // cycle_output[0] = ON;
 441   1        // cycle_output[1] = ON;
 442   1        P36 = 1;
 443   1        P37 = 1;
 444   1      }
 445          
 446          static void 
 447          cycle_reached_0010(u8 cycle) 
 448          {
 449   1        if(cycle >= cycle_params[current_interval])
 450   1        {
 451   2          if(current_interval == 0){
 452   3            // cycle_output[0] = OFF;
 453   3            // cycle_output[1] = OFF;
 454   3            P36 = 0;
 455   3            P37 = 0;
 456   3          }
 457   2          // else if(current_interval == 1){
 458   2          //  // cycle_output[0] = ON;
 459   2          //  // cycle_output[1] = OFF;
 460   2          //  P33 = 1;
 461   2          // }
 462   2          // else if(current_interval == 2){
 463   2          //  // cycle_output[0] = ON;
 464   2          //  // cycle_output[1] = OFF;
 465   2          //  P36 = 1;
 466   2          //  P37 = 1;
 467   2          //  P33 = 0;
 468   2          // }
 469   2          else if(current_interval == 1){
 470   3            // cycle_output[0] = ON;
 471   3            // cycle_output[1] = ON;
 472   3            P36 = 1;
 473   3            P37 = 1;
 474   3          }
 475   2      
 476   2          reset_counter_for_cycle();
 477   2          ++ current_interval;
 478   2      //    if(current_interval == 3)
 479   2           if(current_interval == 2)
 480   2          {
 481   3            current_interval = 0;
 482   3            cycle_finished = NO;
 483   3            --cycle_counter_for_0010;
 484   3            if(!cycle_counter_for_0010)
 485   3            {
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 9   

 486   4              cycle_counter_for_0010 = 4;
 487   4              if(display_mode_set == combination)
 488   4              {
 489   5                display_mode_logic = 3;
 490   5                display_mode_logic_changed();
 491   5              }
 492   4      
 493   4            }
 494   3          }
 495   2        }
 496   1      }
 497          // 3
 498          static void
 499          driver_0011_init() {
 500   1        current_interval = 0;
 501   1        cycle_finished = NO;
 502   1        // cycle_output[0] = ON;
 503   1        // cycle_output[1] = OFF;
 504   1        P36 = 1;
 505   1        P37 = 0;
 506   1      }
 507          
 508          
 509          static void 
 510          cycle_reached_0011(u8 cycle) {
 511   1        if(cycle >= cycle_params[current_interval])
 512   1        {
 513   2          if(current_interval == 0){
 514   3            // cycle_output[0] = OFF;
 515   3            // cycle_output[1] = OFF;
 516   3            P36 = 0;
 517   3            P37 = 0;
 518   3          }
 519   2          else if(current_interval == 1){
 520   3            // cycle_output[0] = ON;
 521   3            // cycle_output[1] = OFF;
 522   3            P36 = 1;
 523   3            P37 = 0;
 524   3          }
 525   2          else if(current_interval == 2){
 526   3            // cycle_output[0] = OFF;
 527   3            // cycle_output[1] = OFF;
 528   3            P36 = 0;
 529   3            P37 = 0;
 530   3          }
 531   2          else if(current_interval == 3){
 532   3            // cycle_output[0] = ON;
 533   3            // cycle_output[1] = OFF;
 534   3            P36 = 1;
 535   3            P37 = 0;
 536   3          }
 537   2          else if(current_interval == 4){
 538   3            // cycle_output[0] = OFF;
 539   3            // cycle_output[1] = OFF;
 540   3            P36 = 0;
 541   3            P37 = 0;
 542   3          }
 543   2          else if(current_interval == 5){
 544   3            // cycle_output[0] = ON;
 545   3            // cycle_output[1] = OFF;
 546   3            P36 = 1;
 547   3            P37 = 0;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 10  

 548   3          }
 549   2          else if(current_interval == 6){
 550   3            // cycle_output[0] = OFF;
 551   3            // cycle_output[1] = ON;
 552   3            P36 = 0;
 553   3            P37 = 1;
 554   3          }
 555   2          else if(current_interval == 7){
 556   3            // cycle_output[0] = OFF;
 557   3            // cycle_output[1] = OFF;
 558   3            P36 = 0;
 559   3            P37 = 0;
 560   3          }
 561   2          else if(current_interval == 8){
 562   3            // cycle_output[0] = OFF;
 563   3            // cycle_output[1] = ON;
 564   3            P36 = 0;
 565   3            P37 = 1;
 566   3          }
 567   2          else if(current_interval == 9){
 568   3            // cycle_output[0] = OFF;
 569   3            // cycle_output[1] = OFF;
 570   3            P36 = 0;
 571   3            P37 = 0;
 572   3          }
 573   2          else if(current_interval == 10){
 574   3            // cycle_output[0] = OFF;
 575   3            // cycle_output[1] = ON;
 576   3            P36 = 0;
 577   3            P37 = 1;
 578   3          }
 579   2          else if(current_interval == 11){
 580   3            // cycle_output[0] = ON;
 581   3            // cycle_output[1] = ON;
 582   3            P36 = 0;
 583   3            P37 = 0;
 584   3          }
 585   2          else if(current_interval == 12){
 586   3            // cycle_output[0] = OFF;
 587   3            // cycle_output[1] = ON;
 588   3            P36 = 0;
 589   3            P37 = 1;
 590   3          }
 591   2          else if(current_interval == 13){
 592   3            // cycle_output[0] = ON;
 593   3            // cycle_output[1] = OFF;
 594   3            P33 = 1;
 595   3          }
 596   2          else if(current_interval == 14){
 597   3            // cycle_output[0] = ON;
 598   3            // cycle_output[1] = OFF;
 599   3            P36 = 1;
 600   3            P37 = 0;
 601   3            P33 = 0;
 602   3          }
 603   2          // else if(current_interval == 13){
 604   2          //  // cycle_output[0] = ON;
 605   2          //  // cycle_output[1] = OFF;
 606   2          //  P36 = 1;
 607   2          //  P37 = 0;
 608   2          // }
 609   2          reset_counter_for_cycle();
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 11  

 610   2          ++ current_interval;
 611   2          if(current_interval == 15)
 612   2          // if(current_interval == 14)
 613   2          {
 614   3            current_interval = 0;
 615   3            // cycle_finished = YES;
 616   3          }
 617   2        }
 618   1      }
 619          
 620          // 4
 621          static void
 622          driver_0100_init() {
 623   1        // cycle_output[0] = ON;
 624   1        // cycle_output[1] = OFF;
 625   1        P36 = 1;
 626   1        P37 = 0;
 627   1        cycle_finished = NO;
 628   1        P33 = 0;
 629   1        current_interval = 0;
 630   1      }
 631          
 632          
 633          static void 
 634          cycle_reached_0100(u8 cycle) {
 635   1      
 636   1        if(cycle >= cycle_params[current_interval])
 637   1        {
 638   2          if(current_interval == 0){
 639   3            // cycle_output[0] = OFF;
 640   3            // cycle_output[1] = ON;
 641   3            P36 = 0;
 642   3            P37 = 1;
 643   3          }
 644   2          else if(current_interval == 1){
 645   3            // cycle_output[0] = ON;
 646   3            // cycle_output[1] = OFF;
 647   3            P33 = 1;
 648   3          }
 649   2          else if(current_interval == 2){
 650   3            // cycle_output[0] = ON;
 651   3            // cycle_output[1] = OFF;
 652   3            P36 = 1;
 653   3            P37 = 0;
 654   3            P33 = 0;
 655   3          }
 656   2          // else if(current_interval == 1){
 657   2          //  // cycle_output[0] = ON;
 658   2          //  // cycle_output[1] = OFF;
 659   2          //  P36 = 1;
 660   2          //  P37 = 0;
 661   2          // }
 662   2          reset_counter_for_cycle();
 663   2          ++ current_interval;
 664   2          if(current_interval == 3)
 665   2          // if(current_interval == 2)
 666   2          {
 667   3            current_interval = 0;
 668   3            // cycle_finished = YES;
 669   3          }
 670   2        }
 671   1      }
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 12  

 672          
 673          
 674          // 5
 675          static void
 676          driver_0101_init() {
 677   1        current_interval = 0;
 678   1        cycle_finished = NO;
 679   1        P33 = 0;
 680   1        // cycle_output[0] = ON;
 681   1        // cycle_output[1] = ON;
 682   1        P36 = 1;
 683   1        P37 = 1;
 684   1      }
 685          
 686          
 687          static void 
 688          cycle_reached_0101(u8 cycle) {
 689   1      
 690   1        if(cycle >= cycle_params[current_interval])
 691   1        {
 692   2          if(current_interval == 0){
 693   3            // cycle_output[0] = OFF;
 694   3            // cycle_output[1] = OFF;
 695   3            P36 = 0;
 696   3            P37 = 0;
 697   3          }
 698   2          else if(current_interval == 1){
 699   3            // cycle_output[0] = ON;
 700   3            // cycle_output[1] = ON;
 701   3            P36 = 1;
 702   3            P37 = 1;
 703   3          }
 704   2          else if(current_interval == 2){
 705   3            // cycle_output[0] = OFF;
 706   3            // cycle_output[1] = OFF;
 707   3            P36 = 0;
 708   3            P37 = 0;
 709   3          }
 710   2          else if(current_interval == 3){
 711   3            // cycle_output[0] = ON;
 712   3            // cycle_output[1] = ON;
 713   3            P36 = 1;
 714   3            P37 = 1;
 715   3          }
 716   2          else if(current_interval == 4){
 717   3            // cycle_output[0] = OFF;
 718   3            // cycle_output[1] = OFF;
 719   3            P36 = 0;
 720   3            P37 = 0;
 721   3          }
 722   2          else if(current_interval == 5){
 723   3            // cycle_output[0] = ON;
 724   3            // cycle_output[1] = ON;
 725   3            P36 = 1;
 726   3            P37 = 1;
 727   3          }
 728   2          else if(current_interval == 6){
 729   3            // cycle_output[0] = OFF;
 730   3            // cycle_output[1] = OFF;
 731   3            P36 = 0;
 732   3            P37 = 0;
 733   3          }
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 13  

 734   2          else if(current_interval == 7){
 735   3            // cycle_output[0] = ON;
 736   3            // cycle_output[1] = ON;
 737   3            P36 = 1;
 738   3            P37 = 1;
 739   3          }
 740   2          else if(current_interval == 8){
 741   3            // cycle_output[0] = OFF;
 742   3            // cycle_output[1] = OFF;
 743   3            P36 = 0;
 744   3            P37 = 0;
 745   3          }
 746   2          else if(current_interval == 9){
 747   3            // cycle_output[0] = ON;
 748   3            // cycle_output[1] = ON;
 749   3            P36 = 1;
 750   3            P37 = 1;
 751   3          }
 752   2          else if(current_interval == 10){
 753   3            // cycle_output[0] = OFF;
 754   3            // cycle_output[1] = OFF;
 755   3            P36 = 0;
 756   3            P37 = 0;
 757   3          }
 758   2          else if(current_interval == 11){
 759   3            // cycle_output[0] = ON;
 760   3            // cycle_output[1] = OFF;
 761   3            P33 = 1;
 762   3          }
 763   2          else if(current_interval == 12){
 764   3            // cycle_output[0] = ON;
 765   3            // cycle_output[1] = OFF;
 766   3            P36 = 1;
 767   3            P37 = 1;
 768   3           P33 = 0;
 769   3          }
 770   2          // else if(current_interval == 11){
 771   2          //  // cycle_output[0] = ON;
 772   2          //  // cycle_output[1] = ON;
 773   2          //  P36 = 1;
 774   2          //  P37 = 1;
 775   2          // }
 776   2          reset_counter_for_cycle();
 777   2          ++ current_interval;
 778   2          if(current_interval == 13)
 779   2          // if(current_interval == 12)
 780   2          {
 781   3            current_interval = 0;
 782   3            // cycle_finished = YES;
 783   3          }
 784   2        }
 785   1      }
 786          
 787          // 6
 788          static void
 789          driver_0110_init() {
 790   1        current_interval = 0;
 791   1        cycle_finished = NO;
 792   1        P33 = 0;
 793   1        // cycle_output[0] = ON;
 794   1        // cycle_output[1] = ON;
 795   1        P36 = 1;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 14  

 796   1        P37 = 1;
 797   1      }
 798          
 799          
 800          static void 
 801          cycle_reached_0110(u8 cycle) {
 802   1      
 803   1        if(cycle >= cycle_params[current_interval])
 804   1        {
 805   2          if(current_interval == 0){
 806   3            // cycle_output[0] = OFF;
 807   3            // cycle_output[1] = OFF;
 808   3            P36 = 0;
 809   3            P37 = 0;
 810   3          }
 811   2          else if(current_interval == 1){
 812   3            // cycle_output[0] = ON;
 813   3            // cycle_output[1] = OFF;
 814   3            P33 = 1;
 815   3          }
 816   2          else if(current_interval == 2){
 817   3            // cycle_output[0] = ON;
 818   3            // cycle_output[1] = OFF;
 819   3            P36 = 1;
 820   3            P37 = 1;
 821   3           P33 = 0;
 822   3          }
 823   2          // else if(current_interval == 1){
 824   2          //  // cycle_output[0] = ON;
 825   2          //  // cycle_output[1] = ON;
 826   2          //  P36 = 1;
 827   2          //  P37 = 1;
 828   2          // }
 829   2          reset_counter_for_cycle();
 830   2          ++ current_interval;
 831   2          if(current_interval == 3)
 832   2          // if(current_interval == 2)
 833   2          {
 834   3            current_interval = 0;
 835   3            // cycle_finished = YES;
 836   3          }
 837   2        }
 838   1      }
 839          
 840          
 841          // 7
 842          static void 
 843          driver_0111_init()
 844          {
 845   1        current_interval = 0;
 846   1        cycle_finished = NO;
 847   1        P33 = 0;
 848   1        // cycle_output[0] = ON;
 849   1        // cycle_output[1] = ON;
 850   1        P36 = 1;
 851   1        P37 = 1;
 852   1      }
 853          
 854          static void
 855          cycle_reached_0111(u8 cycle)
 856          {
 857   1        if(cycle >= cycle_params[current_interval])
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 15  

 858   1        {
 859   2          if(current_interval == 0){
 860   3            // cycle_output[0] = OFF;
 861   3            // cycle_output[1] = OFF;
 862   3            P36 = 0;
 863   3            P37 = 0;
 864   3          }
 865   2          else if(current_interval == 1){
 866   3            // cycle_output[0] = ON;
 867   3            // cycle_output[1] = ON;
 868   3            P36 = 1;
 869   3            P37 = 1;
 870   3          }
 871   2          else if(current_interval == 2){
 872   3            // cycle_output[0] = OFF;
 873   3            // cycle_output[1] = OFF;
 874   3            P36 = 0;
 875   3            P37 = 0;
 876   3          }
 877   2          else if(current_interval == 3){
 878   3            // cycle_output[0] = ON;
 879   3            // cycle_output[1] = OFF;
 880   3            P33 = 1;
 881   3          }
 882   2          else if(current_interval == 4){
 883   3            // cycle_output[0] = ON;
 884   3            // cycle_output[1] = OFF;
 885   3            P36 = 1;
 886   3            P37 = 1;
 887   3            P33 = 0;
 888   3          }
 889   2          // else if(current_interval == 3){
 890   2          //  // cycle_output[0] = ON;
 891   2          //  // cycle_output[1] = ON;
 892   2          //  P36 = 1;
 893   2          //  P37 = 1;
 894   2          // }
 895   2          reset_counter_for_cycle();
 896   2          ++ current_interval;
 897   2          if(current_interval == 5)
 898   2          // if(current_interval == 4)
 899   2          {
 900   3            current_interval = 0;
 901   3            // cycle_finished = YES;
 902   3          }
 903   2      
 904   2        }
 905   1      }
 906          
 907          
 908          // 8
 909          static void
 910          driver_1000_init() {
 911   1        current_interval = 0;
 912   1        cycle_finished = NO;
 913   1        P33 = 0;
 914   1        // cycle_output[0] = ON;
 915   1        // cycle_output[1] = OFF;
 916   1        P36 = 1;
 917   1        P37 = 0;
 918   1      }
 919          
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 16  

 920          
 921          static void 
 922          cycle_reached_1000(u8 cycle) {
 923   1      
 924   1        if(cycle >= cycle_params[current_interval])
 925   1        {
 926   2          if(current_interval == 0){
 927   3            // cycle_output[0] = OFF;
 928   3            // cycle_output[1] = OFF;
 929   3            P36 = 0;
 930   3            P37 = 0;
 931   3          }
 932   2          else if(current_interval == 1){
 933   3            // cycle_output[0] = ON;
 934   3            // cycle_output[1] = OFF;
 935   3            P36 = 1;
 936   3            P37 = 0;
 937   3          }
 938   2          else if(current_interval == 2){
 939   3            // cycle_output[0] = OFF;
 940   3            // cycle_output[1] = OFF;
 941   3            P36 = 0;
 942   3            P37 = 0;
 943   3          }
 944   2          else if(current_interval == 3){
 945   3            // cycle_output[0] = ON;
 946   3            // cycle_output[1] = OFF;
 947   3            P36 = 1;
 948   3            P37 = 0;
 949   3          }
 950   2          else if(current_interval == 4){
 951   3            // cycle_output[0] = OFF;
 952   3            // cycle_output[1] = OFF;
 953   3            P36 = 0;
 954   3            P37 = 0;
 955   3          }
 956   2          else if(current_interval == 5){
 957   3            // cycle_output[0] = ON;
 958   3            // cycle_output[1] = OFF;
 959   3            P36 = 1;
 960   3            P37 = 0;    
 961   3          }
 962   2          else if(current_interval == 6){
 963   3            // cycle_output[0] = OFF;
 964   3            // cycle_output[1] = ON;
 965   3            P36 = 0;
 966   3            P37 = 1;
 967   3          }
 968   2          else if(current_interval == 7){
 969   3            // cycle_output[0] = OFF;
 970   3            // cycle_output[1] = OFF;
 971   3            P36 = 0;
 972   3            P37 = 0;
 973   3          }
 974   2          else if(current_interval == 8){
 975   3            // cycle_output[0] = OFF;
 976   3            // cycle_output[1] = ON;
 977   3            P36 = 0;
 978   3            P37 = 1;
 979   3          }
 980   2          else if(current_interval == 9){
 981   3            // cycle_output[0] = OFF;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 17  

 982   3            // cycle_output[1] = OFF;
 983   3            P36 = 0;
 984   3            P37 = 0;
 985   3          }
 986   2          else if(current_interval == 10){
 987   3            // cycle_output[0] = ON;
 988   3            // cycle_output[1] = OFF;
 989   3            P36 = 0;
 990   3            P37 = 1;
 991   3          }
 992   2          else if(current_interval == 11){
 993   3            // cycle_output[0] = OFF;
 994   3            // cycle_output[1] = OFF;
 995   3            P36 = 0;
 996   3            P37 = 0;
 997   3          }
 998   2          else if(current_interval == 12){
 999   3            // cycle_output[0] = ON;
1000   3            // cycle_output[1] = OFF;
1001   3            P36 = 0;
1002   3            P37 = 1;
1003   3          }
1004   2          else if(current_interval == 13){
1005   3            // cycle_output[0] = OFF;
1006   3            // cycle_output[1] = OFF;
1007   3            P36 = 0;
1008   3            P37 = 0;
1009   3          }
1010   2          else if(current_interval == 14){
1011   3            // cycle_output[0] = ON;
1012   3            // cycle_output[1] = ON;
1013   3            P36 = 1;
1014   3            P37 = 1;
1015   3          }
1016   2          else if(current_interval == 15){
1017   3            // cycle_output[0] = OFF;
1018   3            // cycle_output[1] = OFF;
1019   3            P36 = 0;
1020   3            P37 = 0;
1021   3          }
1022   2          else if(current_interval == 16){
1023   3            // cycle_output[0] = ON;
1024   3            // cycle_output[1] = ON;
1025   3            P36 = 1;
1026   3            P37 = 1;
1027   3          }
1028   2          else if(current_interval == 17){
1029   3            // cycle_output[0] = OFF;
1030   3            // cycle_output[1] = OFF;
1031   3            P36 = 0;
1032   3            P37 = 0;
1033   3          }
1034   2          else if(current_interval == 18){
1035   3            // cycle_output[0] = ON;
1036   3            // cycle_output[1] = ON;
1037   3            P36 = 1;
1038   3            P37 = 1;
1039   3          }
1040   2          else if(current_interval == 19){
1041   3            // cycle_output[0] = OFF;
1042   3            // cycle_output[1] = OFF;
1043   3            P36 = 0;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 18  

1044   3            P37 = 0;
1045   3          }
1046   2          else if(current_interval == 20){
1047   3            // cycle_output[0] = ON;
1048   3            // cycle_output[1] = ON;
1049   3            P36 = 1;
1050   3            P37 = 1;
1051   3          }
1052   2          else if(current_interval == 21){
1053   3            // cycle_output[0] = OFF;
1054   3            // cycle_output[1] = OFF;
1055   3            P36 = 0;
1056   3            P37 = 0;
1057   3          }
1058   2          else if(current_interval == 22){
1059   3            // cycle_output[0] = ON;
1060   3            // cycle_output[1] = OFF;
1061   3            P33 = 1;
1062   3          }
1063   2          else if(current_interval == 23){
1064   3            // cycle_output[0] = ON;
1065   3            // cycle_output[1] = OFF;
1066   3            P36 = 1;
1067   3            P37 = 0;
1068   3           P33 = 0;
1069   3          }
1070   2          // else if(current_interval == 22){
1071   2          //  // cycle_output[0] = ON;
1072   2          //  // cycle_output[1] = OFF;
1073   2          //  P36 = 1;
1074   2          //  P37 = 0;
1075   2          // }
1076   2          reset_counter_for_cycle();
1077   2          ++ current_interval;
1078   2          if(current_interval == 24)
1079   2          // if(current_interval == 23)
1080   2          {
1081   3            current_interval = 0;
1082   3            // cycle_finished = YES;
1083   3          }
1084   2        }
1085   1      }
1086          
1087          
1088          // 9
1089          static void
1090          driver_1001_init() {
1091   1        current_interval = 0;
1092   1        cycle_finished = NO;
1093   1        P33 = 0;
1094   1        // cycle_output[0] = ON;
1095   1        // cycle_output[1] = OFF;
1096   1        P36 = 1;
1097   1        P37 = 0;
1098   1      }
1099          
1100          static void 
1101          cycle_reached_1001(u8 cycle) {
1102   1        if(cycle >= cycle_params[current_interval]){
1103   2          if(current_interval == 0){
1104   3            // cycle_output[0] = OFF;
1105   3            // cycle_output[1] = ON;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 19  

1106   3            P36 = 0;
1107   3            P37 = 1;
1108   3          }
1109   2          else if(current_interval == 1){
1110   3            // cycle_output[0] = ON;
1111   3            // cycle_output[1] = OFF;
1112   3            P36 = 1;
1113   3            P37 = 0;
1114   3          }
1115   2          else if(current_interval == 2){
1116   3            // cycle_output[0] = OFF;
1117   3            // cycle_output[1] = OFF;
1118   3            P36 = 0;
1119   3            P37 = 0;
1120   3          }
1121   2          else if(current_interval == 3){
1122   3            // cycle_output[0] = ON;
1123   3            // cycle_output[1] = OFF;
1124   3            P36 = 1;
1125   3            P37 = 0;
1126   3          }
1127   2          else if(current_interval == 4){
1128   3            // cycle_output[0] = OFF;
1129   3            // cycle_output[1] = OFF;
1130   3            P36 = 0;
1131   3            P37 = 0;
1132   3          }
1133   2          else if(current_interval == 5){
1134   3            // cycle_output[0] = ON;
1135   3            // cycle_output[1] = OFF;
1136   3            P36 = 1;
1137   3            P37 = 0;
1138   3          }
1139   2          else if(current_interval == 6){
1140   3            // cycle_output[0] = OFF;
1141   3            // cycle_output[1] = OFF;
1142   3            P36 = 0;
1143   3            P37 = 0;
1144   3          }
1145   2          else if(current_interval == 7){
1146   3            // cycle_output[0] = ON;
1147   3            // cycle_output[1] = OFF;
1148   3            P36 = 1;
1149   3            P37 = 0;
1150   3          }
1151   2          else if(current_interval == 8){
1152   3            // cycle_output[0] = OFF;
1153   3            // cycle_output[1] = ON;
1154   3            P36 = 0;
1155   3            P37 = 1;
1156   3          }
1157   2          else if(current_interval == 9){
1158   3            // cycle_output[0] = OFF;
1159   3            // cycle_output[1] = OFF;
1160   3            P36 = 0;
1161   3            P37 = 0;
1162   3          }
1163   2          else if(current_interval == 10){
1164   3            // cycle_output[0] = OFF;
1165   3            // cycle_output[1] = ON;
1166   3            P36 = 0;
1167   3            P37 = 1;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 20  

1168   3          }
1169   2          else if(current_interval == 11){
1170   3            // cycle_output[0] = OFF;
1171   3            // cycle_output[1] = OFF;
1172   3            P36 = 0;
1173   3            P37 = 0;
1174   3          }
1175   2          else if(current_interval == 12){
1176   3            // cycle_output[0] = OFF;
1177   3            // cycle_output[1] = ON;
1178   3            P36 = 0;
1179   3            P37 = 1;
1180   3          }
1181   2          else if(current_interval == 13){
1182   3            // cycle_output[0] = OFF;
1183   3            // cycle_output[1] = OFF;
1184   3            P36 = 0;
1185   3            P37 = 0;
1186   3          }
1187   2          else if(current_interval == 14){
1188   3            // cycle_output[0] = OFF;
1189   3            // cycle_output[1] = ON;
1190   3            P36 = 0;
1191   3            P37 = 1;
1192   3          }
1193   2          else if(current_interval == 15){
1194   3            // cycle_output[0] = OFF;
1195   3            // cycle_output[1] = OFF;
1196   3            P36 = 0;
1197   3            P37 = 0;
1198   3          }
1199   2          else if(current_interval == 16){
1200   3            // cycle_output[0] = ON;
1201   3            // cycle_output[1] = ON;
1202   3            P36 = 1;
1203   3            P37 = 1;
1204   3          }
1205   2          else if(current_interval == 17){
1206   3            // cycle_output[0] = OFF;
1207   3            // cycle_output[1] = OFF;
1208   3            P36 = 0;
1209   3            P37 = 0;
1210   3          }
1211   2          else if(current_interval == 18){
1212   3            // cycle_output[0] = ON;
1213   3            // cycle_output[1] = ON;
1214   3            P36 = 1;
1215   3            P37 = 1;
1216   3          }
1217   2          else if(current_interval == 19){
1218   3            // cycle_output[0] = OFF;
1219   3            // cycle_output[1] = OFF;
1220   3            P36 = 0;
1221   3            P37 = 0;
1222   3          }
1223   2          else if(current_interval == 20){
1224   3            // cycle_output[0] = ON;
1225   3            // cycle_output[1] = ON;
1226   3            P36 = 1;
1227   3            P37 = 1;
1228   3          }
1229   2          else if(current_interval == 21){
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 21  

1230   3            // cycle_output[0] = OFF;
1231   3            // cycle_output[1] = OFF;
1232   3            P36 = 0;
1233   3            P37 = 0;
1234   3          }
1235   2          else if(current_interval == 22){
1236   3            // cycle_output[0] = ON;
1237   3            // cycle_output[1] = ON;
1238   3            P36 = 1;
1239   3            P37 = 1;
1240   3          }
1241   2          else if(current_interval == 23){
1242   3            // cycle_output[0] = OFF;
1243   3            // cycle_output[1] = OFF;
1244   3            P36 = 0;
1245   3            P37 = 0;
1246   3          }
1247   2          else if(current_interval == 24){
1248   3            // cycle_output[0] = ON;
1249   3            // cycle_output[1] = OFF;
1250   3            P33 = 1;
1251   3          }
1252   2          else if(current_interval == 25){
1253   3            // cycle_output[0] = ON;
1254   3            // cycle_output[1] = OFF;
1255   3            P36 = 1;
1256   3            P37 = 0;
1257   3           P33 = 0;
1258   3          }
1259   2          // else if(current_interval == 24){
1260   2          //  // cycle_output[0] = ON;
1261   2          //  // cycle_output[1] = OFF;
1262   2          //  P36 = 1;
1263   2          //  P37 = 0;
1264   2          // }
1265   2          reset_counter_for_cycle();
1266   2          ++ current_interval;
1267   2          if(current_interval == 26)
1268   2          // if(current_interval == 25)
1269   2          {
1270   3            current_interval = 0;
1271   3            // cycle_finished = YES;
1272   3          }
1273   2        }
1274   1      }
1275          
1276          
1277          // 10
1278          static void
1279          driver_1010_init() {
1280   1        current_interval = 0;
1281   1        cycle_finished = NO;
1282   1        P33 = 0;
1283   1        // cycle_output[0] = ON;
1284   1        // cycle_output[1] = ON;
1285   1            P36 = 1;
1286   1            P37 = 1;
1287   1      }
1288          
1289          static void 
1290          cycle_reached_1010(u8 cycle) {
1291   1        if(cycle >= cycle_params[current_interval]){
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 22  

1292   2          if(current_interval == 0){
1293   3            // cycle_output[0] = OFF;
1294   3            // cycle_output[1] = OFF;
1295   3            P36 = 0;
1296   3            P37 = 0;
1297   3          }
1298   2          else if(current_interval == 1){
1299   3            // cycle_output[0] = ON;
1300   3            // cycle_output[1] = ON;
1301   3            P36 = 1;
1302   3            P37 = 1;
1303   3          }
1304   2          else if(current_interval == 2){
1305   3            // cycle_output[0] = OFF;
1306   3            // cycle_output[1] = OFF;
1307   3            P36 = 0;
1308   3            P37 = 0;
1309   3          }
1310   2          else if(current_interval == 3){
1311   3            // cycle_output[0] = ON;
1312   3            // cycle_output[1] = ON;
1313   3            P36 = 1;
1314   3            P37 = 1;
1315   3          }
1316   2          else if(current_interval == 4){
1317   3            // cycle_output[0] = OFF;
1318   3            // cycle_output[1] = OFF;
1319   3            P36 = 0;
1320   3            P37 = 0;
1321   3          }
1322   2          else if(current_interval == 5){
1323   3            // cycle_output[0] = ON;
1324   3            // cycle_output[1] = ON;
1325   3            P36 = 1;
1326   3            P37 = 1;
1327   3          }
1328   2          else if(current_interval == 6){
1329   3            // cycle_output[0] = OFF;
1330   3            // cycle_output[1] = OFF;
1331   3            P36 = 0;
1332   3            P37 = 0;
1333   3          }
1334   2          else if(current_interval == 7){
1335   3            // cycle_output[0] = ON;
1336   3            // cycle_output[1] = ON;
1337   3            P36 = 1;
1338   3            P37 = 1;
1339   3          }
1340   2          else if(current_interval == 8){
1341   3            // cycle_output[0] = OFF;
1342   3            // cycle_output[1] = OFF;
1343   3            P36 = 0;
1344   3            P37 = 0;
1345   3          }
1346   2          else if(current_interval == 9){
1347   3            // cycle_output[0] = ON;
1348   3            // cycle_output[1] = ON;
1349   3            P36 = 1;
1350   3            P37 = 1;
1351   3          }
1352   2          else if(current_interval == 10){
1353   3            // cycle_output[0] = OFF;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 23  

1354   3            // cycle_output[1] = OFF;
1355   3            P36 = 0;
1356   3            P37 = 0;
1357   3          }
1358   2          else if(current_interval == 11){
1359   3            // cycle_output[0] = ON;
1360   3            // cycle_output[1] = OFF;
1361   3            P33 = 1;
1362   3          }
1363   2          else if(current_interval == 12){
1364   3            // cycle_output[0] = ON;
1365   3            // cycle_output[1] = ON;
1366   3            P36 = 1;
1367   3            P37 = 1;
1368   3           P33 = 0;
1369   3          }
1370   2          // else if(current_interval == 11){
1371   2          //  // cycle_output[0] = ON;
1372   2          //  // cycle_output[1] = ON;
1373   2          //  P36 = 1;
1374   2          //  P37 = 1;
1375   2          // }
1376   2          reset_counter_for_cycle();
1377   2          ++ current_interval;
1378   2          if(current_interval == 13)
1379   2          // if(current_interval == 12)
1380   2          {
1381   3            current_interval = 0;
1382   3            // cycle_finished = YES;
1383   3          }
1384   2        }
1385   1      }
1386          
1387          // 11
1388          static void
1389          driver_1011_init() {
1390   1        current_interval = 0;
1391   1        cycle_finished = NO;
1392   1        P33 = 0;
1393   1        // cycle_output[0] = ON;
1394   1        // cycle_output[1] = ON;
1395   1        P36 = 1;
1396   1        P37 = 1;
1397   1      }
1398          
1399          static void 
1400          cycle_reached_1011(u8 cycle)
1401          {
1402   1        if(cycle >= cycle_params[current_interval]){  
1403   2          if(current_interval == 0){
1404   3            // cycle_output[0] = OFF;
1405   3            // cycle_output[1] = OFF;
1406   3            P36 = 0;
1407   3            P37 = 0;
1408   3          }
1409   2          else if(current_interval == 1){
1410   3            // cycle_output[0] = ON;
1411   3            // cycle_output[1] = OFF;
1412   3            P33 = 1;
1413   3          }
1414   2          else if(current_interval == 2){
1415   3            // cycle_output[0] = ON;
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 24  

1416   3            // cycle_output[1] = OFF;
1417   3            P36 = 1;
1418   3            P37 = 1;
1419   3           P33 = 0;
1420   3          }
1421   2          // else if(current_interval == 1){
1422   2          //  // cycle_output[0] = ON;
1423   2          //  // cycle_output[1] = ON;
1424   2          //  P36 = 1;
1425   2          //  P37 = 1;
1426   2          // }
1427   2          reset_counter_for_cycle();
1428   2          ++ current_interval;
1429   2          if(current_interval == 3)
1430   2          // if(current_interval == 2)
1431   2          {
1432   3            current_interval = 0;
1433   3            // cycle_finished = YES;
1434   3          }
1435   2        
1436   2        }
1437   1      }
1438          
1439          // 12
1440          static void
1441          driver_1100_init() {
1442   1        current_interval = 0;
1443   1        cycle_finished = NO;
1444   1        P33 = 0;
1445   1        // cycle_output[0] = ON;
1446   1        // cycle_output[1] = ON;
1447   1        P36 = 1;
1448   1        P37 = 1;
1449   1      }
1450          
1451          static void 
1452          cycle_reached_1100(u8 cycle) {
1453   1        if(cycle >= cycle_params[current_interval]){
1454   2          if(current_interval == 0){
1455   3            // cycle_output[0] = OFF;
1456   3            // cycle_output[1] = OFF;
1457   3            P36 = 0;
1458   3            P37 = 0;
1459   3          }
1460   2          else if(current_interval == 1){
1461   3            // cycle_output[0] = ON;
1462   3            // cycle_output[1] = ON;
1463   3            P36 = 1;
1464   3            P37 = 1;
1465   3          }
1466   2          else if(current_interval == 2){
1467   3            // cycle_output[0] = OFF;
1468   3            // cycle_output[1] = OFF;
1469   3            P36 = 0;
1470   3            P37 = 0;
1471   3          }
1472   2          else if(current_interval == 3){
1473   3            // cycle_output[0] = ON;
1474   3            // cycle_output[1] = OFF;
1475   3            P33 = 1;
1476   3          }
1477   2          else if(current_interval == 4){
C51 COMPILER V9.52.0.0   DISPLAY                                                           09/07/2015 13:09:21 PAGE 25  

1478   3            // cycle_output[0] = ON;
1479   3            // cycle_output[1] = OFF;
1480   3            P36 = 1;
1481   3            P37 = 1;
1482   3           P33 = 0;
1483   3          }
1484   2          // else if(current_interval == 3){
1485   2          //  // cycle_output[0] = ON;
1486   2          //  // cycle_output[1] = ON;
1487   2          //  P36 = 1;
1488   2          //  P37 = 1;
1489   2          // }
1490   2          reset_counter_for_cycle();
1491   2          ++ current_interval;
1492   2          if(current_interval == 5)
1493   2          // if(current_interval == 4)
1494   2          {
1495   3            current_interval = 0;
1496   3            // cycle_finished = YES;
1497   3          }
1498   2        }
1499   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1976    ----
   CONSTANT SIZE    =    125    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      5    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
