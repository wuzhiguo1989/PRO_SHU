C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SYNC
OBJECT MODULE PLACED IN sync.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE sync.c DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "sync.h"
   2          #include "task.h"
   3          #include "time.h"
   4          #include "share.h"
   5          #include "74hc595.h"
   6          #include "utils.h"
   7          #include "key.h"
   8          #include "adc.h"
   9          
  10          
  11          // KEY scan 20ms
  12          #define KEY_SCAN_TASK_INTERVAL   10
  13          static u8 key_task_interval = KEY_SCAN_TASK_INTERVAL;
  14          
  15          #define BATTERY_CAL_TASK_INTERVAL 100 
  16          static u8 battery_cal_interval = BATTERY_CAL_TASK_INTERVAL;
  17          
  18          #define SECOND_SCAN_TASK_INTERVAL 200
  19          static u8 second_task_interval = SECOND_SCAN_TASK_INTERVAL;
  20          
  21          #define COUNTER_PER_SECOND 200
  22          
  23          #define INTERRUPT_SCAN_TASK_INTERVAL 20
  24          u8 interval_detect_start_signal = INTERRUPT_SCAN_TASK_INTERVAL;
  25          u8 interval_detect_end_signal = INTERRUPT_SCAN_TASK_INTERVAL;
  26          
  27          #define INTERRUPT_IGNORE_INTERVAL 200
  28          u16 interval_ignore_end_interrupt = INTERRUPT_IGNORE_INTERVAL;
  29          u16 interval_ignore_start_interrupt = INTERRUPT_IGNORE_INTERVAL;
  30          
  31          #define INTERRUPT_START_ON_DELAY 10
  32          
  33          #define INTERVAL_WORK_START 600
  34          u16  interval_work_start_on = 0;
  35          
  36          void reset_work_start()
  37          {
  38   1          interval_work_start_on = INTERVAL_WORK_START;
  39   1      }
  40          
  41          // 5ms
  42          void init_system_tick() {
  43   1          Timer0_12T();
  44   1          Timer0_AsTimer();
  45   1          Timer0_16bitAutoReload();
  46   1          T0_Load(0xD8F0);
  47   1          Timer0_InterruptEnable();
  48   1          Timer0_Run();
  49   1      }
  50          
  51          u16 pca_next_target = 0;
  52          // 2ms 
  53          void dispaly_driver_init() { 
  54   1          CCON = 0;                       //初始化PCA控制寄存器 
  55   1                                          //PCA定时器停止 
C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 2   

  56   1                                           //清除CF标志 
  57   1                                          //清除模块中断标志 
  58   1           CL = 0; 
  59   1           CH = 0; 
  60   1           pca_next_target =  pca_next_target + T500Hz; 
  61   1           CCAP0L = pca_next_target; 
  62   1           CCAP0H = pca_next_target >> 8; 
  63   1           CMOD = 0x00;                    //设置PCA时钟源 
  64   1                                          //禁止PCA定时器溢出中断 
  65   1           CCAPM0 = 0x49;                  //PCA模块0为16位定时器模式 
  66   1           CR = 1; 
  67   1       } 
  68          
  69          #define T1MHz (65536 - MAIN_Fosc / 2 / 12 / 1000000)
  70          void Source_clock_gen(void)
  71          {
  72   1          AUXR &= ~0x04;
  73   1          AUXR &= ~0x08;
  74   1          T2L = T1MHz;
  75   1          T2H = T1MHz >> 8;
  76   1          INT_CLKO = 0x04;
  77   1          Source_Clock_Stop();
  78   1          // Source_Clock_Run();
  79   1      }
  80          
  81          void interrupt_control_init()
  82          {
  83   1          INT0 = 1;
  84   1          IT0 = 0; // 低电平有效
  85   1          EX0 = ENABLE;
  86   1      
  87   1          INT1 = 1;
  88   1          IT1 = 1; // 低电平有效
  89   1          EX1 = DISABLE;
  90   1      }
  91          
  92          
  93          void tm0_isr() interrupt TIMER0_VECTOR  using 1
  94          {    
  95   1          INT_PROC |= TICK_DUTY;
  96   1          // 20ms刷新按键
  97   1          if(!--key_task_interval)
  98   1          {
  99   2              INT_PROC |= KEY_DUTY;
 100   2              key_task_interval = KEY_SCAN_TASK_INTERVAL;
 101   2          }
 102   1          // 
 103   1          if(!--battery_cal_interval)
 104   1          {
 105   2              INT_PROC |= ADC_DUTY;
 106   2              if(!CHG)
 107   2              {
 108   3                  icon_power ++;
 109   3              }    
 110   2              else
 111   2              {
 112   3                  if(status_mb_key != 2)
 113   3                  {
 114   4                      color_level ++;
 115   4                      if(color_level == 7)
 116   4                          color_level = 0;
 117   4                  }
C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 3   

 118   3              }
 119   2              battery_cal_interval = BATTERY_CAL_TASK_INTERVAL;
 120   2          } 
 121   1      }
 122          
 123          
 124          void count_down_task()
 125          {
 126   1          // 1000ms 刷新一次时间
 127   1          if(countdown_signal_start)
 128   1          {
 129   2              if(!--second_task_interval)
 130   2              {
 131   3                  // 计时图标闪烁
 132   3                  time_colon_icon = ~time_colon_icon;
 133   3                  // 计算时间
 134   3                  if(--local_time.second == 255)
 135   3                  {
 136   4                      local_time.second = 59;
 137   4                      if(!local_time.minute --)
 138   4                      {
 139   5                          countdown_signal_start = NO;
 140   5      
 141   5                          POUT = 0;
 142   5      
 143   5                          status_system = 0;
 144   5      
 145   5                          status_mb_key = 0;
 146   5      
 147   5                          // 关闭+、-灯
 148   5                          P23 = 0;
 149   5                          //
 150   5                          P31 = 1;
 151   5                          P12 = 0;
 152   5                          P55 = 1;
 153   5                          key_sampling = NO;
 154   5                          EX0 = ENABLE;
 155   5                          EX1 = DISABLE;
 156   5                      }
 157   4                      
 158   4                  }
 159   3                  second_task_interval = SECOND_SCAN_TASK_INTERVAL;
 160   3              }
 161   2          }
 162   1      }
 163          
 164          void delay_hold_interval() {
 165   1          if(interval_detect_start_signal)
 166   1          {
 167   2              --interval_detect_start_signal;
 168   2              if(interval_detect_start_signal == 1 && status_system == 3)
 169   2              {
 170   3                  status_system = 0;
 171   3                  P23 = 0;
 172   3                  EX1 = DISABLE;
 173   3              }
 174   2              if(interval_detect_start_signal == INTERRUPT_START_ON_DELAY)
 175   2                  EX1 = ENABLE;
 176   2      
 177   2          }
 178   1      
 179   1          if (interval_ignore_end_interrupt)
C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 4   

 180   1          {
 181   2              if(!--interval_ignore_end_interrupt)
 182   2              {
 183   3                  EX1 = ENABLE;
 184   3              }
 185   2          }
 186   1      
 187   1      
 188   1          if (interval_ignore_start_interrupt)
 189   1          {
 190   2              if(!--interval_ignore_start_interrupt && status_system == 2)
 191   2              {
 192   3                  EX0 = ENABLE;
 193   3                  status_system = 0;
 194   3              }
 195   2          }
 196   1      
 197   1          if(interval_detect_end_signal)
 198   1          {
 199   2              --interval_detect_end_signal;
 200   2              if(!interval_detect_end_signal && status_system == 4)
 201   2              {
 202   3                  status_system = 1;
 203   3                  EX0 = DISABLE;
 204   3              }
 205   2              if(interval_detect_end_signal == INTERRUPT_START_ON_DELAY)
 206   2                  EX0 = ENABLE;
 207   2      
 208   2          }
 209   1      
 210   1          if(interval_work_start_on)
 211   1          {
 212   2              -- interval_work_start_on;
 213   2              if(!interval_work_start_on)
 214   2              {
 215   3                  adc_sampling = YES;
 216   3                  // 美牙蓝牙已启动
 217   3                  P31 = 0;
 218   3                  P55 = 1;
 219   3                  P12 = 1;
 220   3                  countdown_signal_start = YES;
 221   3              }
 222   2          }
 223   1      
 224   1      }
 225          
 226          
 227          void exint1() interrupt INT1_VECTOR using 3
 228          {
 229   1          if(!INT1)
 230   1          {
 231   2              if(status_system == 3)
 232   2              {
 233   3                  interval_detect_start_signal = 0;
 234   3                  EX0 = DISABLE;
 235   3                  EX1 = DISABLE;
 236   3                  interval_ignore_end_interrupt = INTERRUPT_IGNORE_INTERVAL;
 237   3                  // 无操作退出
 238   3                  // no_operation_exit = YES;
 239   3                  // interval_no_operation = 6000;
 240   3                  P31 = P12 = P55 = 1;
 241   3                  // 驱动+、-灯
C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 5   

 242   3                  P23 = 1;
 243   3      
 244   3                  status_system = 1;
 245   3                      
 246   3                  POUT = 1;
 247   3      
 248   3       
 249   3                  init_adc();
 250   3                  // 检测按键
 251   3                  Source_Clock_Run();
 252   3      
 253   3                  // 显示倒计时
 254   3                  time_init();
 255   3      
 256   3                  // 开始无操作关机倒计时
 257   3                  status_mb_key = 0;
 258   3      
 259   3                  INT_PROC |= SYSTEM_START_DUTY;
 260   3              }
 261   2              if(status_system == 1 && status_mb_key != 1)
 262   2              {
 263   3                  if(INT0)
 264   3                  {
 265   4                      status_system = 4;
 266   4                      interval_detect_end_signal = INTERRUPT_SCAN_TASK_INTERVAL;
 267   4                  }
 268   3              }
 269   2          }
 270   1      }
 271          
 272          void exint0() interrupt INT0_VECTOR using 1
 273          {
 274   1          if(!INT0)
 275   1          {
 276   2              if(status_system == 0)
 277   2              {
 278   3                  if(!CHG)
 279   3                  {
 280   4                      //todo： 直接显示充电模式
 281   4                      status_system = 5;
 282   4                      P23 = 0;
 283   4                      status_mb_key = 0;
 284   4                  }    
 285   3                  else
 286   3                  { 
 287   4                      if(INT1)
 288   4                      {
 289   5                          status_system = 3;
 290   5                          interval_detect_start_signal = INTERRUPT_SCAN_TASK_INTERVAL;
 291   5                      }
 292   4                  }
 293   3              }
 294   2      
 295   2              if(status_system == 4)
 296   2              {
 297   3                  interval_detect_end_signal = 0;
 298   3                  status_system = 2;
 299   3                  EX0 = DISABLE;
 300   3                  EX1 = DISABLE;
 301   3                  P23 = 0;
 302   3                  POUT = 0;
 303   3                  P55 = P31 = P12 = 1;
C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 6   

 304   3                  interval_ignore_start_interrupt = INTERRUPT_IGNORE_INTERVAL;
 305   3                  adc_sampling = NO;
 306   3                  key_sampling = NO;
 307   3              }
 308   2          }
 309   1          else
 310   1          {
 311   2              // 充电被拔掉或者充电满
 312   2              if(status_system == 5)
 313   2              {
 314   3                  status_system = 0;
 315   3                  Displayclean();
 316   3      
 317   3                  charge_on = 0;
 318   3                  countdown_signal_start = NO;
 319   3                  status_mb_key = 0;
 320   3                  // 关闭+、-灯
 321   3                  P23 = 0;
 322   3              }
 323   2      
 324   2          }
 325   1      }
 326          
 327          
 328          #define FAST_CAL_INTERVAL 200
 329          u8 interval_fast_increase_cal = FAST_CAL_INTERVAL;
 330          u8 interval_fast_decrease_cal = FAST_CAL_INTERVAL;
 331          //PCA中断 speak发声 
 332           void pca_isr() interrupt 7 using 1  
 333          { 
 334   1          CCF0 = 0;       //  清中断标志 
 335   1          pca_next_target =  pca_next_target + T500Hz; 
 336   1          CCAP0L = pca_next_target; 
 337   1          CCAP0H = pca_next_target >> 8;
 338   1          INT_PROC |= REFRESH_DUTY;
 339   1          if(increase_fast_refresh)
 340   1          {
 341   2              if(!--interval_fast_increase_cal)
 342   2              {
 343   3                  local_time.minute ++;
 344   3                  if(local_time.minute == 61)
 345   3                      local_time.minute = 0;
 346   3                  interval_fast_increase_cal = FAST_CAL_INTERVAL;
 347   3              }
 348   2          }
 349   1          if(decrease_fast_refresh)
 350   1          {
 351   2              if(!--interval_fast_decrease_cal)
 352   2              {
 353   3                  if(local_time.minute == 0)
 354   3                      local_time.minute = 61;
 355   3                  local_time.minute --;
 356   3                  interval_fast_increase_cal = FAST_CAL_INTERVAL;
 357   3              }
 358   2          }
 359   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    655    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   SYNC                                                              08/23/2016 22:56:21 PAGE 7   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
