C51 COMPILER V9.52.0.0   SYNC                                                              12/02/2016 16:34:31 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SYNC
OBJECT MODULE PLACED IN sync.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE sync.c DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "sync.h"
   2          #include "task.h"
   3          #include "time.h"
   4          #include "share.h"
   5          #include "74hc595.h"
   6          #include "utils.h"
   7          #include "key.h"
   8          #include "adc.h"
   9          
  10          
  11          // KEY scan 20ms
  12          #define KEY_SCAN_TASK_INTERVAL   10
  13          static u8 key_task_interval = KEY_SCAN_TASK_INTERVAL;
  14          
  15          #define BATTERY_CAL_TASK_INTERVAL 100 
  16          static u8 battery_cal_interval = BATTERY_CAL_TASK_INTERVAL;
  17          
  18          #define SECOND_SCAN_TASK_INTERVAL 200
  19          static u8 second_task_interval = SECOND_SCAN_TASK_INTERVAL;
  20          
  21          #define COUNTER_PER_SECOND 200
  22          
  23          #define INTERRUPT_SCAN_TASK_INTERVAL 20
  24          u8 interval_detect_start_signal = INTERRUPT_SCAN_TASK_INTERVAL;
  25          u8 interval_detect_end_signal = INTERRUPT_SCAN_TASK_INTERVAL;
  26          
  27          #define INTERRUPT_IGNORE_INTERVAL 200
  28          u16 interval_ignore_end_interrupt = INTERRUPT_IGNORE_INTERVAL;
  29          u16 interval_ignore_start_interrupt = INTERRUPT_IGNORE_INTERVAL;
  30          
  31          #define INTERRUPT_START_ON_DELAY 10
  32          
  33          #define INTERVAL_WORK_START 600
  34          u16  interval_work_start_on = 0;
  35          
  36          void reset_work_start()
  37          {
  38   1          interval_work_start_on = INTERVAL_WORK_START;
  39   1      }
  40          
  41          // 5ms
  42          void init_system_tick() {
  43   1          Timer0_12T();
  44   1          Timer0_AsTimer();
  45   1          Timer0_16bitAutoReload();
  46   1          T0_Load(0xD8F0);
  47   1          Timer0_InterruptEnable();
  48   1          Timer0_Run();
  49   1      }
  50          
  51          u16 pca_next_target = 0;
  52          // 2ms 
  53          void dispaly_driver_init() { 
  54   1          CCON = 0;                       //初始化PCA控制寄存器 
  55   1                                          //PCA定时器停止 
C51 COMPILER V9.52.0.0   SYNC                                                              12/02/2016 16:34:31 PAGE 2   

  56   1                                           //清除CF标志 
  57   1                                          //清除模块中断标志 
  58   1           CL = 0; 
  59   1           CH = 0; 
  60   1           pca_next_target =  pca_next_target + T500Hz; 
  61   1           CCAP0L = pca_next_target; 
  62   1           CCAP0H = pca_next_target >> 8; 
  63   1           CMOD = 0x00;                    //设置PCA时钟源 
  64   1                                          //禁止PCA定时器溢出中断 
  65   1           CCAPM0 = 0x49;                  //PCA模块0为16位定时器模式 
  66   1           CR = 1; 
  67   1       } 
  68          
  69          #define T1MHz (65536 - MAIN_Fosc / 2 / 12 / 1000000)
  70          void Source_clock_gen(void)
  71          {
  72   1          AUXR &= ~0x04;
  73   1          AUXR &= ~0x08;
  74   1          T2L = T1MHz;
  75   1          T2H = T1MHz >> 8;
  76   1          INT_CLKO = 0x04;
  77   1          Source_Clock_Stop();
  78   1          // Source_Clock_Run();
  79   1      }
  80          
  81          void interrupt_control_init()
  82          {
  83   1          INT0 = 1;
  84   1          IT0 = 0; // 低电平有效
  85   1          EX0 = ENABLE;
  86   1      }
  87          
  88          
  89          void tm0_isr() interrupt TIMER0_VECTOR  using 1
  90          {    
  91   1          INT_PROC |= TICK_DUTY;
  92   1          // 20ms刷新按键
  93   1          if(!--key_task_interval)
  94   1          {
  95   2              INT_PROC |= KEY_DUTY;
  96   2              key_task_interval = KEY_SCAN_TASK_INTERVAL;
  97   2          }
  98   1          // 
  99   1          if(!--battery_cal_interval)
 100   1          {
 101   2              INT_PROC |= ADC_DUTY;
 102   2              if(!CHG)
 103   2              {
 104   3                  icon_power ++;
 105   3              }    
 106   2              else
 107   2              {
 108   3                  color_level ++;
 109   3                  if(color_level == 7)
 110   3                      color_level = 0;
 111   3              }
 112   2              battery_cal_interval = BATTERY_CAL_TASK_INTERVAL;
 113   2          } 
 114   1      }
 115          
 116          
 117          void count_down_task()
C51 COMPILER V9.52.0.0   SYNC                                                              12/02/2016 16:34:31 PAGE 3   

 118          {
 119   1          // 1000ms 刷新一次时间
 120   1          if(countdown_signal_start)
 121   1          {
 122   2              if(!--second_task_interval)
 123   2              {
 124   3                  // 计时图标闪烁
 125   3                  time_colon_icon = ~time_colon_icon;
 126   3                  // 计算时间
 127   3                  if(--local_time.second == 255)
 128   3                  {
 129   4                      local_time.second = 59;
 130   4                      if(!local_time.minute --)
 131   4                      {
 132   5                          countdown_signal_start = NO;
 133   5                          POUT = 0;
 134   5                          // status_system = 0;
 135   5      
 136   5                          status_mb_key = 0;
 137   5                          P31 = 1;
 138   5                          P12 = 0;
 139   5                          P55 = 1;
 140   5                          local_time.second = 0;
 141   5                          local_time.minute = 0;
 142   5                          key_sampling = NO;
 143   5                      }
 144   4                      
 145   4                  }
 146   3                  second_task_interval = SECOND_SCAN_TASK_INTERVAL;
 147   3              }
 148   2          }
 149   1      }
 150          
 151          
 152          
 153          #define FAST_CAL_INTERVAL 200
 154          u8 interval_fast_increase_cal = FAST_CAL_INTERVAL;
 155          u8 interval_fast_decrease_cal = FAST_CAL_INTERVAL;
 156          //PCA中断 speak发声 
 157           void pca_isr() interrupt 7 using 1  
 158          { 
 159   1          CCF0 = 0;       //  清中断标志 
 160   1          pca_next_target =  pca_next_target + T500Hz; 
 161   1          CCAP0L = pca_next_target; 
 162   1          CCAP0H = pca_next_target >> 8;
 163   1          INT_PROC |= REFRESH_DUTY;
 164   1          if(increase_fast_refresh)
 165   1          {
 166   2              if(!--interval_fast_increase_cal)
 167   2              {
 168   3                  local_time.minute ++;
 169   3                  if(local_time.minute == 61)
 170   3                      local_time.minute = 0;
 171   3                  interval_fast_increase_cal = FAST_CAL_INTERVAL;
 172   3              }
 173   2          }
 174   1          if(decrease_fast_refresh)
 175   1          {
 176   2              if(!--interval_fast_decrease_cal)
 177   2              {
 178   3                  if(local_time.minute == 0)
 179   3                      local_time.minute = 61;
C51 COMPILER V9.52.0.0   SYNC                                                              12/02/2016 16:34:31 PAGE 4   

 180   3                  local_time.minute --;
 181   3                  interval_fast_increase_cal = FAST_CAL_INTERVAL;
 182   3              }
 183   2          }
 184   1      } 
 185          
 186          void exint0() interrupt INT0_VECTOR using 1
 187          {
 188   1          if(!INT0)
 189   1          {
 190   2              // 充电模式
 191   2              Source_Clock_Stop();
 192   2              countdown_signal_start = NO;        
 193   2              charge_on = 1;
 194   2              Displayclean();
 195   2              init_adc();
 196   2              key_sampling = NO;
 197   2              // 关闭+、-灯
 198   2              P23 = 0;
 199   2          }
 200   1          else
 201   1          {
 202   2              // 充电被拔掉或者充电满
 203   2              Source_Clock_Run();
 204   2              INT_PROC |= SYSTEM_START_DUTY;
 205   2              Displayclean();
 206   2              charge_on = 0;
 207   2              countdown_signal_start = NO;
 208   2              // 打开+、-灯
 209   2              P23 = 1;
 210   2          }
 211   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
